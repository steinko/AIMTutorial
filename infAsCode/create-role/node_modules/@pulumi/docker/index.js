"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
// Export members:
__export(require("./container"));
__export(require("./docker"));
__export(require("./getNetwork"));
__export(require("./getPlugin"));
__export(require("./getRegistryImage"));
__export(require("./getRemoteImage"));
__export(require("./image"));
__export(require("./network"));
__export(require("./plugin"));
__export(require("./provider"));
__export(require("./registryImage"));
__export(require("./remoteImage"));
__export(require("./secret"));
__export(require("./service"));
__export(require("./serviceConfig"));
__export(require("./utils"));
__export(require("./volume"));
// Export sub-modules:
const config = require("./config");
exports.config = config;
const types = require("./types");
exports.types = types;
// Import resources to register:
const container_1 = require("./container");
const network_1 = require("./network");
const plugin_1 = require("./plugin");
const registryImage_1 = require("./registryImage");
const remoteImage_1 = require("./remoteImage");
const secret_1 = require("./secret");
const service_1 = require("./service");
const serviceConfig_1 = require("./serviceConfig");
const volume_1 = require("./volume");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "docker:index/container:Container":
                return new container_1.Container(name, undefined, { urn });
            case "docker:index/network:Network":
                return new network_1.Network(name, undefined, { urn });
            case "docker:index/plugin:Plugin":
                return new plugin_1.Plugin(name, undefined, { urn });
            case "docker:index/registryImage:RegistryImage":
                return new registryImage_1.RegistryImage(name, undefined, { urn });
            case "docker:index/remoteImage:RemoteImage":
                return new remoteImage_1.RemoteImage(name, undefined, { urn });
            case "docker:index/secret:Secret":
                return new secret_1.Secret(name, undefined, { urn });
            case "docker:index/service:Service":
                return new service_1.Service(name, undefined, { urn });
            case "docker:index/serviceConfig:ServiceConfig":
                return new serviceConfig_1.ServiceConfig(name, undefined, { urn });
            case "docker:index/volume:Volume":
                return new volume_1.Volume(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("docker", "index/container", _module);
pulumi.runtime.registerResourceModule("docker", "index/network", _module);
pulumi.runtime.registerResourceModule("docker", "index/plugin", _module);
pulumi.runtime.registerResourceModule("docker", "index/registryImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/remoteImage", _module);
pulumi.runtime.registerResourceModule("docker", "index/secret", _module);
pulumi.runtime.registerResourceModule("docker", "index/service", _module);
pulumi.runtime.registerResourceModule("docker", "index/serviceConfig", _module);
pulumi.runtime.registerResourceModule("docker", "index/volume", _module);
const provider_1 = require("./provider");
pulumi.runtime.registerResourcePackage("docker", {
    version: utilities.getVersion(),
    constructProvider: (name, type, urn) => {
        if (type !== "pulumi:providers:docker") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new provider_1.Provider(name, undefined, { urn });
    },
});
//# sourceMappingURL=index.js.map