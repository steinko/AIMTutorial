"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * <!-- Bug: Type and Name are switched -->
 * Pulls a Docker image to a given Docker host from a Docker Registry.
 *  This resource will *not* pull new layers of the image automatically unless used in conjunction with docker.RegistryImage data source to update the `pullTriggers` field.
 *
 * ## Example Usage
 * ### Basic
 *
 * Finds and downloads the latest `ubuntu:precise` image but does not check
 * for further updates of the image
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const ubuntu = new docker.RemoteImage("ubuntu", {
 *     name: "ubuntu:precise",
 * });
 * ```
 * ### Dynamic updates
 *
 * To be able to update an image dynamically when the `sha256` sum changes,
 * you need to use it in combination with `docker.RegistryImage` as follows:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const ubuntuRegistryImage = docker.getRegistryImage({
 *     name: "ubuntu:precise",
 * });
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntuRemoteImage", {
 *     name: ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.name),
 *     pullTriggers: [ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.sha256Digest)],
 * });
 * ```
 * ### Build
 *
 * You can also use the resource to build an image.
 * In this case the image "zoo" and "zoo:develop" are built.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const zoo = new docker.RemoteImage("zoo", {
 *     name: "zoo",
 *     build: {
 *         path: ".",
 *         tags: ["zoo:develop"],
 *         buildArg: {
 *             foo: "zoo",
 *         },
 *         label: {
 *             author: "zoo",
 *         },
 *     },
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **name** (String) The name of the Docker image, including any tags or SHA256 repo digests.
 *
 * ### Optional
 *
 * - **build** (Block Set, Max: 1) Configuration to build an image. Please see [docker build command reference](https://docs.docker.com/engine/reference/commandline/build/#options) too. (see below for nested schema)
 * - **force_remove** (Boolean) If true, then the image is removed forcibly when the resource is destroyed.
 * - **id** (String) The ID of this resource.
 * - **keep_locally** (Boolean) If true, then the Docker image won't be deleted on destroy operation. If this is false, it will delete the image from the docker local storage on destroy operation.
 * - **pull_trigger** (String, Deprecated) A value which cause an image pull when changed
 * - **pull_triggers** (Set of String) List of values which cause an image pull when changed. This is used to store the image digest from the registry when using the docker_registry_image.
 *
 * ### Read-Only
 *
 * - **latest** (String, Deprecated) The ID of the image in the form of `sha256:<hash>` image digest. Do not confuse it with the default `latest` tag.
 * - **output** (String, Deprecated)
 * - **repo_digest** (String) The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`.
 *
 * <a id="nestedblock--build"></a>
 * ### Nested Schema for `build`
 *
 * Required:
 *
 * - **path** (String) Context path
 *
 * Optional:
 *
 * - **build_arg** (Map of String) Set build-time variables
 * - **dockerfile** (String) Name of the Dockerfile. Defaults to `Dockerfile`.
 * - **force_remove** (Boolean) Always remove intermediate containers
 * - **label** (Map of String) Set metadata for an image
 * - **no_cache** (Boolean) Do not use cache when building the image
 * - **remove** (Boolean) Remove intermediate containers after a successful build. Defaults to  `true`.
 * - **tag** (List of String) Name and optionally a tag in the 'name:tag' format
 * - **target** (String) Set the target build stage to build
 */
class RemoteImage extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["build"] = state ? state.build : undefined;
            inputs["forceRemove"] = state ? state.forceRemove : undefined;
            inputs["keepLocally"] = state ? state.keepLocally : undefined;
            inputs["latest"] = state ? state.latest : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["output"] = state ? state.output : undefined;
            inputs["pullTrigger"] = state ? state.pullTrigger : undefined;
            inputs["pullTriggers"] = state ? state.pullTriggers : undefined;
            inputs["repoDigest"] = state ? state.repoDigest : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            inputs["build"] = args ? args.build : undefined;
            inputs["forceRemove"] = args ? args.forceRemove : undefined;
            inputs["keepLocally"] = args ? args.keepLocally : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["pullTrigger"] = args ? args.pullTrigger : undefined;
            inputs["pullTriggers"] = args ? args.pullTriggers : undefined;
            inputs["latest"] = undefined /*out*/;
            inputs["output"] = undefined /*out*/;
            inputs["repoDigest"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RemoteImage.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RemoteImage resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RemoteImage(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RemoteImage.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RemoteImage.__pulumiType;
    }
}
exports.RemoteImage = RemoteImage;
/** @internal */
RemoteImage.__pulumiType = 'docker:index/remoteImage:RemoteImage';
//# sourceMappingURL=remoteImage.js.map