import * as pulumi from "@pulumi/pulumi";
/**
 * Reads the image metadata from a Docker Registry. Used in conjunction with the docker.RemoteImage resource to keep an image up to date on the latest available version of the tag.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * const ubuntuRegistryImage = docker.getRegistryImage({
 *     name: "ubuntu:precise",
 * });
 * const ubuntuRemoteImage = new docker.RemoteImage("ubuntuRemoteImage", {
 *     name: ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.name),
 *     pullTriggers: [ubuntuRegistryImage.then(ubuntuRegistryImage => ubuntuRegistryImage.sha256Digest)],
 * });
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **name** (String) The name of the Docker image, including any tags. e.g. `alpine:latest`
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 * - **insecure_skip_verify** (Boolean) If `true`, the verification of TLS certificates of the server/registry is disabled. Defaults to `false`
 *
 * ### Read-Only
 *
 * - **sha256_digest** (String) The content digest of the image, as stored in the registry.
 */
export declare function getRegistryImage(args: GetRegistryImageArgs, opts?: pulumi.InvokeOptions): Promise<GetRegistryImageResult>;
/**
 * A collection of arguments for invoking getRegistryImage.
 */
export interface GetRegistryImageArgs {
    readonly insecureSkipVerify?: boolean;
    readonly name: string;
}
/**
 * A collection of values returned by getRegistryImage.
 */
export interface GetRegistryImageResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly insecureSkipVerify?: boolean;
    readonly name: string;
    readonly sha256Digest: string;
}
