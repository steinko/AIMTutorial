"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("./utilities");
/**
 * `docker.RemoteImage` provides details about a specific Docker Image which need to be presend on the Docker Host
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as docker from "@pulumi/docker";
 *
 * // uses the 'latest' tag
 * const latest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx",
 * }, { async: true }));
 * // uses a specific tag
 * const specific = pulumi.output(docker.getRemoteImage({
 *     name: "nginx:1.17.6",
 * }, { async: true }));
 * // use the image digest
 * const digest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
 * }, { async: true }));
 * // uses the tag and the image digest
 * const tagAndDigest = pulumi.output(docker.getRemoteImage({
 *     name: "nginx:1.19.1@sha256:36b74457bccb56fbf8b05f79c85569501b721d4db813b684391d63e02287c0b2",
 * }, { async: true }));
 * ```
 *
 * <!-- schema generated by tfplugindocs -->
 * ## Schema
 *
 * ### Required
 *
 * - **name** (String) The name of the Docker image, including any tags or SHA256 repo digests.
 *
 * ### Optional
 *
 * - **id** (String) The ID of this resource.
 *
 * ### Read-Only
 *
 * - **repo_digest** (String) The image sha256 digest in the form of `repo[:tag]@sha256:<hash>`. It may be empty in the edge case where the local image was pulled from a repo, tagged locally, and then referred to in the data source by that local name/tag.
 */
function getRemoteImage(args, opts) {
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("docker:index/getRemoteImage:getRemoteImage", {
        "name": args.name,
    }, opts);
}
exports.getRemoteImage = getRemoteImage;
//# sourceMappingURL=getRemoteImage.js.map