"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic File System (EFS) File System resource.
 *
 * ## Example Usage
 * ### EFS File System w/ tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.efs.FileSystem("foo", {
 *     tags: {
 *         Name: "MyProduct",
 *     },
 * });
 * ```
 * ### Using lifecycle policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const fooWithLifecylePolicy = new aws.efs.FileSystem("foo_with_lifecyle_policy", {
 *     lifecyclePolicies: {
 *         transitionToIa: "AFTER_30_DAYS",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * The EFS file systems can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:efs/fileSystem:FileSystem foo fs-6fa144c6
 * ```
 */
class FileSystem extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["availabilityZoneId"] = state ? state.availabilityZoneId : undefined;
            inputs["availabilityZoneName"] = state ? state.availabilityZoneName : undefined;
            inputs["creationToken"] = state ? state.creationToken : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["lifecyclePolicy"] = state ? state.lifecyclePolicy : undefined;
            inputs["numberOfMountTargets"] = state ? state.numberOfMountTargets : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["performanceMode"] = state ? state.performanceMode : undefined;
            inputs["provisionedThroughputInMibps"] = state ? state.provisionedThroughputInMibps : undefined;
            inputs["sizeInBytes"] = state ? state.sizeInBytes : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["throughputMode"] = state ? state.throughputMode : undefined;
        }
        else {
            const args = argsOrState;
            inputs["availabilityZoneName"] = args ? args.availabilityZoneName : undefined;
            inputs["creationToken"] = args ? args.creationToken : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["lifecyclePolicy"] = args ? args.lifecyclePolicy : undefined;
            inputs["performanceMode"] = args ? args.performanceMode : undefined;
            inputs["provisionedThroughputInMibps"] = args ? args.provisionedThroughputInMibps : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["throughputMode"] = args ? args.throughputMode : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["availabilityZoneId"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["numberOfMountTargets"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["sizeInBytes"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(FileSystem.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing FileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FileSystem(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FileSystem.__pulumiType;
    }
}
exports.FileSystem = FileSystem;
/** @internal */
FileSystem.__pulumiType = 'aws:efs/fileSystem:FileSystem';
//# sourceMappingURL=fileSystem.js.map