"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Stack = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AppStream stack.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.appstream.Stack("example", {
 *     applicationSettings: {
 *         enabled: true,
 *         settingsGroup: "SettingsGroup",
 *     },
 *     description: "stack description",
 *     displayName: "stack display name",
 *     feedbackUrl: "http://your-domain/feedback",
 *     redirectUrl: "http://your-domain/redirect",
 *     storageConnectors: [{
 *         connectorType: "HOMEFOLDERS",
 *     }],
 *     tags: {
 *         TagName: "TagValue",
 *     },
 *     userSettings: [
 *         {
 *             action: "CLIPBOARD_COPY_FROM_LOCAL_DEVICE",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "CLIPBOARD_COPY_TO_LOCAL_DEVICE",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "FILE_UPLOAD",
 *             permission: "ENABLED",
 *         },
 *         {
 *             action: "FILE_DOWNLOAD",
 *             permission: "ENABLED",
 *         },
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * `aws_appstream_stack` can be imported using the id, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:appstream/stack:Stack example stackID
 * ```
 */
class Stack extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessEndpoints"] = state ? state.accessEndpoints : undefined;
            inputs["applicationSettings"] = state ? state.applicationSettings : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["createdTime"] = state ? state.createdTime : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["displayName"] = state ? state.displayName : undefined;
            inputs["embedHostDomains"] = state ? state.embedHostDomains : undefined;
            inputs["feedbackUrl"] = state ? state.feedbackUrl : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redirectUrl"] = state ? state.redirectUrl : undefined;
            inputs["storageConnectors"] = state ? state.storageConnectors : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["userSettings"] = state ? state.userSettings : undefined;
        }
        else {
            const args = argsOrState;
            inputs["accessEndpoints"] = args ? args.accessEndpoints : undefined;
            inputs["applicationSettings"] = args ? args.applicationSettings : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["displayName"] = args ? args.displayName : undefined;
            inputs["embedHostDomains"] = args ? args.embedHostDomains : undefined;
            inputs["feedbackUrl"] = args ? args.feedbackUrl : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redirectUrl"] = args ? args.redirectUrl : undefined;
            inputs["storageConnectors"] = args ? args.storageConnectors : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["userSettings"] = args ? args.userSettings : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Stack.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Stack resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Stack(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Stack.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Stack.__pulumiType;
    }
}
exports.Stack = Stack;
/** @internal */
Stack.__pulumiType = 'aws:appstream/stack:Stack';
//# sourceMappingURL=stack.js.map