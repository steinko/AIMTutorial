"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeySigningKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages a Route 53 Key Signing Key. To manage Domain Name System Security Extensions (DNSSEC) for a Hosted Zone, see the `aws.route53.HostedZoneDnsSec` resource. For more information about managing DNSSEC in Route 53, see the [Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/dns-configuring-dnssec.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleKey = new aws.kms.Key("exampleKey", {
 *     customerMasterKeySpec: "ECC_NIST_P256",
 *     deletionWindowInDays: 7,
 *     keyUsage: "SIGN_VERIFY",
 *     policy: JSON.stringify({
 *         Statement: [
 *             {
 *                 Action: [
 *                     "kms:DescribeKey",
 *                     "kms:GetPublicKey",
 *                     "kms:Sign",
 *                 ],
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "dnssec-route53.amazonaws.com",
 *                 },
 *                 Sid: "Allow Route 53 DNSSEC Service",
 *                 Resource: "*",
 *             },
 *             {
 *                 Action: "kms:CreateGrant",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     Service: "dnssec-route53.amazonaws.com",
 *                 },
 *                 Sid: "Allow Route 53 DNSSEC Service to CreateGrant",
 *                 Resource: "*",
 *                 Condition: {
 *                     Bool: {
 *                         "kms:GrantIsForAWSResource": "true",
 *                     },
 *                 },
 *             },
 *             {
 *                 Action: "kms:*",
 *                 Effect: "Allow",
 *                 Principal: {
 *                     AWS: "*",
 *                 },
 *                 Resource: "*",
 *                 Sid: "IAM User Permissions",
 *             },
 *         ],
 *         Version: "2012-10-17",
 *     }),
 * });
 * const exampleZone = new aws.route53.Zone("exampleZone", {});
 * const exampleKeySigningKey = new aws.route53.KeySigningKey("exampleKeySigningKey", {
 *     hostedZoneId: aws_route53_zone.test.id,
 *     keyManagementServiceArn: aws_kms_key.test.arn,
 * });
 * const exampleHostedZoneDnsSec = new aws.route53.HostedZoneDnsSec("exampleHostedZoneDnsSec", {hostedZoneId: exampleKeySigningKey.hostedZoneId}, {
 *     dependsOn: [exampleKeySigningKey],
 * });
 * ```
 *
 * ## Import
 *
 * `aws_route53_key_signing_key` resources can be imported by using the Route 53 Hosted Zone identifier and KMS Key identifier, separated by a comma (`,`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:route53/keySigningKey:KeySigningKey example Z1D633PJN98FT9,example
 * ```
 */
class KeySigningKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["digestAlgorithmMnemonic"] = state ? state.digestAlgorithmMnemonic : undefined;
            inputs["digestAlgorithmType"] = state ? state.digestAlgorithmType : undefined;
            inputs["digestValue"] = state ? state.digestValue : undefined;
            inputs["dnskeyRecord"] = state ? state.dnskeyRecord : undefined;
            inputs["dsRecord"] = state ? state.dsRecord : undefined;
            inputs["flag"] = state ? state.flag : undefined;
            inputs["hostedZoneId"] = state ? state.hostedZoneId : undefined;
            inputs["keyManagementServiceArn"] = state ? state.keyManagementServiceArn : undefined;
            inputs["keyTag"] = state ? state.keyTag : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["publicKey"] = state ? state.publicKey : undefined;
            inputs["signingAlgorithmMnemonic"] = state ? state.signingAlgorithmMnemonic : undefined;
            inputs["signingAlgorithmType"] = state ? state.signingAlgorithmType : undefined;
            inputs["status"] = state ? state.status : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.hostedZoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostedZoneId'");
            }
            if ((!args || args.keyManagementServiceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyManagementServiceArn'");
            }
            inputs["hostedZoneId"] = args ? args.hostedZoneId : undefined;
            inputs["keyManagementServiceArn"] = args ? args.keyManagementServiceArn : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["digestAlgorithmMnemonic"] = undefined /*out*/;
            inputs["digestAlgorithmType"] = undefined /*out*/;
            inputs["digestValue"] = undefined /*out*/;
            inputs["dnskeyRecord"] = undefined /*out*/;
            inputs["dsRecord"] = undefined /*out*/;
            inputs["flag"] = undefined /*out*/;
            inputs["keyTag"] = undefined /*out*/;
            inputs["publicKey"] = undefined /*out*/;
            inputs["signingAlgorithmMnemonic"] = undefined /*out*/;
            inputs["signingAlgorithmType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(KeySigningKey.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing KeySigningKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new KeySigningKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of KeySigningKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KeySigningKey.__pulumiType;
    }
}
exports.KeySigningKey = KeySigningKey;
/** @internal */
KeySigningKey.__pulumiType = 'aws:route53/keySigningKey:KeySigningKey';
//# sourceMappingURL=keySigningKey.js.map