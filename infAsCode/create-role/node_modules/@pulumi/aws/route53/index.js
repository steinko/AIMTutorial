"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./delegationSet"), exports);
__exportStar(require("./getDelegationSet"), exports);
__exportStar(require("./getResolverEndpoint"), exports);
__exportStar(require("./getResolverRule"), exports);
__exportStar(require("./getResolverRules"), exports);
__exportStar(require("./getZone"), exports);
__exportStar(require("./healthCheck"), exports);
__exportStar(require("./hostedZoneDnsSec"), exports);
__exportStar(require("./keySigningKey"), exports);
__exportStar(require("./queryLog"), exports);
__exportStar(require("./record"), exports);
__exportStar(require("./recordType"), exports);
__exportStar(require("./resolverDnsSecConfig"), exports);
__exportStar(require("./resolverEndpoint"), exports);
__exportStar(require("./resolverFirewallConfig"), exports);
__exportStar(require("./resolverFirewallDomainList"), exports);
__exportStar(require("./resolverFirewallRule"), exports);
__exportStar(require("./resolverFirewallRuleGroup"), exports);
__exportStar(require("./resolverFirewallRuleGroupAssociation"), exports);
__exportStar(require("./resolverQueryLogConfig"), exports);
__exportStar(require("./resolverQueryLogConfigAssociation"), exports);
__exportStar(require("./resolverRule"), exports);
__exportStar(require("./resolverRuleAssociation"), exports);
__exportStar(require("./vpcAssociationAuthorization"), exports);
__exportStar(require("./zone"), exports);
__exportStar(require("./zoneAssociation"), exports);
// Export enums:
__exportStar(require("../types/enums/route53"), exports);
// Import resources to register:
const delegationSet_1 = require("./delegationSet");
const healthCheck_1 = require("./healthCheck");
const hostedZoneDnsSec_1 = require("./hostedZoneDnsSec");
const keySigningKey_1 = require("./keySigningKey");
const queryLog_1 = require("./queryLog");
const record_1 = require("./record");
const resolverDnsSecConfig_1 = require("./resolverDnsSecConfig");
const resolverEndpoint_1 = require("./resolverEndpoint");
const resolverFirewallConfig_1 = require("./resolverFirewallConfig");
const resolverFirewallDomainList_1 = require("./resolverFirewallDomainList");
const resolverFirewallRule_1 = require("./resolverFirewallRule");
const resolverFirewallRuleGroup_1 = require("./resolverFirewallRuleGroup");
const resolverFirewallRuleGroupAssociation_1 = require("./resolverFirewallRuleGroupAssociation");
const resolverQueryLogConfig_1 = require("./resolverQueryLogConfig");
const resolverQueryLogConfigAssociation_1 = require("./resolverQueryLogConfigAssociation");
const resolverRule_1 = require("./resolverRule");
const resolverRuleAssociation_1 = require("./resolverRuleAssociation");
const vpcAssociationAuthorization_1 = require("./vpcAssociationAuthorization");
const zone_1 = require("./zone");
const zoneAssociation_1 = require("./zoneAssociation");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:route53/delegationSet:DelegationSet":
                return new delegationSet_1.DelegationSet(name, undefined, { urn });
            case "aws:route53/healthCheck:HealthCheck":
                return new healthCheck_1.HealthCheck(name, undefined, { urn });
            case "aws:route53/hostedZoneDnsSec:HostedZoneDnsSec":
                return new hostedZoneDnsSec_1.HostedZoneDnsSec(name, undefined, { urn });
            case "aws:route53/keySigningKey:KeySigningKey":
                return new keySigningKey_1.KeySigningKey(name, undefined, { urn });
            case "aws:route53/queryLog:QueryLog":
                return new queryLog_1.QueryLog(name, undefined, { urn });
            case "aws:route53/record:Record":
                return new record_1.Record(name, undefined, { urn });
            case "aws:route53/resolverDnsSecConfig:ResolverDnsSecConfig":
                return new resolverDnsSecConfig_1.ResolverDnsSecConfig(name, undefined, { urn });
            case "aws:route53/resolverEndpoint:ResolverEndpoint":
                return new resolverEndpoint_1.ResolverEndpoint(name, undefined, { urn });
            case "aws:route53/resolverFirewallConfig:ResolverFirewallConfig":
                return new resolverFirewallConfig_1.ResolverFirewallConfig(name, undefined, { urn });
            case "aws:route53/resolverFirewallDomainList:ResolverFirewallDomainList":
                return new resolverFirewallDomainList_1.ResolverFirewallDomainList(name, undefined, { urn });
            case "aws:route53/resolverFirewallRule:ResolverFirewallRule":
                return new resolverFirewallRule_1.ResolverFirewallRule(name, undefined, { urn });
            case "aws:route53/resolverFirewallRuleGroup:ResolverFirewallRuleGroup":
                return new resolverFirewallRuleGroup_1.ResolverFirewallRuleGroup(name, undefined, { urn });
            case "aws:route53/resolverFirewallRuleGroupAssociation:ResolverFirewallRuleGroupAssociation":
                return new resolverFirewallRuleGroupAssociation_1.ResolverFirewallRuleGroupAssociation(name, undefined, { urn });
            case "aws:route53/resolverQueryLogConfig:ResolverQueryLogConfig":
                return new resolverQueryLogConfig_1.ResolverQueryLogConfig(name, undefined, { urn });
            case "aws:route53/resolverQueryLogConfigAssociation:ResolverQueryLogConfigAssociation":
                return new resolverQueryLogConfigAssociation_1.ResolverQueryLogConfigAssociation(name, undefined, { urn });
            case "aws:route53/resolverRule:ResolverRule":
                return new resolverRule_1.ResolverRule(name, undefined, { urn });
            case "aws:route53/resolverRuleAssociation:ResolverRuleAssociation":
                return new resolverRuleAssociation_1.ResolverRuleAssociation(name, undefined, { urn });
            case "aws:route53/vpcAssociationAuthorization:VpcAssociationAuthorization":
                return new vpcAssociationAuthorization_1.VpcAssociationAuthorization(name, undefined, { urn });
            case "aws:route53/zone:Zone":
                return new zone_1.Zone(name, undefined, { urn });
            case "aws:route53/zoneAssociation:ZoneAssociation":
                return new zoneAssociation_1.ZoneAssociation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "route53/delegationSet", _module);
pulumi.runtime.registerResourceModule("aws", "route53/healthCheck", _module);
pulumi.runtime.registerResourceModule("aws", "route53/hostedZoneDnsSec", _module);
pulumi.runtime.registerResourceModule("aws", "route53/keySigningKey", _module);
pulumi.runtime.registerResourceModule("aws", "route53/queryLog", _module);
pulumi.runtime.registerResourceModule("aws", "route53/record", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverDnsSecConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallDomainList", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRule", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRuleGroup", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverFirewallRuleGroupAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverQueryLogConfig", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverQueryLogConfigAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverRule", _module);
pulumi.runtime.registerResourceModule("aws", "route53/resolverRuleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "route53/vpcAssociationAuthorization", _module);
pulumi.runtime.registerResourceModule("aws", "route53/zone", _module);
pulumi.runtime.registerResourceModule("aws", "route53/zoneAssociation", _module);
//# sourceMappingURL=index.js.map