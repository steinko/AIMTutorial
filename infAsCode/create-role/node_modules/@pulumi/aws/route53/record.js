"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Record = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Route53 record resource.
 *
 * ## Example Usage
 * ### Simple routing policy
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const www = new aws.route53.Record("www", {
 *     zoneId: aws_route53_zone.primary.zone_id,
 *     name: "www.example.com",
 *     type: "A",
 *     ttl: "300",
 *     records: [aws_eip.lb.public_ip],
 * });
 * ```
 * ### Weighted routing policy
 * Other routing policies are configured similarly. See [Amazon Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-policy.html) for details.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const www_dev = new aws.route53.Record("www-dev", {
 *     zoneId: aws_route53_zone.primary.zone_id,
 *     name: "www",
 *     type: "CNAME",
 *     ttl: "5",
 *     weightedRoutingPolicies: [{
 *         weight: 10,
 *     }],
 *     setIdentifier: "dev",
 *     records: ["dev.example.com"],
 * });
 * const www_live = new aws.route53.Record("www-live", {
 *     zoneId: aws_route53_zone.primary.zone_id,
 *     name: "www",
 *     type: "CNAME",
 *     ttl: "5",
 *     weightedRoutingPolicies: [{
 *         weight: 90,
 *     }],
 *     setIdentifier: "live",
 *     records: ["live.example.com"],
 * });
 * ```
 * ### Alias record
 * See [related part of Amazon Route 53 Developer Guide](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/resource-record-sets-choosing-alias-non-alias.html)
 * to understand differences between alias and non-alias records.
 *
 * TTL for all alias records is [60 seconds](https://aws.amazon.com/route53/faqs/#dns_failover_do_i_need_to_adjust),
 * you cannot change this, therefore `ttl` has to be omitted in alias records.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = new aws.elb.LoadBalancer("main", {
 *     availabilityZones: ["us-east-1c"],
 *     listeners: [{
 *         instancePort: 80,
 *         instanceProtocol: "http",
 *         lbPort: 80,
 *         lbProtocol: "http",
 *     }],
 * });
 * const www = new aws.route53.Record("www", {
 *     zoneId: aws_route53_zone.primary.zone_id,
 *     name: "example.com",
 *     type: "A",
 *     aliases: [{
 *         name: main.dnsName,
 *         zoneId: main.zoneId,
 *         evaluateTargetHealth: true,
 *     }],
 * });
 * ```
 * ### NS and SOA Record Management
 *
 * When creating Route 53 zones, the `NS` and `SOA` records for the zone are automatically created. Enabling the `allowOverwrite` argument will allow managing these records in a single deployment without the requirement for `import`.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleZone = new aws.route53.Zone("exampleZone", {});
 * const exampleRecord = new aws.route53.Record("exampleRecord", {
 *     allowOverwrite: true,
 *     name: "test.example.com",
 *     ttl: 172800,
 *     type: "NS",
 *     zoneId: exampleZone.zoneId,
 *     records: [
 *         exampleZone.nameServers[0],
 *         exampleZone.nameServers[1],
 *         exampleZone.nameServers[2],
 *         exampleZone.nameServers[3],
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Route53 Records can be imported using ID of the record, which is the zone identifier, record name, and record type, separated by underscores (`_`)E.g.,
 *
 * ```sh
 *  $ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS
 * ```
 *
 *  If the record also contains a delegated set identifier, it can be appended
 *
 * ```sh
 *  $ pulumi import aws:route53/record:Record myrecord Z4KAPRWWNC7JR_dev.example.com_NS_dev
 * ```
 */
class Record extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["aliases"] = state ? state.aliases : undefined;
            inputs["allowOverwrite"] = state ? state.allowOverwrite : undefined;
            inputs["failoverRoutingPolicies"] = state ? state.failoverRoutingPolicies : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["geolocationRoutingPolicies"] = state ? state.geolocationRoutingPolicies : undefined;
            inputs["healthCheckId"] = state ? state.healthCheckId : undefined;
            inputs["latencyRoutingPolicies"] = state ? state.latencyRoutingPolicies : undefined;
            inputs["multivalueAnswerRoutingPolicy"] = state ? state.multivalueAnswerRoutingPolicy : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["records"] = state ? state.records : undefined;
            inputs["setIdentifier"] = state ? state.setIdentifier : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["weightedRoutingPolicies"] = state ? state.weightedRoutingPolicies : undefined;
            inputs["zoneId"] = state ? state.zoneId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.name === undefined) && !opts.urn) {
                throw new Error("Missing required property 'name'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            if ((!args || args.zoneId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'zoneId'");
            }
            inputs["aliases"] = args ? args.aliases : undefined;
            inputs["allowOverwrite"] = args ? args.allowOverwrite : undefined;
            inputs["failoverRoutingPolicies"] = args ? args.failoverRoutingPolicies : undefined;
            inputs["geolocationRoutingPolicies"] = args ? args.geolocationRoutingPolicies : undefined;
            inputs["healthCheckId"] = args ? args.healthCheckId : undefined;
            inputs["latencyRoutingPolicies"] = args ? args.latencyRoutingPolicies : undefined;
            inputs["multivalueAnswerRoutingPolicy"] = args ? args.multivalueAnswerRoutingPolicy : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["records"] = args ? args.records : undefined;
            inputs["setIdentifier"] = args ? args.setIdentifier : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["weightedRoutingPolicies"] = args ? args.weightedRoutingPolicies : undefined;
            inputs["zoneId"] = args ? args.zoneId : undefined;
            inputs["fqdn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Record.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Record resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Record(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Record.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Record.__pulumiType;
    }
}
exports.Record = Record;
/** @internal */
Record.__pulumiType = 'aws:route53/record:Record';
//# sourceMappingURL=record.js.map