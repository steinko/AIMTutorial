"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecretPolicy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to manage AWS Secrets Manager secret policy.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleSecret = new aws.secretsmanager.Secret("exampleSecret", {});
 * const exampleSecretPolicy = new aws.secretsmanager.SecretPolicy("exampleSecretPolicy", {
 *     secretArn: exampleSecret.arn,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 * 	{
 * 	  "Sid": "EnableAllPermissions",
 * 	  "Effect": "Allow",
 * 	  "Principal": {
 * 		"AWS": "*"
 * 	  },
 * 	  "Action": "secretsmanager:GetSecretValue",
 * 	  "Resource": "*"
 * 	}
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_secretsmanager_secret_policy` can be imported by using the secret Amazon Resource Name (ARN), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:secretsmanager/secretPolicy:SecretPolicy example arn:aws:secretsmanager:us-east-1:123456789012:secret:example-123456
 * ```
 */
class SecretPolicy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["blockPublicPolicy"] = state ? state.blockPublicPolicy : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["secretArn"] = state ? state.secretArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.policy === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policy'");
            }
            if ((!args || args.secretArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'secretArn'");
            }
            inputs["blockPublicPolicy"] = args ? args.blockPublicPolicy : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["secretArn"] = args ? args.secretArn : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SecretPolicy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SecretPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecretPolicy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecretPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecretPolicy.__pulumiType;
    }
}
exports.SecretPolicy = SecretPolicy;
/** @internal */
SecretPolicy.__pulumiType = 'aws:secretsmanager/secretPolicy:SecretPolicy';
//# sourceMappingURL=secretPolicy.js.map