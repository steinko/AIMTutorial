"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkInterface = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Elastic network interface (ENI) resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.ec2.NetworkInterface("test", {
 *     subnetId: aws_subnet.public_a.id,
 *     privateIps: ["10.0.0.50"],
 *     securityGroups: [aws_security_group.web.id],
 *     attachments: [{
 *         instance: aws_instance.test.id,
 *         deviceIndex: 1,
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Network Interfaces can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/networkInterface:NetworkInterface test eni-e5aa89a3
 * ```
 */
class NetworkInterface extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["attachments"] = state ? state.attachments : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["interfaceType"] = state ? state.interfaceType : undefined;
            inputs["ipv4PrefixCount"] = state ? state.ipv4PrefixCount : undefined;
            inputs["ipv4Prefixes"] = state ? state.ipv4Prefixes : undefined;
            inputs["ipv6AddressCount"] = state ? state.ipv6AddressCount : undefined;
            inputs["ipv6Addresses"] = state ? state.ipv6Addresses : undefined;
            inputs["ipv6PrefixCount"] = state ? state.ipv6PrefixCount : undefined;
            inputs["ipv6Prefixes"] = state ? state.ipv6Prefixes : undefined;
            inputs["macAddress"] = state ? state.macAddress : undefined;
            inputs["outpostArn"] = state ? state.outpostArn : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["privateDnsName"] = state ? state.privateDnsName : undefined;
            inputs["privateIp"] = state ? state.privateIp : undefined;
            inputs["privateIps"] = state ? state.privateIps : undefined;
            inputs["privateIpsCount"] = state ? state.privateIpsCount : undefined;
            inputs["securityGroups"] = state ? state.securityGroups : undefined;
            inputs["sourceDestCheck"] = state ? state.sourceDestCheck : undefined;
            inputs["subnetId"] = state ? state.subnetId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.subnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetId'");
            }
            inputs["attachments"] = args ? args.attachments : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["interfaceType"] = args ? args.interfaceType : undefined;
            inputs["ipv4PrefixCount"] = args ? args.ipv4PrefixCount : undefined;
            inputs["ipv4Prefixes"] = args ? args.ipv4Prefixes : undefined;
            inputs["ipv6AddressCount"] = args ? args.ipv6AddressCount : undefined;
            inputs["ipv6Addresses"] = args ? args.ipv6Addresses : undefined;
            inputs["ipv6PrefixCount"] = args ? args.ipv6PrefixCount : undefined;
            inputs["ipv6Prefixes"] = args ? args.ipv6Prefixes : undefined;
            inputs["privateIp"] = args ? args.privateIp : undefined;
            inputs["privateIps"] = args ? args.privateIps : undefined;
            inputs["privateIpsCount"] = args ? args.privateIpsCount : undefined;
            inputs["securityGroups"] = args ? args.securityGroups : undefined;
            inputs["sourceDestCheck"] = args ? args.sourceDestCheck : undefined;
            inputs["subnetId"] = args ? args.subnetId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["macAddress"] = undefined /*out*/;
            inputs["outpostArn"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["privateDnsName"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(NetworkInterface.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing NetworkInterface resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new NetworkInterface(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of NetworkInterface.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkInterface.__pulumiType;
    }
}
exports.NetworkInterface = NetworkInterface;
/** @internal */
NetworkInterface.__pulumiType = 'aws:ec2/networkInterface:NetworkInterface';
//# sourceMappingURL=networkInterface.js.map