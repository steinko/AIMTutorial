import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * `aws.ec2.getSubnetIds` provides a set of ids for a vpcId
 *
 * This resource can be useful for getting back a set of subnet ids for a vpc.
 */
export declare function getSubnetIds(args: GetSubnetIdsArgs, opts?: pulumi.InvokeOptions): Promise<GetSubnetIdsResult>;
/**
 * A collection of arguments for invoking getSubnetIds.
 */
export interface GetSubnetIdsArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: inputs.ec2.GetSubnetIdsFilter[];
    /**
     * A map of tags, each pair of which must exactly match
     * a pair on the desired subnets.
     */
    tags?: {
        [key: string]: string;
    };
    /**
     * The VPC ID that you want to filter from.
     */
    vpcId: string;
}
/**
 * A collection of values returned by getSubnetIds.
 */
export interface GetSubnetIdsResult {
    readonly filters?: outputs.ec2.GetSubnetIdsFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of all the subnet ids found. This data source will fail if none are found.
     */
    readonly ids: string[];
    readonly tags: {
        [key: string]: string;
    };
    readonly vpcId: string;
}
export declare function getSubnetIdsOutput(args: GetSubnetIdsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSubnetIdsResult>;
/**
 * A collection of arguments for invoking getSubnetIds.
 */
export interface GetSubnetIdsOutputArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.ec2.GetSubnetIdsFilterArgs>[]>;
    /**
     * A map of tags, each pair of which must exactly match
     * a pair on the desired subnets.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The VPC ID that you want to filter from.
     */
    vpcId: pulumi.Input<string>;
}
