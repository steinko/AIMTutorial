"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrafficMirrorSession = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an Traffic mirror session.\
 * Read [limits and considerations](https://docs.aws.amazon.com/vpc/latest/mirroring/traffic-mirroring-considerations.html) for traffic mirroring
 *
 * ## Example Usage
 *
 * To create a basic traffic mirror session
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const filter = new aws.ec2.TrafficMirrorFilter("filter", {
 *     description: "traffic mirror filter - example",
 *     networkServices: ["amazon-dns"],
 * });
 * const target = new aws.ec2.TrafficMirrorTarget("target", {networkLoadBalancerArn: aws_lb.lb.arn});
 * const session = new aws.ec2.TrafficMirrorSession("session", {
 *     description: "traffic mirror session - example",
 *     networkInterfaceId: aws_instance.test.primary_network_interface_id,
 *     sessionNumber: 1,
 *     trafficMirrorFilterId: filter.id,
 *     trafficMirrorTargetId: target.id,
 * });
 * ```
 *
 * ## Import
 *
 * Traffic mirror sessions can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/trafficMirrorSession:TrafficMirrorSession session tms-0d8aa3ca35897b82e
 * ```
 */
class TrafficMirrorSession extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["networkInterfaceId"] = state ? state.networkInterfaceId : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["packetLength"] = state ? state.packetLength : undefined;
            inputs["sessionNumber"] = state ? state.sessionNumber : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["trafficMirrorFilterId"] = state ? state.trafficMirrorFilterId : undefined;
            inputs["trafficMirrorTargetId"] = state ? state.trafficMirrorTargetId : undefined;
            inputs["virtualNetworkId"] = state ? state.virtualNetworkId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.networkInterfaceId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkInterfaceId'");
            }
            if ((!args || args.sessionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sessionNumber'");
            }
            if ((!args || args.trafficMirrorFilterId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorFilterId'");
            }
            if ((!args || args.trafficMirrorTargetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'trafficMirrorTargetId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["networkInterfaceId"] = args ? args.networkInterfaceId : undefined;
            inputs["packetLength"] = args ? args.packetLength : undefined;
            inputs["sessionNumber"] = args ? args.sessionNumber : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["trafficMirrorFilterId"] = args ? args.trafficMirrorFilterId : undefined;
            inputs["trafficMirrorTargetId"] = args ? args.trafficMirrorTargetId : undefined;
            inputs["virtualNetworkId"] = args ? args.virtualNetworkId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TrafficMirrorSession.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TrafficMirrorSession resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TrafficMirrorSession(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TrafficMirrorSession.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TrafficMirrorSession.__pulumiType;
    }
}
exports.TrafficMirrorSession = TrafficMirrorSession;
/** @internal */
TrafficMirrorSession.__pulumiType = 'aws:ec2/trafficMirrorSession:TrafficMirrorSession';
//# sourceMappingURL=trafficMirrorSession.js.map