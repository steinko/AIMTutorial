"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AmiCopy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * The "AMI copy" resource allows duplication of an Amazon Machine Image (AMI),
 * including cross-region copies.
 *
 * If the source AMI has associated EBS snapshots, those will also be duplicated
 * along with the AMI.
 *
 * This is useful for taking a single AMI provisioned in one region and making
 * it available in another for a multi-region deployment.
 *
 * Copying an AMI can take several minutes. The creation of this resource will
 * block until the new AMI is available for use on new instances.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2.AmiCopy("example", {
 *     description: "A copy of ami-xxxxxxxx",
 *     sourceAmiId: "ami-xxxxxxxx",
 *     sourceAmiRegion: "us-west-1",
 *     tags: {
 *         Name: "HelloWorld",
 *     },
 * });
 * ```
 */
class AmiCopy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["architecture"] = state ? state.architecture : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["destinationOutpostArn"] = state ? state.destinationOutpostArn : undefined;
            inputs["ebsBlockDevices"] = state ? state.ebsBlockDevices : undefined;
            inputs["enaSupport"] = state ? state.enaSupport : undefined;
            inputs["encrypted"] = state ? state.encrypted : undefined;
            inputs["ephemeralBlockDevices"] = state ? state.ephemeralBlockDevices : undefined;
            inputs["hypervisor"] = state ? state.hypervisor : undefined;
            inputs["imageLocation"] = state ? state.imageLocation : undefined;
            inputs["imageOwnerAlias"] = state ? state.imageOwnerAlias : undefined;
            inputs["imageType"] = state ? state.imageType : undefined;
            inputs["kernelId"] = state ? state.kernelId : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["manageEbsSnapshots"] = state ? state.manageEbsSnapshots : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["platform"] = state ? state.platform : undefined;
            inputs["platformDetails"] = state ? state.platformDetails : undefined;
            inputs["public"] = state ? state.public : undefined;
            inputs["ramdiskId"] = state ? state.ramdiskId : undefined;
            inputs["rootDeviceName"] = state ? state.rootDeviceName : undefined;
            inputs["rootSnapshotId"] = state ? state.rootSnapshotId : undefined;
            inputs["sourceAmiId"] = state ? state.sourceAmiId : undefined;
            inputs["sourceAmiRegion"] = state ? state.sourceAmiRegion : undefined;
            inputs["sriovNetSupport"] = state ? state.sriovNetSupport : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["usageOperation"] = state ? state.usageOperation : undefined;
            inputs["virtualizationType"] = state ? state.virtualizationType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.sourceAmiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceAmiId'");
            }
            if ((!args || args.sourceAmiRegion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceAmiRegion'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["destinationOutpostArn"] = args ? args.destinationOutpostArn : undefined;
            inputs["ebsBlockDevices"] = args ? args.ebsBlockDevices : undefined;
            inputs["encrypted"] = args ? args.encrypted : undefined;
            inputs["ephemeralBlockDevices"] = args ? args.ephemeralBlockDevices : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["sourceAmiId"] = args ? args.sourceAmiId : undefined;
            inputs["sourceAmiRegion"] = args ? args.sourceAmiRegion : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["architecture"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["enaSupport"] = undefined /*out*/;
            inputs["hypervisor"] = undefined /*out*/;
            inputs["imageLocation"] = undefined /*out*/;
            inputs["imageOwnerAlias"] = undefined /*out*/;
            inputs["imageType"] = undefined /*out*/;
            inputs["kernelId"] = undefined /*out*/;
            inputs["manageEbsSnapshots"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["platform"] = undefined /*out*/;
            inputs["platformDetails"] = undefined /*out*/;
            inputs["public"] = undefined /*out*/;
            inputs["ramdiskId"] = undefined /*out*/;
            inputs["rootDeviceName"] = undefined /*out*/;
            inputs["rootSnapshotId"] = undefined /*out*/;
            inputs["sriovNetSupport"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["usageOperation"] = undefined /*out*/;
            inputs["virtualizationType"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AmiCopy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AmiCopy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AmiCopy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AmiCopy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AmiCopy.__pulumiType;
    }
}
exports.AmiCopy = AmiCopy;
/** @internal */
AmiCopy.__pulumiType = 'aws:ec2/amiCopy:AmiCopy';
//# sourceMappingURL=amiCopy.js.map