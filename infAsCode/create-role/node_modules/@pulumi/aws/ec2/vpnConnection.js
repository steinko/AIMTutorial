"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VpnConnection = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EC2 VPN connection. These objects can be connected to customer gateways, and allow you to establish tunnels between your network and Amazon.
 *
 * > **Note:** The CIDR blocks in the arguments `tunnel1InsideCidr` and `tunnel2InsideCidr` must have a prefix of /30 and be a part of a specific range.
 * [Read more about this in the AWS documentation](https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_VpnTunnelOptionsSpecification.html).
 *
 * ## Example Usage
 * ### EC2 Transit Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleTransitGateway = new aws.ec2transitgateway.TransitGateway("exampleTransitGateway", {});
 * const exampleCustomerGateway = new aws.ec2.CustomerGateway("exampleCustomerGateway", {
 *     bgpAsn: 65000,
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const exampleVpnConnection = new aws.ec2.VpnConnection("exampleVpnConnection", {
 *     customerGatewayId: exampleCustomerGateway.id,
 *     transitGatewayId: exampleTransitGateway.id,
 *     type: exampleCustomerGateway.type,
 * });
 * ```
 * ### Virtual Private Gateway
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpc = new aws.ec2.Vpc("vpc", {cidrBlock: "10.0.0.0/16"});
 * const vpnGateway = new aws.ec2.VpnGateway("vpnGateway", {vpcId: vpc.id});
 * const customerGateway = new aws.ec2.CustomerGateway("customerGateway", {
 *     bgpAsn: 65000,
 *     ipAddress: "172.0.0.1",
 *     type: "ipsec.1",
 * });
 * const main = new aws.ec2.VpnConnection("main", {
 *     vpnGatewayId: vpnGateway.id,
 *     customerGatewayId: customerGateway.id,
 *     type: "ipsec.1",
 *     staticRoutesOnly: true,
 * });
 * ```
 *
 * ## Import
 *
 * VPN Connections can be imported using the `vpn connection id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2/vpnConnection:VpnConnection testvpnconnection vpn-40f41529
 * ```
 */
class VpnConnection extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["customerGatewayConfiguration"] = state ? state.customerGatewayConfiguration : undefined;
            inputs["customerGatewayId"] = state ? state.customerGatewayId : undefined;
            inputs["enableAcceleration"] = state ? state.enableAcceleration : undefined;
            inputs["localIpv4NetworkCidr"] = state ? state.localIpv4NetworkCidr : undefined;
            inputs["localIpv6NetworkCidr"] = state ? state.localIpv6NetworkCidr : undefined;
            inputs["remoteIpv4NetworkCidr"] = state ? state.remoteIpv4NetworkCidr : undefined;
            inputs["remoteIpv6NetworkCidr"] = state ? state.remoteIpv6NetworkCidr : undefined;
            inputs["routes"] = state ? state.routes : undefined;
            inputs["staticRoutesOnly"] = state ? state.staticRoutesOnly : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["transitGatewayAttachmentId"] = state ? state.transitGatewayAttachmentId : undefined;
            inputs["transitGatewayId"] = state ? state.transitGatewayId : undefined;
            inputs["tunnel1Address"] = state ? state.tunnel1Address : undefined;
            inputs["tunnel1BgpAsn"] = state ? state.tunnel1BgpAsn : undefined;
            inputs["tunnel1BgpHoldtime"] = state ? state.tunnel1BgpHoldtime : undefined;
            inputs["tunnel1CgwInsideAddress"] = state ? state.tunnel1CgwInsideAddress : undefined;
            inputs["tunnel1DpdTimeoutAction"] = state ? state.tunnel1DpdTimeoutAction : undefined;
            inputs["tunnel1DpdTimeoutSeconds"] = state ? state.tunnel1DpdTimeoutSeconds : undefined;
            inputs["tunnel1IkeVersions"] = state ? state.tunnel1IkeVersions : undefined;
            inputs["tunnel1InsideCidr"] = state ? state.tunnel1InsideCidr : undefined;
            inputs["tunnel1InsideIpv6Cidr"] = state ? state.tunnel1InsideIpv6Cidr : undefined;
            inputs["tunnel1Phase1DhGroupNumbers"] = state ? state.tunnel1Phase1DhGroupNumbers : undefined;
            inputs["tunnel1Phase1EncryptionAlgorithms"] = state ? state.tunnel1Phase1EncryptionAlgorithms : undefined;
            inputs["tunnel1Phase1IntegrityAlgorithms"] = state ? state.tunnel1Phase1IntegrityAlgorithms : undefined;
            inputs["tunnel1Phase1LifetimeSeconds"] = state ? state.tunnel1Phase1LifetimeSeconds : undefined;
            inputs["tunnel1Phase2DhGroupNumbers"] = state ? state.tunnel1Phase2DhGroupNumbers : undefined;
            inputs["tunnel1Phase2EncryptionAlgorithms"] = state ? state.tunnel1Phase2EncryptionAlgorithms : undefined;
            inputs["tunnel1Phase2IntegrityAlgorithms"] = state ? state.tunnel1Phase2IntegrityAlgorithms : undefined;
            inputs["tunnel1Phase2LifetimeSeconds"] = state ? state.tunnel1Phase2LifetimeSeconds : undefined;
            inputs["tunnel1PresharedKey"] = state ? state.tunnel1PresharedKey : undefined;
            inputs["tunnel1RekeyFuzzPercentage"] = state ? state.tunnel1RekeyFuzzPercentage : undefined;
            inputs["tunnel1RekeyMarginTimeSeconds"] = state ? state.tunnel1RekeyMarginTimeSeconds : undefined;
            inputs["tunnel1ReplayWindowSize"] = state ? state.tunnel1ReplayWindowSize : undefined;
            inputs["tunnel1StartupAction"] = state ? state.tunnel1StartupAction : undefined;
            inputs["tunnel1VgwInsideAddress"] = state ? state.tunnel1VgwInsideAddress : undefined;
            inputs["tunnel2Address"] = state ? state.tunnel2Address : undefined;
            inputs["tunnel2BgpAsn"] = state ? state.tunnel2BgpAsn : undefined;
            inputs["tunnel2BgpHoldtime"] = state ? state.tunnel2BgpHoldtime : undefined;
            inputs["tunnel2CgwInsideAddress"] = state ? state.tunnel2CgwInsideAddress : undefined;
            inputs["tunnel2DpdTimeoutAction"] = state ? state.tunnel2DpdTimeoutAction : undefined;
            inputs["tunnel2DpdTimeoutSeconds"] = state ? state.tunnel2DpdTimeoutSeconds : undefined;
            inputs["tunnel2IkeVersions"] = state ? state.tunnel2IkeVersions : undefined;
            inputs["tunnel2InsideCidr"] = state ? state.tunnel2InsideCidr : undefined;
            inputs["tunnel2InsideIpv6Cidr"] = state ? state.tunnel2InsideIpv6Cidr : undefined;
            inputs["tunnel2Phase1DhGroupNumbers"] = state ? state.tunnel2Phase1DhGroupNumbers : undefined;
            inputs["tunnel2Phase1EncryptionAlgorithms"] = state ? state.tunnel2Phase1EncryptionAlgorithms : undefined;
            inputs["tunnel2Phase1IntegrityAlgorithms"] = state ? state.tunnel2Phase1IntegrityAlgorithms : undefined;
            inputs["tunnel2Phase1LifetimeSeconds"] = state ? state.tunnel2Phase1LifetimeSeconds : undefined;
            inputs["tunnel2Phase2DhGroupNumbers"] = state ? state.tunnel2Phase2DhGroupNumbers : undefined;
            inputs["tunnel2Phase2EncryptionAlgorithms"] = state ? state.tunnel2Phase2EncryptionAlgorithms : undefined;
            inputs["tunnel2Phase2IntegrityAlgorithms"] = state ? state.tunnel2Phase2IntegrityAlgorithms : undefined;
            inputs["tunnel2Phase2LifetimeSeconds"] = state ? state.tunnel2Phase2LifetimeSeconds : undefined;
            inputs["tunnel2PresharedKey"] = state ? state.tunnel2PresharedKey : undefined;
            inputs["tunnel2RekeyFuzzPercentage"] = state ? state.tunnel2RekeyFuzzPercentage : undefined;
            inputs["tunnel2RekeyMarginTimeSeconds"] = state ? state.tunnel2RekeyMarginTimeSeconds : undefined;
            inputs["tunnel2ReplayWindowSize"] = state ? state.tunnel2ReplayWindowSize : undefined;
            inputs["tunnel2StartupAction"] = state ? state.tunnel2StartupAction : undefined;
            inputs["tunnel2VgwInsideAddress"] = state ? state.tunnel2VgwInsideAddress : undefined;
            inputs["tunnelInsideIpVersion"] = state ? state.tunnelInsideIpVersion : undefined;
            inputs["type"] = state ? state.type : undefined;
            inputs["vgwTelemetries"] = state ? state.vgwTelemetries : undefined;
            inputs["vpnGatewayId"] = state ? state.vpnGatewayId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.customerGatewayId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'customerGatewayId'");
            }
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["customerGatewayId"] = args ? args.customerGatewayId : undefined;
            inputs["enableAcceleration"] = args ? args.enableAcceleration : undefined;
            inputs["localIpv4NetworkCidr"] = args ? args.localIpv4NetworkCidr : undefined;
            inputs["localIpv6NetworkCidr"] = args ? args.localIpv6NetworkCidr : undefined;
            inputs["remoteIpv4NetworkCidr"] = args ? args.remoteIpv4NetworkCidr : undefined;
            inputs["remoteIpv6NetworkCidr"] = args ? args.remoteIpv6NetworkCidr : undefined;
            inputs["staticRoutesOnly"] = args ? args.staticRoutesOnly : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["transitGatewayId"] = args ? args.transitGatewayId : undefined;
            inputs["tunnel1DpdTimeoutAction"] = args ? args.tunnel1DpdTimeoutAction : undefined;
            inputs["tunnel1DpdTimeoutSeconds"] = args ? args.tunnel1DpdTimeoutSeconds : undefined;
            inputs["tunnel1IkeVersions"] = args ? args.tunnel1IkeVersions : undefined;
            inputs["tunnel1InsideCidr"] = args ? args.tunnel1InsideCidr : undefined;
            inputs["tunnel1InsideIpv6Cidr"] = args ? args.tunnel1InsideIpv6Cidr : undefined;
            inputs["tunnel1Phase1DhGroupNumbers"] = args ? args.tunnel1Phase1DhGroupNumbers : undefined;
            inputs["tunnel1Phase1EncryptionAlgorithms"] = args ? args.tunnel1Phase1EncryptionAlgorithms : undefined;
            inputs["tunnel1Phase1IntegrityAlgorithms"] = args ? args.tunnel1Phase1IntegrityAlgorithms : undefined;
            inputs["tunnel1Phase1LifetimeSeconds"] = args ? args.tunnel1Phase1LifetimeSeconds : undefined;
            inputs["tunnel1Phase2DhGroupNumbers"] = args ? args.tunnel1Phase2DhGroupNumbers : undefined;
            inputs["tunnel1Phase2EncryptionAlgorithms"] = args ? args.tunnel1Phase2EncryptionAlgorithms : undefined;
            inputs["tunnel1Phase2IntegrityAlgorithms"] = args ? args.tunnel1Phase2IntegrityAlgorithms : undefined;
            inputs["tunnel1Phase2LifetimeSeconds"] = args ? args.tunnel1Phase2LifetimeSeconds : undefined;
            inputs["tunnel1PresharedKey"] = args ? args.tunnel1PresharedKey : undefined;
            inputs["tunnel1RekeyFuzzPercentage"] = args ? args.tunnel1RekeyFuzzPercentage : undefined;
            inputs["tunnel1RekeyMarginTimeSeconds"] = args ? args.tunnel1RekeyMarginTimeSeconds : undefined;
            inputs["tunnel1ReplayWindowSize"] = args ? args.tunnel1ReplayWindowSize : undefined;
            inputs["tunnel1StartupAction"] = args ? args.tunnel1StartupAction : undefined;
            inputs["tunnel2DpdTimeoutAction"] = args ? args.tunnel2DpdTimeoutAction : undefined;
            inputs["tunnel2DpdTimeoutSeconds"] = args ? args.tunnel2DpdTimeoutSeconds : undefined;
            inputs["tunnel2IkeVersions"] = args ? args.tunnel2IkeVersions : undefined;
            inputs["tunnel2InsideCidr"] = args ? args.tunnel2InsideCidr : undefined;
            inputs["tunnel2InsideIpv6Cidr"] = args ? args.tunnel2InsideIpv6Cidr : undefined;
            inputs["tunnel2Phase1DhGroupNumbers"] = args ? args.tunnel2Phase1DhGroupNumbers : undefined;
            inputs["tunnel2Phase1EncryptionAlgorithms"] = args ? args.tunnel2Phase1EncryptionAlgorithms : undefined;
            inputs["tunnel2Phase1IntegrityAlgorithms"] = args ? args.tunnel2Phase1IntegrityAlgorithms : undefined;
            inputs["tunnel2Phase1LifetimeSeconds"] = args ? args.tunnel2Phase1LifetimeSeconds : undefined;
            inputs["tunnel2Phase2DhGroupNumbers"] = args ? args.tunnel2Phase2DhGroupNumbers : undefined;
            inputs["tunnel2Phase2EncryptionAlgorithms"] = args ? args.tunnel2Phase2EncryptionAlgorithms : undefined;
            inputs["tunnel2Phase2IntegrityAlgorithms"] = args ? args.tunnel2Phase2IntegrityAlgorithms : undefined;
            inputs["tunnel2Phase2LifetimeSeconds"] = args ? args.tunnel2Phase2LifetimeSeconds : undefined;
            inputs["tunnel2PresharedKey"] = args ? args.tunnel2PresharedKey : undefined;
            inputs["tunnel2RekeyFuzzPercentage"] = args ? args.tunnel2RekeyFuzzPercentage : undefined;
            inputs["tunnel2RekeyMarginTimeSeconds"] = args ? args.tunnel2RekeyMarginTimeSeconds : undefined;
            inputs["tunnel2ReplayWindowSize"] = args ? args.tunnel2ReplayWindowSize : undefined;
            inputs["tunnel2StartupAction"] = args ? args.tunnel2StartupAction : undefined;
            inputs["tunnelInsideIpVersion"] = args ? args.tunnelInsideIpVersion : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["vpnGatewayId"] = args ? args.vpnGatewayId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["customerGatewayConfiguration"] = undefined /*out*/;
            inputs["routes"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["transitGatewayAttachmentId"] = undefined /*out*/;
            inputs["tunnel1Address"] = undefined /*out*/;
            inputs["tunnel1BgpAsn"] = undefined /*out*/;
            inputs["tunnel1BgpHoldtime"] = undefined /*out*/;
            inputs["tunnel1CgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel1VgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel2Address"] = undefined /*out*/;
            inputs["tunnel2BgpAsn"] = undefined /*out*/;
            inputs["tunnel2BgpHoldtime"] = undefined /*out*/;
            inputs["tunnel2CgwInsideAddress"] = undefined /*out*/;
            inputs["tunnel2VgwInsideAddress"] = undefined /*out*/;
            inputs["vgwTelemetries"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(VpnConnection.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VpnConnection resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VpnConnection(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VpnConnection.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VpnConnection.__pulumiType;
    }
}
exports.VpnConnection = VpnConnection;
/** @internal */
VpnConnection.__pulumiType = 'aws:ec2/vpnConnection:VpnConnection';
//# sourceMappingURL=vpnConnection.js.map