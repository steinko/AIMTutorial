"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./ami"), exports);
__exportStar(require("./amiCopy"), exports);
__exportStar(require("./amiFromInstance"), exports);
__exportStar(require("./amiLaunchPermission"), exports);
__exportStar(require("./availabilityZoneGroup"), exports);
__exportStar(require("./capacityReservation"), exports);
__exportStar(require("./carrierGateway"), exports);
__exportStar(require("./customerGateway"), exports);
__exportStar(require("./dedicatedHost"), exports);
__exportStar(require("./defaultNetworkAcl"), exports);
__exportStar(require("./defaultRouteTable"), exports);
__exportStar(require("./defaultSecurityGroup"), exports);
__exportStar(require("./defaultSubnet"), exports);
__exportStar(require("./defaultVpc"), exports);
__exportStar(require("./defaultVpcDhcpOptions"), exports);
__exportStar(require("./egressOnlyInternetGateway"), exports);
__exportStar(require("./eip"), exports);
__exportStar(require("./eipAssociation"), exports);
__exportStar(require("./fleet"), exports);
__exportStar(require("./flowLog"), exports);
__exportStar(require("./getAmi"), exports);
__exportStar(require("./getAmiIds"), exports);
__exportStar(require("./getCoipPool"), exports);
__exportStar(require("./getCoipPools"), exports);
__exportStar(require("./getCustomerGateway"), exports);
__exportStar(require("./getDedicatedHost"), exports);
__exportStar(require("./getElasticIp"), exports);
__exportStar(require("./getInstance"), exports);
__exportStar(require("./getInstanceType"), exports);
__exportStar(require("./getInstanceTypeOffering"), exports);
__exportStar(require("./getInstanceTypeOfferings"), exports);
__exportStar(require("./getInstances"), exports);
__exportStar(require("./getInternetGateway"), exports);
__exportStar(require("./getKeyPair"), exports);
__exportStar(require("./getLaunchConfiguration"), exports);
__exportStar(require("./getLaunchTemplate"), exports);
__exportStar(require("./getLocalGateway"), exports);
__exportStar(require("./getLocalGatewayRouteTable"), exports);
__exportStar(require("./getLocalGatewayRouteTables"), exports);
__exportStar(require("./getLocalGatewayVirtualInterface"), exports);
__exportStar(require("./getLocalGatewayVirtualInterfaceGroup"), exports);
__exportStar(require("./getLocalGatewayVirtualInterfaceGroups"), exports);
__exportStar(require("./getLocalGateways"), exports);
__exportStar(require("./getManagedPrefixList"), exports);
__exportStar(require("./getNatGateway"), exports);
__exportStar(require("./getNetworkAcls"), exports);
__exportStar(require("./getNetworkInterface"), exports);
__exportStar(require("./getNetworkInterfaces"), exports);
__exportStar(require("./getPrefixList"), exports);
__exportStar(require("./getRoute"), exports);
__exportStar(require("./getRouteTable"), exports);
__exportStar(require("./getRouteTables"), exports);
__exportStar(require("./getSecurityGroup"), exports);
__exportStar(require("./getSecurityGroups"), exports);
__exportStar(require("./getSpotPrice"), exports);
__exportStar(require("./getSubnet"), exports);
__exportStar(require("./getSubnetIds"), exports);
__exportStar(require("./getSubnets"), exports);
__exportStar(require("./getTransitGatewayRouteTables"), exports);
__exportStar(require("./getVpc"), exports);
__exportStar(require("./getVpcDhcpOptions"), exports);
__exportStar(require("./getVpcEndpoint"), exports);
__exportStar(require("./getVpcEndpointService"), exports);
__exportStar(require("./getVpcPeeringConnection"), exports);
__exportStar(require("./getVpcPeeringConnections"), exports);
__exportStar(require("./getVpcs"), exports);
__exportStar(require("./getVpnGateway"), exports);
__exportStar(require("./instance"), exports);
__exportStar(require("./instancePlatform"), exports);
__exportStar(require("./instanceType"), exports);
__exportStar(require("./internetGateway"), exports);
__exportStar(require("./keyPair"), exports);
__exportStar(require("./launchConfiguration"), exports);
__exportStar(require("./launchTemplate"), exports);
__exportStar(require("./localGatewayRoute"), exports);
__exportStar(require("./localGatewayRouteTableVpcAssociation"), exports);
__exportStar(require("./mainRouteTableAssociation"), exports);
__exportStar(require("./managedPrefixList"), exports);
__exportStar(require("./managedPrefixListEntry"), exports);
__exportStar(require("./natGateway"), exports);
__exportStar(require("./networkAcl"), exports);
__exportStar(require("./networkAclRule"), exports);
__exportStar(require("./networkInterface"), exports);
__exportStar(require("./networkInterfaceAttachment"), exports);
__exportStar(require("./networkInterfaceSecurityGroupAttachment"), exports);
__exportStar(require("./peeringConnectionOptions"), exports);
__exportStar(require("./placementGroup"), exports);
__exportStar(require("./placementStrategy"), exports);
__exportStar(require("./protocolType"), exports);
__exportStar(require("./proxyProtocolPolicy"), exports);
__exportStar(require("./route"), exports);
__exportStar(require("./routeTable"), exports);
__exportStar(require("./routeTableAssociation"), exports);
__exportStar(require("./securityGroup"), exports);
__exportStar(require("./securityGroupRule"), exports);
__exportStar(require("./snapshotCreateVolumePermission"), exports);
__exportStar(require("./spotDatafeedSubscription"), exports);
__exportStar(require("./spotFleetRequest"), exports);
__exportStar(require("./spotInstanceRequest"), exports);
__exportStar(require("./subnet"), exports);
__exportStar(require("./tag"), exports);
__exportStar(require("./tenancy"), exports);
__exportStar(require("./trafficMirrorFilter"), exports);
__exportStar(require("./trafficMirrorFilterRule"), exports);
__exportStar(require("./trafficMirrorSession"), exports);
__exportStar(require("./trafficMirrorTarget"), exports);
__exportStar(require("./transitGatewayPeeringAttachmentAccepter"), exports);
__exportStar(require("./volumeAttachment"), exports);
__exportStar(require("./vpc"), exports);
__exportStar(require("./vpcDhcpOptions"), exports);
__exportStar(require("./vpcDhcpOptionsAssociation"), exports);
__exportStar(require("./vpcEndpoint"), exports);
__exportStar(require("./vpcEndpointConnectionNotification"), exports);
__exportStar(require("./vpcEndpointRouteTableAssociation"), exports);
__exportStar(require("./vpcEndpointService"), exports);
__exportStar(require("./vpcEndpointServiceAllowedPrinciple"), exports);
__exportStar(require("./vpcEndpointSubnetAssociation"), exports);
__exportStar(require("./vpcIpv4CidrBlockAssociation"), exports);
__exportStar(require("./vpcPeeringConnection"), exports);
__exportStar(require("./vpcPeeringConnectionAccepter"), exports);
__exportStar(require("./vpnConnection"), exports);
__exportStar(require("./vpnConnectionRoute"), exports);
__exportStar(require("./vpnGateway"), exports);
__exportStar(require("./vpnGatewayAttachment"), exports);
__exportStar(require("./vpnGatewayRoutePropagation"), exports);
// Export enums:
__exportStar(require("../types/enums/ec2"), exports);
// Import resources to register:
const ami_1 = require("./ami");
const amiCopy_1 = require("./amiCopy");
const amiFromInstance_1 = require("./amiFromInstance");
const amiLaunchPermission_1 = require("./amiLaunchPermission");
const availabilityZoneGroup_1 = require("./availabilityZoneGroup");
const capacityReservation_1 = require("./capacityReservation");
const carrierGateway_1 = require("./carrierGateway");
const customerGateway_1 = require("./customerGateway");
const dedicatedHost_1 = require("./dedicatedHost");
const defaultNetworkAcl_1 = require("./defaultNetworkAcl");
const defaultRouteTable_1 = require("./defaultRouteTable");
const defaultSecurityGroup_1 = require("./defaultSecurityGroup");
const defaultSubnet_1 = require("./defaultSubnet");
const defaultVpc_1 = require("./defaultVpc");
const defaultVpcDhcpOptions_1 = require("./defaultVpcDhcpOptions");
const egressOnlyInternetGateway_1 = require("./egressOnlyInternetGateway");
const eip_1 = require("./eip");
const eipAssociation_1 = require("./eipAssociation");
const fleet_1 = require("./fleet");
const flowLog_1 = require("./flowLog");
const instance_1 = require("./instance");
const internetGateway_1 = require("./internetGateway");
const keyPair_1 = require("./keyPair");
const launchConfiguration_1 = require("./launchConfiguration");
const launchTemplate_1 = require("./launchTemplate");
const localGatewayRoute_1 = require("./localGatewayRoute");
const localGatewayRouteTableVpcAssociation_1 = require("./localGatewayRouteTableVpcAssociation");
const mainRouteTableAssociation_1 = require("./mainRouteTableAssociation");
const managedPrefixList_1 = require("./managedPrefixList");
const managedPrefixListEntry_1 = require("./managedPrefixListEntry");
const natGateway_1 = require("./natGateway");
const networkAcl_1 = require("./networkAcl");
const networkAclRule_1 = require("./networkAclRule");
const networkInterface_1 = require("./networkInterface");
const networkInterfaceAttachment_1 = require("./networkInterfaceAttachment");
const networkInterfaceSecurityGroupAttachment_1 = require("./networkInterfaceSecurityGroupAttachment");
const peeringConnectionOptions_1 = require("./peeringConnectionOptions");
const placementGroup_1 = require("./placementGroup");
const proxyProtocolPolicy_1 = require("./proxyProtocolPolicy");
const route_1 = require("./route");
const routeTable_1 = require("./routeTable");
const routeTableAssociation_1 = require("./routeTableAssociation");
const securityGroup_1 = require("./securityGroup");
const securityGroupRule_1 = require("./securityGroupRule");
const snapshotCreateVolumePermission_1 = require("./snapshotCreateVolumePermission");
const spotDatafeedSubscription_1 = require("./spotDatafeedSubscription");
const spotFleetRequest_1 = require("./spotFleetRequest");
const spotInstanceRequest_1 = require("./spotInstanceRequest");
const subnet_1 = require("./subnet");
const tag_1 = require("./tag");
const trafficMirrorFilter_1 = require("./trafficMirrorFilter");
const trafficMirrorFilterRule_1 = require("./trafficMirrorFilterRule");
const trafficMirrorSession_1 = require("./trafficMirrorSession");
const trafficMirrorTarget_1 = require("./trafficMirrorTarget");
const transitGatewayPeeringAttachmentAccepter_1 = require("./transitGatewayPeeringAttachmentAccepter");
const volumeAttachment_1 = require("./volumeAttachment");
const vpc_1 = require("./vpc");
const vpcDhcpOptions_1 = require("./vpcDhcpOptions");
const vpcDhcpOptionsAssociation_1 = require("./vpcDhcpOptionsAssociation");
const vpcEndpoint_1 = require("./vpcEndpoint");
const vpcEndpointConnectionNotification_1 = require("./vpcEndpointConnectionNotification");
const vpcEndpointRouteTableAssociation_1 = require("./vpcEndpointRouteTableAssociation");
const vpcEndpointService_1 = require("./vpcEndpointService");
const vpcEndpointServiceAllowedPrinciple_1 = require("./vpcEndpointServiceAllowedPrinciple");
const vpcEndpointSubnetAssociation_1 = require("./vpcEndpointSubnetAssociation");
const vpcIpv4CidrBlockAssociation_1 = require("./vpcIpv4CidrBlockAssociation");
const vpcPeeringConnection_1 = require("./vpcPeeringConnection");
const vpcPeeringConnectionAccepter_1 = require("./vpcPeeringConnectionAccepter");
const vpnConnection_1 = require("./vpnConnection");
const vpnConnectionRoute_1 = require("./vpnConnectionRoute");
const vpnGateway_1 = require("./vpnGateway");
const vpnGatewayAttachment_1 = require("./vpnGatewayAttachment");
const vpnGatewayRoutePropagation_1 = require("./vpnGatewayRoutePropagation");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ec2/ami:Ami":
                return new ami_1.Ami(name, undefined, { urn });
            case "aws:ec2/amiCopy:AmiCopy":
                return new amiCopy_1.AmiCopy(name, undefined, { urn });
            case "aws:ec2/amiFromInstance:AmiFromInstance":
                return new amiFromInstance_1.AmiFromInstance(name, undefined, { urn });
            case "aws:ec2/amiLaunchPermission:AmiLaunchPermission":
                return new amiLaunchPermission_1.AmiLaunchPermission(name, undefined, { urn });
            case "aws:ec2/availabilityZoneGroup:AvailabilityZoneGroup":
                return new availabilityZoneGroup_1.AvailabilityZoneGroup(name, undefined, { urn });
            case "aws:ec2/capacityReservation:CapacityReservation":
                return new capacityReservation_1.CapacityReservation(name, undefined, { urn });
            case "aws:ec2/carrierGateway:CarrierGateway":
                return new carrierGateway_1.CarrierGateway(name, undefined, { urn });
            case "aws:ec2/customerGateway:CustomerGateway":
                return new customerGateway_1.CustomerGateway(name, undefined, { urn });
            case "aws:ec2/dedicatedHost:DedicatedHost":
                return new dedicatedHost_1.DedicatedHost(name, undefined, { urn });
            case "aws:ec2/defaultNetworkAcl:DefaultNetworkAcl":
                return new defaultNetworkAcl_1.DefaultNetworkAcl(name, undefined, { urn });
            case "aws:ec2/defaultRouteTable:DefaultRouteTable":
                return new defaultRouteTable_1.DefaultRouteTable(name, undefined, { urn });
            case "aws:ec2/defaultSecurityGroup:DefaultSecurityGroup":
                return new defaultSecurityGroup_1.DefaultSecurityGroup(name, undefined, { urn });
            case "aws:ec2/defaultSubnet:DefaultSubnet":
                return new defaultSubnet_1.DefaultSubnet(name, undefined, { urn });
            case "aws:ec2/defaultVpc:DefaultVpc":
                return new defaultVpc_1.DefaultVpc(name, undefined, { urn });
            case "aws:ec2/defaultVpcDhcpOptions:DefaultVpcDhcpOptions":
                return new defaultVpcDhcpOptions_1.DefaultVpcDhcpOptions(name, undefined, { urn });
            case "aws:ec2/egressOnlyInternetGateway:EgressOnlyInternetGateway":
                return new egressOnlyInternetGateway_1.EgressOnlyInternetGateway(name, undefined, { urn });
            case "aws:ec2/eip:Eip":
                return new eip_1.Eip(name, undefined, { urn });
            case "aws:ec2/eipAssociation:EipAssociation":
                return new eipAssociation_1.EipAssociation(name, undefined, { urn });
            case "aws:ec2/fleet:Fleet":
                return new fleet_1.Fleet(name, undefined, { urn });
            case "aws:ec2/flowLog:FlowLog":
                return new flowLog_1.FlowLog(name, undefined, { urn });
            case "aws:ec2/instance:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "aws:ec2/internetGateway:InternetGateway":
                return new internetGateway_1.InternetGateway(name, undefined, { urn });
            case "aws:ec2/keyPair:KeyPair":
                return new keyPair_1.KeyPair(name, undefined, { urn });
            case "aws:ec2/launchConfiguration:LaunchConfiguration":
                return new launchConfiguration_1.LaunchConfiguration(name, undefined, { urn });
            case "aws:ec2/launchTemplate:LaunchTemplate":
                return new launchTemplate_1.LaunchTemplate(name, undefined, { urn });
            case "aws:ec2/localGatewayRoute:LocalGatewayRoute":
                return new localGatewayRoute_1.LocalGatewayRoute(name, undefined, { urn });
            case "aws:ec2/localGatewayRouteTableVpcAssociation:LocalGatewayRouteTableVpcAssociation":
                return new localGatewayRouteTableVpcAssociation_1.LocalGatewayRouteTableVpcAssociation(name, undefined, { urn });
            case "aws:ec2/mainRouteTableAssociation:MainRouteTableAssociation":
                return new mainRouteTableAssociation_1.MainRouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/managedPrefixList:ManagedPrefixList":
                return new managedPrefixList_1.ManagedPrefixList(name, undefined, { urn });
            case "aws:ec2/managedPrefixListEntry:ManagedPrefixListEntry":
                return new managedPrefixListEntry_1.ManagedPrefixListEntry(name, undefined, { urn });
            case "aws:ec2/natGateway:NatGateway":
                return new natGateway_1.NatGateway(name, undefined, { urn });
            case "aws:ec2/networkAcl:NetworkAcl":
                return new networkAcl_1.NetworkAcl(name, undefined, { urn });
            case "aws:ec2/networkAclRule:NetworkAclRule":
                return new networkAclRule_1.NetworkAclRule(name, undefined, { urn });
            case "aws:ec2/networkInterface:NetworkInterface":
                return new networkInterface_1.NetworkInterface(name, undefined, { urn });
            case "aws:ec2/networkInterfaceAttachment:NetworkInterfaceAttachment":
                return new networkInterfaceAttachment_1.NetworkInterfaceAttachment(name, undefined, { urn });
            case "aws:ec2/networkInterfaceSecurityGroupAttachment:NetworkInterfaceSecurityGroupAttachment":
                return new networkInterfaceSecurityGroupAttachment_1.NetworkInterfaceSecurityGroupAttachment(name, undefined, { urn });
            case "aws:ec2/peeringConnectionOptions:PeeringConnectionOptions":
                return new peeringConnectionOptions_1.PeeringConnectionOptions(name, undefined, { urn });
            case "aws:ec2/placementGroup:PlacementGroup":
                return new placementGroup_1.PlacementGroup(name, undefined, { urn });
            case "aws:ec2/proxyProtocolPolicy:ProxyProtocolPolicy":
                return new proxyProtocolPolicy_1.ProxyProtocolPolicy(name, undefined, { urn });
            case "aws:ec2/route:Route":
                return new route_1.Route(name, undefined, { urn });
            case "aws:ec2/routeTable:RouteTable":
                return new routeTable_1.RouteTable(name, undefined, { urn });
            case "aws:ec2/routeTableAssociation:RouteTableAssociation":
                return new routeTableAssociation_1.RouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/securityGroup:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws:ec2/securityGroupRule:SecurityGroupRule":
                return new securityGroupRule_1.SecurityGroupRule(name, undefined, { urn });
            case "aws:ec2/snapshotCreateVolumePermission:SnapshotCreateVolumePermission":
                return new snapshotCreateVolumePermission_1.SnapshotCreateVolumePermission(name, undefined, { urn });
            case "aws:ec2/spotDatafeedSubscription:SpotDatafeedSubscription":
                return new spotDatafeedSubscription_1.SpotDatafeedSubscription(name, undefined, { urn });
            case "aws:ec2/spotFleetRequest:SpotFleetRequest":
                return new spotFleetRequest_1.SpotFleetRequest(name, undefined, { urn });
            case "aws:ec2/spotInstanceRequest:SpotInstanceRequest":
                return new spotInstanceRequest_1.SpotInstanceRequest(name, undefined, { urn });
            case "aws:ec2/subnet:Subnet":
                return new subnet_1.Subnet(name, undefined, { urn });
            case "aws:ec2/tag:Tag":
                return new tag_1.Tag(name, undefined, { urn });
            case "aws:ec2/trafficMirrorFilter:TrafficMirrorFilter":
                return new trafficMirrorFilter_1.TrafficMirrorFilter(name, undefined, { urn });
            case "aws:ec2/trafficMirrorFilterRule:TrafficMirrorFilterRule":
                return new trafficMirrorFilterRule_1.TrafficMirrorFilterRule(name, undefined, { urn });
            case "aws:ec2/trafficMirrorSession:TrafficMirrorSession":
                return new trafficMirrorSession_1.TrafficMirrorSession(name, undefined, { urn });
            case "aws:ec2/trafficMirrorTarget:TrafficMirrorTarget":
                return new trafficMirrorTarget_1.TrafficMirrorTarget(name, undefined, { urn });
            case "aws:ec2/transitGatewayPeeringAttachmentAccepter:TransitGatewayPeeringAttachmentAccepter":
                return new transitGatewayPeeringAttachmentAccepter_1.TransitGatewayPeeringAttachmentAccepter(name, undefined, { urn });
            case "aws:ec2/volumeAttachment:VolumeAttachment":
                return new volumeAttachment_1.VolumeAttachment(name, undefined, { urn });
            case "aws:ec2/vpc:Vpc":
                return new vpc_1.Vpc(name, undefined, { urn });
            case "aws:ec2/vpcDhcpOptions:VpcDhcpOptions":
                return new vpcDhcpOptions_1.VpcDhcpOptions(name, undefined, { urn });
            case "aws:ec2/vpcDhcpOptionsAssociation:VpcDhcpOptionsAssociation":
                return new vpcDhcpOptionsAssociation_1.VpcDhcpOptionsAssociation(name, undefined, { urn });
            case "aws:ec2/vpcEndpoint:VpcEndpoint":
                return new vpcEndpoint_1.VpcEndpoint(name, undefined, { urn });
            case "aws:ec2/vpcEndpointConnectionNotification:VpcEndpointConnectionNotification":
                return new vpcEndpointConnectionNotification_1.VpcEndpointConnectionNotification(name, undefined, { urn });
            case "aws:ec2/vpcEndpointRouteTableAssociation:VpcEndpointRouteTableAssociation":
                return new vpcEndpointRouteTableAssociation_1.VpcEndpointRouteTableAssociation(name, undefined, { urn });
            case "aws:ec2/vpcEndpointService:VpcEndpointService":
                return new vpcEndpointService_1.VpcEndpointService(name, undefined, { urn });
            case "aws:ec2/vpcEndpointServiceAllowedPrinciple:VpcEndpointServiceAllowedPrinciple":
                return new vpcEndpointServiceAllowedPrinciple_1.VpcEndpointServiceAllowedPrinciple(name, undefined, { urn });
            case "aws:ec2/vpcEndpointSubnetAssociation:VpcEndpointSubnetAssociation":
                return new vpcEndpointSubnetAssociation_1.VpcEndpointSubnetAssociation(name, undefined, { urn });
            case "aws:ec2/vpcIpv4CidrBlockAssociation:VpcIpv4CidrBlockAssociation":
                return new vpcIpv4CidrBlockAssociation_1.VpcIpv4CidrBlockAssociation(name, undefined, { urn });
            case "aws:ec2/vpcPeeringConnection:VpcPeeringConnection":
                return new vpcPeeringConnection_1.VpcPeeringConnection(name, undefined, { urn });
            case "aws:ec2/vpcPeeringConnectionAccepter:VpcPeeringConnectionAccepter":
                return new vpcPeeringConnectionAccepter_1.VpcPeeringConnectionAccepter(name, undefined, { urn });
            case "aws:ec2/vpnConnection:VpnConnection":
                return new vpnConnection_1.VpnConnection(name, undefined, { urn });
            case "aws:ec2/vpnConnectionRoute:VpnConnectionRoute":
                return new vpnConnectionRoute_1.VpnConnectionRoute(name, undefined, { urn });
            case "aws:ec2/vpnGateway:VpnGateway":
                return new vpnGateway_1.VpnGateway(name, undefined, { urn });
            case "aws:ec2/vpnGatewayAttachment:VpnGatewayAttachment":
                return new vpnGatewayAttachment_1.VpnGatewayAttachment(name, undefined, { urn });
            case "aws:ec2/vpnGatewayRoutePropagation:VpnGatewayRoutePropagation":
                return new vpnGatewayRoutePropagation_1.VpnGatewayRoutePropagation(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ec2/ami", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiCopy", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiFromInstance", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/amiLaunchPermission", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/availabilityZoneGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/capacityReservation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/carrierGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/customerGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/dedicatedHost", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultNetworkAcl", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultRouteTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSecurityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultSubnet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpc", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/defaultVpcDhcpOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/egressOnlyInternetGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/eip", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/eipAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/fleet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/flowLog", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/instance", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/internetGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/keyPair", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/launchConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/launchTemplate", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRoute", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/localGatewayRouteTableVpcAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/mainRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixList", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/managedPrefixListEntry", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/natGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkAcl", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkAclRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterface", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/networkInterfaceSecurityGroupAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/peeringConnectionOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/placementGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/proxyProtocolPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/route", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/routeTable", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/routeTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/securityGroupRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/snapshotCreateVolumePermission", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotDatafeedSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotFleetRequest", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/spotInstanceRequest", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/subnet", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/tag", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorFilterRule", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorSession", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/trafficMirrorTarget", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/transitGatewayPeeringAttachmentAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/volumeAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpc", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptions", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcDhcpOptionsAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointConnectionNotification", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointRouteTableAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointService", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointServiceAllowedPrinciple", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcEndpointSubnetAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcIpv4CidrBlockAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnection", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpcPeeringConnectionAccepter", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnection", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnConnectionRoute", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGateway", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayAttachment", _module);
pulumi.runtime.registerResourceModule("aws", "ec2/vpnGatewayRoutePropagation", _module);
//# sourceMappingURL=index.js.map