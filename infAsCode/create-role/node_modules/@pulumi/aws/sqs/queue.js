"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Queue = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const queue = new aws.sqs.Queue("queue", {
 *     delaySeconds: 90,
 *     maxMessageSize: 2048,
 *     messageRetentionSeconds: 86400,
 *     receiveWaitTimeSeconds: 10,
 *     redrivePolicy: JSON.stringify({
 *         deadLetterTargetArn: aws_sqs_queue.queue_deadletter.arn,
 *         maxReceiveCount: 4,
 *     }),
 *     tags: {
 *         Environment: "production",
 *     },
 * });
 * ```
 * ## FIFO queue
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const queue = new aws.sqs.Queue("queue", {
 *     contentBasedDeduplication: true,
 *     fifoQueue: true,
 * });
 * ```
 *
 * ## High-throughput FIFO queue
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const terraformQueue = new aws.sqs.Queue("terraform_queue", {
 *     deduplicationScope: "messageGroup",
 *     fifoQueue: true,
 *     fifoThroughputLimit: "perMessageGroupId",
 * });
 * ```
 *
 * ## Server-side encryption (SSE)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const queue = new aws.sqs.Queue("queue", {
 *     kmsDataKeyReusePeriodSeconds: 300,
 *     kmsMasterKeyId: "alias/aws/sqs",
 * });
 * ```
 *
 * ## Import
 *
 * SQS Queues can be imported using the `queue url`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sqs/queue:Queue public_queue https://queue.amazonaws.com/80398EXAMPLE/MyQueue
 * ```
 */
class Queue extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["contentBasedDeduplication"] = state ? state.contentBasedDeduplication : undefined;
            inputs["deduplicationScope"] = state ? state.deduplicationScope : undefined;
            inputs["delaySeconds"] = state ? state.delaySeconds : undefined;
            inputs["fifoQueue"] = state ? state.fifoQueue : undefined;
            inputs["fifoThroughputLimit"] = state ? state.fifoThroughputLimit : undefined;
            inputs["kmsDataKeyReusePeriodSeconds"] = state ? state.kmsDataKeyReusePeriodSeconds : undefined;
            inputs["kmsMasterKeyId"] = state ? state.kmsMasterKeyId : undefined;
            inputs["maxMessageSize"] = state ? state.maxMessageSize : undefined;
            inputs["messageRetentionSeconds"] = state ? state.messageRetentionSeconds : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["receiveWaitTimeSeconds"] = state ? state.receiveWaitTimeSeconds : undefined;
            inputs["redrivePolicy"] = state ? state.redrivePolicy : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["visibilityTimeoutSeconds"] = state ? state.visibilityTimeoutSeconds : undefined;
        }
        else {
            const args = argsOrState;
            inputs["contentBasedDeduplication"] = args ? args.contentBasedDeduplication : undefined;
            inputs["deduplicationScope"] = args ? args.deduplicationScope : undefined;
            inputs["delaySeconds"] = args ? args.delaySeconds : undefined;
            inputs["fifoQueue"] = args ? args.fifoQueue : undefined;
            inputs["fifoThroughputLimit"] = args ? args.fifoThroughputLimit : undefined;
            inputs["kmsDataKeyReusePeriodSeconds"] = args ? args.kmsDataKeyReusePeriodSeconds : undefined;
            inputs["kmsMasterKeyId"] = args ? args.kmsMasterKeyId : undefined;
            inputs["maxMessageSize"] = args ? args.maxMessageSize : undefined;
            inputs["messageRetentionSeconds"] = args ? args.messageRetentionSeconds : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["receiveWaitTimeSeconds"] = args ? args.receiveWaitTimeSeconds : undefined;
            inputs["redrivePolicy"] = args ? args.redrivePolicy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["visibilityTimeoutSeconds"] = args ? args.visibilityTimeoutSeconds : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Queue.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Queue resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Queue(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Queue.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Queue.__pulumiType;
    }
}
exports.Queue = Queue;
/** @internal */
Queue.__pulumiType = 'aws:sqs/queue:Queue';
//# sourceMappingURL=queue.js.map