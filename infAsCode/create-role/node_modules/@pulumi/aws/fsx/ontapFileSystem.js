"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.OntapFileSystem = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon FSx for NetApp ONTAP file system.
 * See the [FSx ONTAP User Guide](https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/what-is-fsx-ontap.html) for more information.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const test = new aws.fsx.OntapFileSystem("test", {
 *     storageCapacity: 1024,
 *     subnetIds: [
 *         aws_subnet.test1.id,
 *         aws_subnet.test2.id,
 *     ],
 *     deploymentType: "MULTI_AZ_1",
 *     throughputCapacity: 512,
 *     preferredSubnetId: aws_subnet.test1.id,
 * });
 * ```
 *
 * ## Import
 *
 * FSx File Systems can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:fsx/ontapFileSystem:OntapFileSystem example fs-543ab12b1ca672f33
 * ```
 *
 *  Certain resource arguments, like `security_group_ids`, do not have a FSx API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference, e.g., terraform resource "aws_fsx_ontap_file_system" "example" {
 *
 * # ... other configuration ...
 *
 *  security_group_ids = [aws_security_group.example.id]
 *
 * # There is no FSx API for reading security_group_ids
 *
 *  lifecycle {
 *
 *  ignore_changes = [security_group_ids]
 *
 *  } }
 */
class OntapFileSystem extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["automaticBackupRetentionDays"] = state ? state.automaticBackupRetentionDays : undefined;
            inputs["dailyAutomaticBackupStartTime"] = state ? state.dailyAutomaticBackupStartTime : undefined;
            inputs["deploymentType"] = state ? state.deploymentType : undefined;
            inputs["diskIopsConfiguration"] = state ? state.diskIopsConfiguration : undefined;
            inputs["dnsName"] = state ? state.dnsName : undefined;
            inputs["endpointIpAddressRange"] = state ? state.endpointIpAddressRange : undefined;
            inputs["endpoints"] = state ? state.endpoints : undefined;
            inputs["fsxAdminPassword"] = state ? state.fsxAdminPassword : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["networkInterfaceIds"] = state ? state.networkInterfaceIds : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["preferredSubnetId"] = state ? state.preferredSubnetId : undefined;
            inputs["routeTableIds"] = state ? state.routeTableIds : undefined;
            inputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            inputs["storageCapacity"] = state ? state.storageCapacity : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["throughputCapacity"] = state ? state.throughputCapacity : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
            inputs["weeklyMaintenanceStartTime"] = state ? state.weeklyMaintenanceStartTime : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.deploymentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'deploymentType'");
            }
            if ((!args || args.preferredSubnetId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'preferredSubnetId'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.throughputCapacity === undefined) && !opts.urn) {
                throw new Error("Missing required property 'throughputCapacity'");
            }
            inputs["automaticBackupRetentionDays"] = args ? args.automaticBackupRetentionDays : undefined;
            inputs["dailyAutomaticBackupStartTime"] = args ? args.dailyAutomaticBackupStartTime : undefined;
            inputs["deploymentType"] = args ? args.deploymentType : undefined;
            inputs["diskIopsConfiguration"] = args ? args.diskIopsConfiguration : undefined;
            inputs["endpointIpAddressRange"] = args ? args.endpointIpAddressRange : undefined;
            inputs["fsxAdminPassword"] = args ? args.fsxAdminPassword : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["preferredSubnetId"] = args ? args.preferredSubnetId : undefined;
            inputs["routeTableIds"] = args ? args.routeTableIds : undefined;
            inputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            inputs["storageCapacity"] = args ? args.storageCapacity : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["throughputCapacity"] = args ? args.throughputCapacity : undefined;
            inputs["weeklyMaintenanceStartTime"] = args ? args.weeklyMaintenanceStartTime : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["dnsName"] = undefined /*out*/;
            inputs["endpoints"] = undefined /*out*/;
            inputs["networkInterfaceIds"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["vpcId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(OntapFileSystem.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing OntapFileSystem resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new OntapFileSystem(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of OntapFileSystem.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OntapFileSystem.__pulumiType;
    }
}
exports.OntapFileSystem = OntapFileSystem;
/** @internal */
OntapFileSystem.__pulumiType = 'aws:fsx/ontapFileSystem:OntapFileSystem';
//# sourceMappingURL=ontapFileSystem.js.map