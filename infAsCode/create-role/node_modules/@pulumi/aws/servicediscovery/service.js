"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Service = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Service Discovery Service resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleVpc = new aws.ec2.Vpc("exampleVpc", {
 *     cidrBlock: "10.0.0.0/16",
 *     enableDnsSupport: true,
 *     enableDnsHostnames: true,
 * });
 * const examplePrivateDnsNamespace = new aws.servicediscovery.PrivateDnsNamespace("examplePrivateDnsNamespace", {
 *     description: "example",
 *     vpc: exampleVpc.id,
 * });
 * const exampleService = new aws.servicediscovery.Service("exampleService", {
 *     dnsConfig: {
 *         namespaceId: examplePrivateDnsNamespace.id,
 *         dnsRecords: [{
 *             ttl: 10,
 *             type: "A",
 *         }],
 *         routingPolicy: "MULTIVALUE",
 *     },
 *     healthCheckCustomConfig: {
 *         failureThreshold: 1,
 *     },
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const examplePublicDnsNamespace = new aws.servicediscovery.PublicDnsNamespace("examplePublicDnsNamespace", {description: "example"});
 * const exampleService = new aws.servicediscovery.Service("exampleService", {
 *     dnsConfig: {
 *         namespaceId: examplePublicDnsNamespace.id,
 *         dnsRecords: [{
 *             ttl: 10,
 *             type: "A",
 *         }],
 *     },
 *     healthCheckConfig: {
 *         failureThreshold: 10,
 *         resourcePath: "path",
 *         type: "HTTP",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Service Discovery Service can be imported using the service ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:servicediscovery/service:Service example 0123456789
 * ```
 */
class Service extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dnsConfig"] = state ? state.dnsConfig : undefined;
            inputs["forceDestroy"] = state ? state.forceDestroy : undefined;
            inputs["healthCheckConfig"] = state ? state.healthCheckConfig : undefined;
            inputs["healthCheckCustomConfig"] = state ? state.healthCheckCustomConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namespaceId"] = state ? state.namespaceId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            inputs["description"] = args ? args.description : undefined;
            inputs["dnsConfig"] = args ? args.dnsConfig : undefined;
            inputs["forceDestroy"] = args ? args.forceDestroy : undefined;
            inputs["healthCheckConfig"] = args ? args.healthCheckConfig : undefined;
            inputs["healthCheckCustomConfig"] = args ? args.healthCheckCustomConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["namespaceId"] = args ? args.namespaceId : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Service.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Service resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Service(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Service.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Service.__pulumiType;
    }
}
exports.Service = Service;
/** @internal */
Service.__pulumiType = 'aws:servicediscovery/service:Service';
//# sourceMappingURL=service.js.map