"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MLTransform = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Glue ML Transform resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testCatalogDatabase = new aws.glue.CatalogDatabase("testCatalogDatabase", {name: "example"});
 * const testCatalogTable = new aws.glue.CatalogTable("testCatalogTable", {
 *     name: "example",
 *     databaseName: testCatalogDatabase.name,
 *     owner: "my_owner",
 *     retention: 1,
 *     tableType: "VIRTUAL_VIEW",
 *     viewExpandedText: "view_expanded_text_1",
 *     viewOriginalText: "view_original_text_1",
 *     storageDescriptor: {
 *         bucketColumns: ["bucket_column_1"],
 *         compressed: false,
 *         inputFormat: "SequenceFileInputFormat",
 *         location: "my_location",
 *         numberOfBuckets: 1,
 *         outputFormat: "SequenceFileInputFormat",
 *         storedAsSubDirectories: false,
 *         parameters: {
 *             param1: "param1_val",
 *         },
 *         columns: [
 *             {
 *                 name: "my_column_1",
 *                 type: "int",
 *                 comment: "my_column1_comment",
 *             },
 *             {
 *                 name: "my_column_2",
 *                 type: "string",
 *                 comment: "my_column2_comment",
 *             },
 *         ],
 *         serDeInfo: {
 *             name: "ser_de_name",
 *             parameters: {
 *                 param1: "param_val_1",
 *             },
 *             serializationLibrary: "org.apache.hadoop.hive.serde2.columnar.ColumnarSerDe",
 *         },
 *         sortColumns: [{
 *             column: "my_column_1",
 *             sortOrder: 1,
 *         }],
 *         skewedInfo: {
 *             skewedColumnNames: ["my_column_1"],
 *             skewedColumnValueLocationMaps: {
 *                 my_column_1: "my_column_1_val_loc_map",
 *             },
 *             skewedColumnValues: ["skewed_val_1"],
 *         },
 *     },
 *     partitionKeys: [
 *         {
 *             name: "my_column_1",
 *             type: "int",
 *             comment: "my_column_1_comment",
 *         },
 *         {
 *             name: "my_column_2",
 *             type: "string",
 *             comment: "my_column_2_comment",
 *         },
 *     ],
 *     parameters: {
 *         param1: "param1_val",
 *     },
 * });
 * const testMLTransform = new aws.glue.MLTransform("testMLTransform", {
 *     roleArn: aws_iam_role.test.arn,
 *     inputRecordTables: [{
 *         databaseName: testCatalogTable.databaseName,
 *         tableName: testCatalogTable.name,
 *     }],
 *     parameters: {
 *         transformType: "FIND_MATCHES",
 *         findMatchesParameters: {
 *             primaryKeyColumnName: "my_column_1",
 *         },
 *     },
 * }, {
 *     dependsOn: [aws_iam_role_policy_attachment.test],
 * });
 * ```
 *
 * ## Import
 *
 * Glue ML Transforms can be imported using `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:glue/mLTransform:MLTransform example tfm-c2cafbe83b1c575f49eaca9939220e2fcd58e2d5
 * ```
 */
class MLTransform extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["glueVersion"] = state ? state.glueVersion : undefined;
            inputs["inputRecordTables"] = state ? state.inputRecordTables : undefined;
            inputs["labelCount"] = state ? state.labelCount : undefined;
            inputs["maxCapacity"] = state ? state.maxCapacity : undefined;
            inputs["maxRetries"] = state ? state.maxRetries : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["numberOfWorkers"] = state ? state.numberOfWorkers : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["schemas"] = state ? state.schemas : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["timeout"] = state ? state.timeout : undefined;
            inputs["workerType"] = state ? state.workerType : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.inputRecordTables === undefined) && !opts.urn) {
                throw new Error("Missing required property 'inputRecordTables'");
            }
            if ((!args || args.parameters === undefined) && !opts.urn) {
                throw new Error("Missing required property 'parameters'");
            }
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["glueVersion"] = args ? args.glueVersion : undefined;
            inputs["inputRecordTables"] = args ? args.inputRecordTables : undefined;
            inputs["maxCapacity"] = args ? args.maxCapacity : undefined;
            inputs["maxRetries"] = args ? args.maxRetries : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["numberOfWorkers"] = args ? args.numberOfWorkers : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["timeout"] = args ? args.timeout : undefined;
            inputs["workerType"] = args ? args.workerType : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["labelCount"] = undefined /*out*/;
            inputs["schemas"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(MLTransform.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MLTransform resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MLTransform(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MLTransform.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MLTransform.__pulumiType;
    }
}
exports.MLTransform = MLTransform;
/** @internal */
MLTransform.__pulumiType = 'aws:glue/mLTransform:MLTransform';
//# sourceMappingURL=mltransform.js.map