"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserDefinedFunction = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Glue User Defined Function Resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleCatalogDatabase = new aws.glue.CatalogDatabase("exampleCatalogDatabase", {name: "my_database"});
 * const exampleUserDefinedFunction = new aws.glue.UserDefinedFunction("exampleUserDefinedFunction", {
 *     catalogId: exampleCatalogDatabase.catalogId,
 *     databaseName: exampleCatalogDatabase.name,
 *     className: "class",
 *     ownerName: "owner",
 *     ownerType: "GROUP",
 *     resourceUris: [{
 *         resourceType: "ARCHIVE",
 *         uri: "uri",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * Glue User Defined Functions can be imported using the `catalog_id:database_name:function_name`. If you have not set a Catalog ID specify the AWS Account ID that the database is in, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:glue/userDefinedFunction:UserDefinedFunction func 123456789012:my_database:my_func
 * ```
 */
class UserDefinedFunction extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["catalogId"] = state ? state.catalogId : undefined;
            inputs["className"] = state ? state.className : undefined;
            inputs["createTime"] = state ? state.createTime : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["ownerName"] = state ? state.ownerName : undefined;
            inputs["ownerType"] = state ? state.ownerType : undefined;
            inputs["resourceUris"] = state ? state.resourceUris : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.className === undefined) && !opts.urn) {
                throw new Error("Missing required property 'className'");
            }
            if ((!args || args.databaseName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'databaseName'");
            }
            if ((!args || args.ownerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerName'");
            }
            if ((!args || args.ownerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ownerType'");
            }
            inputs["catalogId"] = args ? args.catalogId : undefined;
            inputs["className"] = args ? args.className : undefined;
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["ownerName"] = args ? args.ownerName : undefined;
            inputs["ownerType"] = args ? args.ownerType : undefined;
            inputs["resourceUris"] = args ? args.resourceUris : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createTime"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(UserDefinedFunction.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing UserDefinedFunction resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserDefinedFunction(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserDefinedFunction.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserDefinedFunction.__pulumiType;
    }
}
exports.UserDefinedFunction = UserDefinedFunction;
/** @internal */
UserDefinedFunction.__pulumiType = 'aws:glue/userDefinedFunction:UserDefinedFunction';
//# sourceMappingURL=userDefinedFunction.js.map