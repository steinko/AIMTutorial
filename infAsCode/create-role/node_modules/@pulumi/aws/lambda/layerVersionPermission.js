"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LayerVersionPermission = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lambda Layer Version Permission resource. It allows you to share you own Lambda Layers to another account by account ID, to all accounts in AWS organization or even to all AWS accounts.
 *
 * For information about Lambda Layer Permissions and how to use them, see [Using Resource-based Policies for AWS Lambda][1]
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lambdaLayerPermission = new aws.lambda.LayerVersionPermission("lambda_layer_permission", {
 *     action: "lambda:GetLayerVersion",
 *     layerName: "arn:aws:lambda:us-west-2:123456654321:layer:test_layer1",
 *     principal: "111111111111",
 *     statementId: "dev-account",
 *     versionNumber: 1,
 * });
 * ```
 *
 * ## Import
 *
 * Lambda Layer Permissions can be imported using `layer_name` and `version_number`, separated by a comma (`,`).
 *
 * ```sh
 *  $ pulumi import aws:lambda/layerVersionPermission:LayerVersionPermission example arn:aws:lambda:us-west-2:123456654321:layer:test_layer1,1
 * ```
 *
 *  [1]https://docs.aws.amazon.com/lambda/latest/dg/access-control-resource-based.html#permissions-resource-xaccountlayer
 */
class LayerVersionPermission extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["action"] = state ? state.action : undefined;
            inputs["layerName"] = state ? state.layerName : undefined;
            inputs["organizationId"] = state ? state.organizationId : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["principal"] = state ? state.principal : undefined;
            inputs["revisionId"] = state ? state.revisionId : undefined;
            inputs["statementId"] = state ? state.statementId : undefined;
            inputs["versionNumber"] = state ? state.versionNumber : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.action === undefined) && !opts.urn) {
                throw new Error("Missing required property 'action'");
            }
            if ((!args || args.layerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'layerName'");
            }
            if ((!args || args.principal === undefined) && !opts.urn) {
                throw new Error("Missing required property 'principal'");
            }
            if ((!args || args.statementId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'statementId'");
            }
            if ((!args || args.versionNumber === undefined) && !opts.urn) {
                throw new Error("Missing required property 'versionNumber'");
            }
            inputs["action"] = args ? args.action : undefined;
            inputs["layerName"] = args ? args.layerName : undefined;
            inputs["organizationId"] = args ? args.organizationId : undefined;
            inputs["principal"] = args ? args.principal : undefined;
            inputs["statementId"] = args ? args.statementId : undefined;
            inputs["versionNumber"] = args ? args.versionNumber : undefined;
            inputs["policy"] = undefined /*out*/;
            inputs["revisionId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LayerVersionPermission.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LayerVersionPermission resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LayerVersionPermission(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LayerVersionPermission.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LayerVersionPermission.__pulumiType;
    }
}
exports.LayerVersionPermission = LayerVersionPermission;
/** @internal */
LayerVersionPermission.__pulumiType = 'aws:lambda/layerVersionPermission:LayerVersionPermission';
//# sourceMappingURL=layerVersionPermission.js.map