"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventSourceMapping = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Lambda event source mapping. This allows Lambda functions to get events from Kinesis, DynamoDB, SQS, Amazon MQ and Managed Streaming for Apache Kafka (MSK).
 *
 * For information about Lambda and how to use it, see [What is AWS Lambda?](http://docs.aws.amazon.com/lambda/latest/dg/welcome.html).
 * For information about event source mappings, see [CreateEventSourceMapping](http://docs.aws.amazon.com/lambda/latest/dg/API_CreateEventSourceMapping.html) in the API docs.
 *
 * ## Example Usage
 * ### DynamoDB
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_dynamodb_table.example.stream_arn,
 *     functionName: aws_lambda_function.example.arn,
 *     startingPosition: "LATEST",
 * });
 * ```
 * ### Kinesis
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_kinesis_stream.example.arn,
 *     functionName: aws_lambda_function.example.arn,
 *     startingPosition: "LATEST",
 * });
 * ```
 * ### Managed Streaming for Apache Kafka (MSK)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_msk_cluster.example.arn,
 *     functionName: aws_lambda_function.example.arn,
 *     topics: ["Example"],
 *     startingPosition: "TRIM_HORIZON",
 * });
 * ```
 * ### Self Managed Apache Kafka
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     functionName: aws_lambda_function.example.arn,
 *     topics: ["Example"],
 *     startingPosition: "TRIM_HORIZON",
 *     selfManagedEventSource: {
 *         endpoints: {
 *             KAFKA_BOOTSTRAP_SERVERS: "kafka1.example.com:9092,kafka2.example.com:9092",
 *         },
 *     },
 *     sourceAccessConfigurations: [
 *         {
 *             type: "VPC_SUBNET",
 *             uri: "subnet:subnet-example1",
 *         },
 *         {
 *             type: "VPC_SUBNET",
 *             uri: "subnet:subnet-example2",
 *         },
 *         {
 *             type: "VPC_SECURITY_GROUP",
 *             uri: "security_group:sg-example",
 *         },
 *     ],
 * });
 * ```
 * ### SQS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_sqs_queue.sqs_queue_test.arn,
 *     functionName: aws_lambda_function.example.arn,
 * });
 * ```
 * ### Amazon MQ (ActiveMQ)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     batchSize: 10,
 *     eventSourceArn: aws_mq_broker.example.arn,
 *     enabled: true,
 *     functionName: aws_lambda_function.example.arn,
 *     queues: ["example"],
 *     sourceAccessConfigurations: [{
 *         type: "BASIC_AUTH",
 *         uri: aws_secretsmanager_secret_version.example.arn,
 *     }],
 * });
 * ```
 * ### Amazon MQ (RabbitMQ)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     batchSize: 1,
 *     eventSourceArn: aws_mq_broker.example.arn,
 *     enabled: true,
 *     functionName: aws_lambda_function.example.arn,
 *     queues: ["example"],
 *     sourceAccessConfigurations: [
 *         {
 *             type: "VIRTUAL_HOST",
 *             uri: "/example",
 *         },
 *         {
 *             type: "BASIC_AUTH",
 *             uri: aws_secretsmanager_secret_version.example.arn,
 *         },
 *     ],
 * });
 * ```
 * ### Managed Streaming for Kafka (MSK)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.lambda.EventSourceMapping("example", {
 *     eventSourceArn: aws_msk_cluster.example.arn,
 *     functionName: aws_lambda_function.example.arn,
 *     topics: ["Example"],
 *     startingPosition: "TRIM_HORIZON",
 * });
 * ```
 *
 * ## Import
 *
 * Lambda event source mappings can be imported using the `UUID` (event source mapping identifier), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:lambda/eventSourceMapping:EventSourceMapping event_source_mapping 12345kxodurf3443
 * ```
 */
class EventSourceMapping extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["batchSize"] = state ? state.batchSize : undefined;
            inputs["bisectBatchOnFunctionError"] = state ? state.bisectBatchOnFunctionError : undefined;
            inputs["destinationConfig"] = state ? state.destinationConfig : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["eventSourceArn"] = state ? state.eventSourceArn : undefined;
            inputs["functionArn"] = state ? state.functionArn : undefined;
            inputs["functionName"] = state ? state.functionName : undefined;
            inputs["functionResponseTypes"] = state ? state.functionResponseTypes : undefined;
            inputs["lastModified"] = state ? state.lastModified : undefined;
            inputs["lastProcessingResult"] = state ? state.lastProcessingResult : undefined;
            inputs["maximumBatchingWindowInSeconds"] = state ? state.maximumBatchingWindowInSeconds : undefined;
            inputs["maximumRecordAgeInSeconds"] = state ? state.maximumRecordAgeInSeconds : undefined;
            inputs["maximumRetryAttempts"] = state ? state.maximumRetryAttempts : undefined;
            inputs["parallelizationFactor"] = state ? state.parallelizationFactor : undefined;
            inputs["queues"] = state ? state.queues : undefined;
            inputs["selfManagedEventSource"] = state ? state.selfManagedEventSource : undefined;
            inputs["sourceAccessConfigurations"] = state ? state.sourceAccessConfigurations : undefined;
            inputs["startingPosition"] = state ? state.startingPosition : undefined;
            inputs["startingPositionTimestamp"] = state ? state.startingPositionTimestamp : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["stateTransitionReason"] = state ? state.stateTransitionReason : undefined;
            inputs["topics"] = state ? state.topics : undefined;
            inputs["tumblingWindowInSeconds"] = state ? state.tumblingWindowInSeconds : undefined;
            inputs["uuid"] = state ? state.uuid : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.functionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionName'");
            }
            inputs["batchSize"] = args ? args.batchSize : undefined;
            inputs["bisectBatchOnFunctionError"] = args ? args.bisectBatchOnFunctionError : undefined;
            inputs["destinationConfig"] = args ? args.destinationConfig : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["eventSourceArn"] = args ? args.eventSourceArn : undefined;
            inputs["functionName"] = args ? args.functionName : undefined;
            inputs["functionResponseTypes"] = args ? args.functionResponseTypes : undefined;
            inputs["maximumBatchingWindowInSeconds"] = args ? args.maximumBatchingWindowInSeconds : undefined;
            inputs["maximumRecordAgeInSeconds"] = args ? args.maximumRecordAgeInSeconds : undefined;
            inputs["maximumRetryAttempts"] = args ? args.maximumRetryAttempts : undefined;
            inputs["parallelizationFactor"] = args ? args.parallelizationFactor : undefined;
            inputs["queues"] = args ? args.queues : undefined;
            inputs["selfManagedEventSource"] = args ? args.selfManagedEventSource : undefined;
            inputs["sourceAccessConfigurations"] = args ? args.sourceAccessConfigurations : undefined;
            inputs["startingPosition"] = args ? args.startingPosition : undefined;
            inputs["startingPositionTimestamp"] = args ? args.startingPositionTimestamp : undefined;
            inputs["topics"] = args ? args.topics : undefined;
            inputs["tumblingWindowInSeconds"] = args ? args.tumblingWindowInSeconds : undefined;
            inputs["functionArn"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["lastProcessingResult"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["stateTransitionReason"] = undefined /*out*/;
            inputs["uuid"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(EventSourceMapping.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EventSourceMapping resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventSourceMapping(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventSourceMapping.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventSourceMapping.__pulumiType;
    }
}
exports.EventSourceMapping = EventSourceMapping;
/** @internal */
EventSourceMapping.__pulumiType = 'aws:lambda/eventSourceMapping:EventSourceMapping';
//# sourceMappingURL=eventSourceMapping.js.map