"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicRule = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const mytopic = new aws.sns.Topic("mytopic", {});
 * const myerrortopic = new aws.sns.Topic("myerrortopic", {});
 * const role = new aws.iam.Role("role", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "iot.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const rule = new aws.iot.TopicRule("rule", {
 *     description: "Example rule",
 *     enabled: true,
 *     sql: "SELECT * FROM 'topic/test'",
 *     sqlVersion: "2016-03-23",
 *     sns: {
 *         messageFormat: "RAW",
 *         roleArn: role.arn,
 *         targetArn: mytopic.arn,
 *     },
 *     errorAction: {
 *         sns: {
 *             messageFormat: "RAW",
 *             roleArn: role.arn,
 *             targetArn: myerrortopic.arn,
 *         },
 *     },
 * });
 * const iamPolicyForLambda = new aws.iam.RolePolicy("iamPolicyForLambda", {
 *     role: role.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *         "Effect": "Allow",
 *         "Action": [
 *             "sns:Publish"
 *         ],
 *         "Resource": "${mytopic.arn}"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * IoT Topic Rules can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iot/topicRule:TopicRule rule <name>
 * ```
 */
class TopicRule extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudwatchAlarm"] = state ? state.cloudwatchAlarm : undefined;
            inputs["cloudwatchMetric"] = state ? state.cloudwatchMetric : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["dynamodb"] = state ? state.dynamodb : undefined;
            inputs["dynamodbv2s"] = state ? state.dynamodbv2s : undefined;
            inputs["elasticsearch"] = state ? state.elasticsearch : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["errorAction"] = state ? state.errorAction : undefined;
            inputs["firehose"] = state ? state.firehose : undefined;
            inputs["iotAnalytics"] = state ? state.iotAnalytics : undefined;
            inputs["iotEvents"] = state ? state.iotEvents : undefined;
            inputs["kinesis"] = state ? state.kinesis : undefined;
            inputs["lambda"] = state ? state.lambda : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["republish"] = state ? state.republish : undefined;
            inputs["s3"] = state ? state.s3 : undefined;
            inputs["sns"] = state ? state.sns : undefined;
            inputs["sql"] = state ? state.sql : undefined;
            inputs["sqlVersion"] = state ? state.sqlVersion : undefined;
            inputs["sqs"] = state ? state.sqs : undefined;
            inputs["stepFunctions"] = state ? state.stepFunctions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.enabled === undefined) && !opts.urn) {
                throw new Error("Missing required property 'enabled'");
            }
            if ((!args || args.sql === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sql'");
            }
            if ((!args || args.sqlVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sqlVersion'");
            }
            inputs["cloudwatchAlarm"] = args ? args.cloudwatchAlarm : undefined;
            inputs["cloudwatchMetric"] = args ? args.cloudwatchMetric : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["dynamodb"] = args ? args.dynamodb : undefined;
            inputs["dynamodbv2s"] = args ? args.dynamodbv2s : undefined;
            inputs["elasticsearch"] = args ? args.elasticsearch : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["errorAction"] = args ? args.errorAction : undefined;
            inputs["firehose"] = args ? args.firehose : undefined;
            inputs["iotAnalytics"] = args ? args.iotAnalytics : undefined;
            inputs["iotEvents"] = args ? args.iotEvents : undefined;
            inputs["kinesis"] = args ? args.kinesis : undefined;
            inputs["lambda"] = args ? args.lambda : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["republish"] = args ? args.republish : undefined;
            inputs["s3"] = args ? args.s3 : undefined;
            inputs["sns"] = args ? args.sns : undefined;
            inputs["sql"] = args ? args.sql : undefined;
            inputs["sqlVersion"] = args ? args.sqlVersion : undefined;
            inputs["sqs"] = args ? args.sqs : undefined;
            inputs["stepFunctions"] = args ? args.stepFunctions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TopicRule.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TopicRule resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TopicRule(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TopicRule.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TopicRule.__pulumiType;
    }
}
exports.TopicRule = TopicRule;
/** @internal */
TopicRule.__pulumiType = 'aws:iot/topicRule:TopicRule';
//# sourceMappingURL=topicRule.js.map