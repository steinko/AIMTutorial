"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Sagemaker Domain resource.
 *
 * ## Example Usage
 * ### Basic usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleDomain = new aws.sagemaker.Domain("exampleDomain", {
 *     domainName: "example",
 *     authMode: "IAM",
 *     vpcId: aws_vpc.test.id,
 *     subnetIds: [aws_subnet.test.id],
 *     defaultUserSettings: {
 *         executionRole: aws_iam_role.test.arn,
 *     },
 * });
 * const examplePolicyDocument = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["sagemaker.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const exampleRole = new aws.iam.Role("exampleRole", {
 *     path: "/",
 *     assumeRolePolicy: examplePolicyDocument.then(examplePolicyDocument => examplePolicyDocument.json),
 * });
 * ```
 * ### Using Custom Images
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testImage = new aws.sagemaker.Image("testImage", {
 *     imageName: "example",
 *     roleArn: aws_iam_role.test.arn,
 * });
 * const testAppImageConfig = new aws.sagemaker.AppImageConfig("testAppImageConfig", {
 *     appImageConfigName: "example",
 *     kernelGatewayImageConfig: {
 *         kernelSpec: {
 *             name: "example",
 *         },
 *     },
 * });
 * const testImageVersion = new aws.sagemaker.ImageVersion("testImageVersion", {
 *     imageName: testImage.id,
 *     baseImage: "base-image",
 * });
 * const testDomain = new aws.sagemaker.Domain("testDomain", {
 *     domainName: "example",
 *     authMode: "IAM",
 *     vpcId: aws_vpc.test.id,
 *     subnetIds: [aws_subnet.test.id],
 *     defaultUserSettings: {
 *         executionRole: aws_iam_role.test.arn,
 *         kernelGatewayAppSettings: {
 *             customImages: [{
 *                 appImageConfigName: testAppImageConfig.appImageConfigName,
 *                 imageName: testImageVersion.imageName,
 *             }],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Sagemaker Code Domains can be imported using the `id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sagemaker/domain:Domain test_domain d-8jgsjtilstu8
 * ```
 */
class Domain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["appNetworkAccessType"] = state ? state.appNetworkAccessType : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["authMode"] = state ? state.authMode : undefined;
            inputs["defaultUserSettings"] = state ? state.defaultUserSettings : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["homeEfsFileSystemId"] = state ? state.homeEfsFileSystemId : undefined;
            inputs["kmsKeyId"] = state ? state.kmsKeyId : undefined;
            inputs["retentionPolicy"] = state ? state.retentionPolicy : undefined;
            inputs["singleSignOnManagedApplicationInstanceId"] = state ? state.singleSignOnManagedApplicationInstanceId : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["url"] = state ? state.url : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.authMode === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authMode'");
            }
            if ((!args || args.defaultUserSettings === undefined) && !opts.urn) {
                throw new Error("Missing required property 'defaultUserSettings'");
            }
            if ((!args || args.domainName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainName'");
            }
            if ((!args || args.subnetIds === undefined) && !opts.urn) {
                throw new Error("Missing required property 'subnetIds'");
            }
            if ((!args || args.vpcId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcId'");
            }
            inputs["appNetworkAccessType"] = args ? args.appNetworkAccessType : undefined;
            inputs["authMode"] = args ? args.authMode : undefined;
            inputs["defaultUserSettings"] = args ? args.defaultUserSettings : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["kmsKeyId"] = args ? args.kmsKeyId : undefined;
            inputs["retentionPolicy"] = args ? args.retentionPolicy : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["homeEfsFileSystemId"] = undefined /*out*/;
            inputs["singleSignOnManagedApplicationInstanceId"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["url"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Domain.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Domain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws:sagemaker/domain:Domain';
//# sourceMappingURL=domain.js.map