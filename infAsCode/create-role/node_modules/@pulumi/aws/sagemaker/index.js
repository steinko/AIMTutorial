"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./app"), exports);
__exportStar(require("./appImageConfig"), exports);
__exportStar(require("./codeRepository"), exports);
__exportStar(require("./deviceFleet"), exports);
__exportStar(require("./domain"), exports);
__exportStar(require("./endpoint"), exports);
__exportStar(require("./endpointConfiguration"), exports);
__exportStar(require("./featureGroup"), exports);
__exportStar(require("./flowDefinition"), exports);
__exportStar(require("./getPrebuiltEcrImage"), exports);
__exportStar(require("./humanTaskUI"), exports);
__exportStar(require("./image"), exports);
__exportStar(require("./imageVersion"), exports);
__exportStar(require("./model"), exports);
__exportStar(require("./modelPackageGroup"), exports);
__exportStar(require("./modelPackageGroupPolicy"), exports);
__exportStar(require("./notebookInstance"), exports);
__exportStar(require("./notebookInstanceLifecycleConfiguration"), exports);
__exportStar(require("./studioLifecycleConfig"), exports);
__exportStar(require("./userProfile"), exports);
__exportStar(require("./workforce"), exports);
__exportStar(require("./workteam"), exports);
// Import resources to register:
const app_1 = require("./app");
const appImageConfig_1 = require("./appImageConfig");
const codeRepository_1 = require("./codeRepository");
const deviceFleet_1 = require("./deviceFleet");
const domain_1 = require("./domain");
const endpoint_1 = require("./endpoint");
const endpointConfiguration_1 = require("./endpointConfiguration");
const featureGroup_1 = require("./featureGroup");
const flowDefinition_1 = require("./flowDefinition");
const humanTaskUI_1 = require("./humanTaskUI");
const image_1 = require("./image");
const imageVersion_1 = require("./imageVersion");
const model_1 = require("./model");
const modelPackageGroup_1 = require("./modelPackageGroup");
const modelPackageGroupPolicy_1 = require("./modelPackageGroupPolicy");
const notebookInstance_1 = require("./notebookInstance");
const notebookInstanceLifecycleConfiguration_1 = require("./notebookInstanceLifecycleConfiguration");
const studioLifecycleConfig_1 = require("./studioLifecycleConfig");
const userProfile_1 = require("./userProfile");
const workforce_1 = require("./workforce");
const workteam_1 = require("./workteam");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:sagemaker/app:App":
                return new app_1.App(name, undefined, { urn });
            case "aws:sagemaker/appImageConfig:AppImageConfig":
                return new appImageConfig_1.AppImageConfig(name, undefined, { urn });
            case "aws:sagemaker/codeRepository:CodeRepository":
                return new codeRepository_1.CodeRepository(name, undefined, { urn });
            case "aws:sagemaker/deviceFleet:DeviceFleet":
                return new deviceFleet_1.DeviceFleet(name, undefined, { urn });
            case "aws:sagemaker/domain:Domain":
                return new domain_1.Domain(name, undefined, { urn });
            case "aws:sagemaker/endpoint:Endpoint":
                return new endpoint_1.Endpoint(name, undefined, { urn });
            case "aws:sagemaker/endpointConfiguration:EndpointConfiguration":
                return new endpointConfiguration_1.EndpointConfiguration(name, undefined, { urn });
            case "aws:sagemaker/featureGroup:FeatureGroup":
                return new featureGroup_1.FeatureGroup(name, undefined, { urn });
            case "aws:sagemaker/flowDefinition:FlowDefinition":
                return new flowDefinition_1.FlowDefinition(name, undefined, { urn });
            case "aws:sagemaker/humanTaskUI:HumanTaskUI":
                return new humanTaskUI_1.HumanTaskUI(name, undefined, { urn });
            case "aws:sagemaker/image:Image":
                return new image_1.Image(name, undefined, { urn });
            case "aws:sagemaker/imageVersion:ImageVersion":
                return new imageVersion_1.ImageVersion(name, undefined, { urn });
            case "aws:sagemaker/model:Model":
                return new model_1.Model(name, undefined, { urn });
            case "aws:sagemaker/modelPackageGroup:ModelPackageGroup":
                return new modelPackageGroup_1.ModelPackageGroup(name, undefined, { urn });
            case "aws:sagemaker/modelPackageGroupPolicy:ModelPackageGroupPolicy":
                return new modelPackageGroupPolicy_1.ModelPackageGroupPolicy(name, undefined, { urn });
            case "aws:sagemaker/notebookInstance:NotebookInstance":
                return new notebookInstance_1.NotebookInstance(name, undefined, { urn });
            case "aws:sagemaker/notebookInstanceLifecycleConfiguration:NotebookInstanceLifecycleConfiguration":
                return new notebookInstanceLifecycleConfiguration_1.NotebookInstanceLifecycleConfiguration(name, undefined, { urn });
            case "aws:sagemaker/studioLifecycleConfig:StudioLifecycleConfig":
                return new studioLifecycleConfig_1.StudioLifecycleConfig(name, undefined, { urn });
            case "aws:sagemaker/userProfile:UserProfile":
                return new userProfile_1.UserProfile(name, undefined, { urn });
            case "aws:sagemaker/workforce:Workforce":
                return new workforce_1.Workforce(name, undefined, { urn });
            case "aws:sagemaker/workteam:Workteam":
                return new workteam_1.Workteam(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "sagemaker/app", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/appImageConfig", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/codeRepository", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/deviceFleet", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/domain", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/endpoint", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/endpointConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/featureGroup", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/flowDefinition", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/humanTaskUI", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/image", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/imageVersion", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/model", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/modelPackageGroup", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/modelPackageGroupPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/notebookInstance", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/notebookInstanceLifecycleConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/studioLifecycleConfig", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/userProfile", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/workforce", _module);
pulumi.runtime.registerResourceModule("aws", "sagemaker/workteam", _module);
//# sourceMappingURL=index.js.map