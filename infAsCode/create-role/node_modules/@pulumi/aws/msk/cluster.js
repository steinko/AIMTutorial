"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages AWS Managed Streaming for Kafka cluster
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const vpc = new aws.ec2.Vpc("vpc", {cidrBlock: "192.168.0.0/22"});
 * const azs = aws.getAvailabilityZones({
 *     state: "available",
 * });
 * const subnetAz1 = new aws.ec2.Subnet("subnetAz1", {
 *     availabilityZone: azs.then(azs => azs.names?[0]),
 *     cidrBlock: "192.168.0.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz2 = new aws.ec2.Subnet("subnetAz2", {
 *     availabilityZone: azs.then(azs => azs.names?[1]),
 *     cidrBlock: "192.168.1.0/24",
 *     vpcId: vpc.id,
 * });
 * const subnetAz3 = new aws.ec2.Subnet("subnetAz3", {
 *     availabilityZone: azs.then(azs => azs.names?[2]),
 *     cidrBlock: "192.168.2.0/24",
 *     vpcId: vpc.id,
 * });
 * const sg = new aws.ec2.SecurityGroup("sg", {vpcId: vpc.id});
 * const kms = new aws.kms.Key("kms", {description: "example"});
 * const test = new aws.cloudwatch.LogGroup("test", {});
 * const bucket = new aws.s3.Bucket("bucket", {acl: "private"});
 * const firehoseRole = new aws.iam.Role("firehoseRole", {assumeRolePolicy: `{
 * "Version": "2012-10-17",
 * "Statement": [
 *   {
 *     "Action": "sts:AssumeRole",
 *     "Principal": {
 *       "Service": "firehose.amazonaws.com"
 *     },
 *     "Effect": "Allow",
 *     "Sid": ""
 *   }
 *   ]
 * }
 * `});
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "s3",
 *     s3Configuration: {
 *         roleArn: firehoseRole.arn,
 *         bucketArn: bucket.arn,
 *     },
 *     tags: {
 *         LogDeliveryEnabled: "placeholder",
 *     },
 * });
 * const example = new aws.msk.Cluster("example", {
 *     kafkaVersion: "2.4.1",
 *     numberOfBrokerNodes: 3,
 *     brokerNodeGroupInfo: {
 *         instanceType: "kafka.m5.large",
 *         ebsVolumeSize: 1000,
 *         clientSubnets: [
 *             subnetAz1.id,
 *             subnetAz2.id,
 *             subnetAz3.id,
 *         ],
 *         securityGroups: [sg.id],
 *     },
 *     encryptionInfo: {
 *         encryptionAtRestKmsKeyArn: kms.arn,
 *     },
 *     openMonitoring: {
 *         prometheus: {
 *             jmxExporter: {
 *                 enabledInBroker: true,
 *             },
 *             nodeExporter: {
 *                 enabledInBroker: true,
 *             },
 *         },
 *     },
 *     loggingInfo: {
 *         brokerLogs: {
 *             cloudwatchLogs: {
 *                 enabled: true,
 *                 logGroup: test.name,
 *             },
 *             firehose: {
 *                 enabled: true,
 *                 deliveryStream: testStream.name,
 *             },
 *             s3: {
 *                 enabled: true,
 *                 bucket: bucket.id,
 *                 prefix: "logs/msk-",
 *             },
 *         },
 *     },
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * export const zookeeperConnectString = example.zookeeperConnectString;
 * export const bootstrapBrokersTls = example.bootstrapBrokersTls;
 * ```
 *
 * ## Import
 *
 * MSK clusters can be imported using the cluster `arn`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:msk/cluster:Cluster example arn:aws:kafka:us-west-2:123456789012:cluster/example/279c0212-d057-4dba-9aa9-1c4e5a25bfc7-3
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["bootstrapBrokers"] = state ? state.bootstrapBrokers : undefined;
            inputs["bootstrapBrokersSaslIam"] = state ? state.bootstrapBrokersSaslIam : undefined;
            inputs["bootstrapBrokersSaslScram"] = state ? state.bootstrapBrokersSaslScram : undefined;
            inputs["bootstrapBrokersTls"] = state ? state.bootstrapBrokersTls : undefined;
            inputs["brokerNodeGroupInfo"] = state ? state.brokerNodeGroupInfo : undefined;
            inputs["clientAuthentication"] = state ? state.clientAuthentication : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["configurationInfo"] = state ? state.configurationInfo : undefined;
            inputs["currentVersion"] = state ? state.currentVersion : undefined;
            inputs["encryptionInfo"] = state ? state.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = state ? state.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = state ? state.kafkaVersion : undefined;
            inputs["loggingInfo"] = state ? state.loggingInfo : undefined;
            inputs["numberOfBrokerNodes"] = state ? state.numberOfBrokerNodes : undefined;
            inputs["openMonitoring"] = state ? state.openMonitoring : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["zookeeperConnectString"] = state ? state.zookeeperConnectString : undefined;
            inputs["zookeeperConnectStringTls"] = state ? state.zookeeperConnectStringTls : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.brokerNodeGroupInfo === undefined) && !opts.urn) {
                throw new Error("Missing required property 'brokerNodeGroupInfo'");
            }
            if ((!args || args.kafkaVersion === undefined) && !opts.urn) {
                throw new Error("Missing required property 'kafkaVersion'");
            }
            if ((!args || args.numberOfBrokerNodes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'numberOfBrokerNodes'");
            }
            inputs["brokerNodeGroupInfo"] = args ? args.brokerNodeGroupInfo : undefined;
            inputs["clientAuthentication"] = args ? args.clientAuthentication : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["configurationInfo"] = args ? args.configurationInfo : undefined;
            inputs["encryptionInfo"] = args ? args.encryptionInfo : undefined;
            inputs["enhancedMonitoring"] = args ? args.enhancedMonitoring : undefined;
            inputs["kafkaVersion"] = args ? args.kafkaVersion : undefined;
            inputs["loggingInfo"] = args ? args.loggingInfo : undefined;
            inputs["numberOfBrokerNodes"] = args ? args.numberOfBrokerNodes : undefined;
            inputs["openMonitoring"] = args ? args.openMonitoring : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["bootstrapBrokers"] = undefined /*out*/;
            inputs["bootstrapBrokersSaslIam"] = undefined /*out*/;
            inputs["bootstrapBrokersSaslScram"] = undefined /*out*/;
            inputs["bootstrapBrokersTls"] = undefined /*out*/;
            inputs["currentVersion"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["zookeeperConnectString"] = undefined /*out*/;
            inputs["zookeeperConnectStringTls"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:msk/cluster:Cluster';
//# sourceMappingURL=cluster.js.map