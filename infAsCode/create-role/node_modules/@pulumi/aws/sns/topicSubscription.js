"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.TopicSubscription = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource for subscribing to SNS topics. Requires that an SNS topic exist for the subscription to attach to. This resource allows you to automatically place messages sent to SNS topics in SQS queues, send them as HTTP(S) POST requests to a given endpoint, send SMS messages, or notify devices / applications. The most likely use case for provider users will probably be SQS queues.
 *
 * > **NOTE:** If the SNS topic and SQS queue are in different AWS regions, the `aws.sns.TopicSubscription` must use an AWS provider that is in the same region as the SNS topic. If the `aws.sns.TopicSubscription` uses a provider with a different region than the SNS topic, this provider will fail to create the subscription.
 *
 * > **NOTE:** Setup of cross-account subscriptions from SNS topics to SQS queues requires the provider to have access to BOTH accounts.
 *
 * > **NOTE:** If an SNS topic and SQS queue are in different AWS accounts but the same region, the `aws.sns.TopicSubscription` must use the AWS provider for the account with the SQS queue. If `aws.sns.TopicSubscription` uses a Provider with a different account than the SQS queue, this provider creates the subscription but does not keep state and tries to re-create the subscription at every `apply`.
 *
 * > **NOTE:** If an SNS topic and SQS queue are in different AWS accounts and different AWS regions, the subscription needs to be initiated from the account with the SQS queue but in the region of the SNS topic.
 *
 * > **NOTE:** You cannot unsubscribe to a subscription that is pending confirmation. If you use `email`, `email-json`, or `http`/`https` (without auto-confirmation enabled), until the subscription is confirmed (e.g., outside of this provider), AWS does not allow this provider to delete / unsubscribe the subscription. If you `destroy` an unconfirmed subscription, this provider will remove the subscription from its state but the subscription will still exist in AWS. However, if you delete an SNS topic, SNS [deletes all the subscriptions](https://docs.aws.amazon.com/sns/latest/dg/sns-delete-subscription-topic.html) associated with the topic. Also, you can import a subscription after confirmation and then have the capability to delete it.
 *
 * ## Example Usage
 *
 * You can directly supply a topic and ARN by hand in the `topicArn` property along with the queue ARN:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const userUpdatesSqsTarget = new aws.sns.TopicSubscription("user_updates_sqs_target", {
 *     endpoint: "arn:aws:sqs:us-west-2:432981146916:queue-too",
 *     protocol: "sqs",
 *     topic: "arn:aws:sns:us-west-2:432981146916:user-updates-topic",
 * });
 * ```
 *
 * Alternatively you can use the ARN properties of a managed SNS topic and SQS queue:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const userUpdates = new aws.sns.Topic("userUpdates", {});
 * const userUpdatesQueue = new aws.sqs.Queue("userUpdatesQueue", {});
 * const userUpdatesSqsTarget = new aws.sns.TopicSubscription("userUpdatesSqsTarget", {
 *     topic: userUpdates.arn,
 *     protocol: "sqs",
 *     endpoint: userUpdatesQueue.arn,
 * });
 * ```
 *
 * You can subscribe SNS topics to SQS queues in different Amazon accounts and regions:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const sns = config.getObject("sns") || {
 *     "account-id": "111111111111",
 *     "role-name": "service/service",
 *     name: "example-sns-topic",
 *     display_name: "example",
 *     region: "us-west-1",
 * };
 * const sqs = config.getObject("sqs") || {
 *     "account-id": "222222222222",
 *     "role-name": "service/service",
 *     name: "example-sqs-queue",
 *     region: "us-east-1",
 * };
 * const sns-topic-policy = aws.iam.getPolicyDocument({
 *     policyId: "__default_policy_ID",
 *     statements: [
 *         {
 *             actions: [
 *                 "SNS:Subscribe",
 *                 "SNS:SetTopicAttributes",
 *                 "SNS:RemovePermission",
 *                 "SNS:Publish",
 *                 "SNS:ListSubscriptionsByTopic",
 *                 "SNS:GetTopicAttributes",
 *                 "SNS:DeleteTopic",
 *                 "SNS:AddPermission",
 *             ],
 *             conditions: [{
 *                 test: "StringEquals",
 *                 variable: "AWS:SourceOwner",
 *                 values: [sns["account-id"]],
 *             }],
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: ["*"],
 *             }],
 *             resources: [`arn:aws:sns:${sns.region}:${sns["account-id"]}:${sns.name}`],
 *             sid: "__default_statement_ID",
 *         },
 *         {
 *             actions: [
 *                 "SNS:Subscribe",
 *                 "SNS:Receive",
 *             ],
 *             conditions: [{
 *                 test: "StringLike",
 *                 variable: "SNS:Endpoint",
 *                 values: [`arn:aws:sqs:${sqs.region}:${sqs["account-id"]}:${sqs.name}`],
 *             }],
 *             effect: "Allow",
 *             principals: [{
 *                 type: "AWS",
 *                 identifiers: ["*"],
 *             }],
 *             resources: [`arn:aws:sns:${sns.region}:${sns["account-id"]}:${sns.name}`],
 *             sid: "__console_sub_0",
 *         },
 *     ],
 * });
 * const sqs-queue-policy = aws.iam.getPolicyDocument({
 *     policyId: `arn:aws:sqs:${sqs.region}:${sqs["account-id"]}:${sqs.name}/SQSDefaultPolicy`,
 *     statements: [{
 *         sid: "example-sns-topic",
 *         effect: "Allow",
 *         principals: [{
 *             type: "AWS",
 *             identifiers: ["*"],
 *         }],
 *         actions: ["SQS:SendMessage"],
 *         resources: [`arn:aws:sqs:${sqs.region}:${sqs["account-id"]}:${sqs.name}`],
 *         conditions: [{
 *             test: "ArnEquals",
 *             variable: "aws:SourceArn",
 *             values: [`arn:aws:sns:${sns.region}:${sns["account-id"]}:${sns.name}`],
 *         }],
 *     }],
 * });
 * // provider to manage SNS topics
 * const awsSns = new aws.Provider("awsSns", {
 *     region: sns.region,
 *     assumeRole: {
 *         roleArn: `arn:aws:iam::${sns["account-id"]}:role/${sns["role-name"]}`,
 *         sessionName: `sns-${sns.region}`,
 *     },
 * });
 * // provider to manage SQS queues
 * const awsSqs = new aws.Provider("awsSqs", {
 *     region: sqs.region,
 *     assumeRole: {
 *         roleArn: `arn:aws:iam::${sqs["account-id"]}:role/${sqs["role-name"]}`,
 *         sessionName: `sqs-${sqs.region}`,
 *     },
 * });
 * // provider to subscribe SQS to SNS (using the SQS account but the SNS region)
 * const sns2sqs = new aws.Provider("sns2sqs", {
 *     region: sns.region,
 *     assumeRole: {
 *         roleArn: `arn:aws:iam::${sqs["account-id"]}:role/${sqs["role-name"]}`,
 *         sessionName: `sns2sqs-${sns.region}`,
 *     },
 * });
 * const sns_topicTopic = new aws.sns.Topic("sns-topicTopic", {
 *     displayName: sns.display_name,
 *     policy: sns_topic_policy.then(sns_topic_policy => sns_topic_policy.json),
 * }, {
 *     provider: "aws.sns",
 * });
 * const sqs_queue = new aws.sqs.Queue("sqs-queue", {policy: sqs_queue_policy.then(sqs_queue_policy => sqs_queue_policy.json)}, {
 *     provider: "aws.sqs",
 * });
 * const sns_topicTopicSubscription = new aws.sns.TopicSubscription("sns-topicTopicSubscription", {
 *     topic: sns_topicTopic.arn,
 *     protocol: "sqs",
 *     endpoint: sqs_queue.arn,
 * }, {
 *     provider: "aws.sns2sqs",
 * });
 * ```
 *
 * ## Import
 *
 * SNS Topic Subscriptions can be imported using the `subscription arn`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:sns/topicSubscription:TopicSubscription user_updates_sqs_target arn:aws:sns:us-west-2:0123456789012:my-topic:8a21d249-4329-4871-acc6-7be709c6ea7f
 * ```
 */
class TopicSubscription extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["confirmationTimeoutInMinutes"] = state ? state.confirmationTimeoutInMinutes : undefined;
            inputs["confirmationWasAuthenticated"] = state ? state.confirmationWasAuthenticated : undefined;
            inputs["deliveryPolicy"] = state ? state.deliveryPolicy : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["endpointAutoConfirms"] = state ? state.endpointAutoConfirms : undefined;
            inputs["filterPolicy"] = state ? state.filterPolicy : undefined;
            inputs["ownerId"] = state ? state.ownerId : undefined;
            inputs["pendingConfirmation"] = state ? state.pendingConfirmation : undefined;
            inputs["protocol"] = state ? state.protocol : undefined;
            inputs["rawMessageDelivery"] = state ? state.rawMessageDelivery : undefined;
            inputs["redrivePolicy"] = state ? state.redrivePolicy : undefined;
            inputs["subscriptionRoleArn"] = state ? state.subscriptionRoleArn : undefined;
            inputs["topic"] = state ? state.topic : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.endpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpoint'");
            }
            if ((!args || args.protocol === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocol'");
            }
            if ((!args || args.topic === undefined) && !opts.urn) {
                throw new Error("Missing required property 'topic'");
            }
            inputs["confirmationTimeoutInMinutes"] = args ? args.confirmationTimeoutInMinutes : undefined;
            inputs["deliveryPolicy"] = args ? args.deliveryPolicy : undefined;
            inputs["endpoint"] = args ? args.endpoint : undefined;
            inputs["endpointAutoConfirms"] = args ? args.endpointAutoConfirms : undefined;
            inputs["filterPolicy"] = args ? args.filterPolicy : undefined;
            inputs["protocol"] = args ? args.protocol : undefined;
            inputs["rawMessageDelivery"] = args ? args.rawMessageDelivery : undefined;
            inputs["redrivePolicy"] = args ? args.redrivePolicy : undefined;
            inputs["subscriptionRoleArn"] = args ? args.subscriptionRoleArn : undefined;
            inputs["topic"] = args ? args.topic : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["confirmationWasAuthenticated"] = undefined /*out*/;
            inputs["ownerId"] = undefined /*out*/;
            inputs["pendingConfirmation"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(TopicSubscription.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing TopicSubscription resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new TopicSubscription(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of TopicSubscription.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === TopicSubscription.__pulumiType;
    }
}
exports.TopicSubscription = TopicSubscription;
/** @internal */
TopicSubscription.__pulumiType = 'aws:sns/topicSubscription:TopicSubscription';
//# sourceMappingURL=topicSubscription.js.map