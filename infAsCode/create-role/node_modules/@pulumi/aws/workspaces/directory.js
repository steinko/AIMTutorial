"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Directory = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a WorkSpaces directory in AWS WorkSpaces Service.
 *
 * > **NOTE:** AWS WorkSpaces service requires [`workspaces_DefaultRole`](https://docs.aws.amazon.com/workspaces/latest/adminguide/workspaces-access-control.html#create-default-role) IAM role to operate normally.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const workspaces = aws.iam.getPolicyDocument({
 *     statements: [{
 *         actions: ["sts:AssumeRole"],
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["workspaces.amazonaws.com"],
 *         }],
 *     }],
 * });
 * const workspacesDefault = new aws.iam.Role("workspacesDefault", {assumeRolePolicy: workspaces.then(workspaces => workspaces.json)});
 * const workspacesDefaultServiceAccess = new aws.iam.RolePolicyAttachment("workspacesDefaultServiceAccess", {
 *     role: workspacesDefault.name,
 *     policyArn: "arn:aws:iam::aws:policy/AmazonWorkSpacesServiceAccess",
 * });
 * const workspacesDefaultSelfServiceAccess = new aws.iam.RolePolicyAttachment("workspacesDefaultSelfServiceAccess", {
 *     role: workspacesDefault.name,
 *     policyArn: "arn:aws:iam::aws:policy/AmazonWorkSpacesSelfServiceAccess",
 * });
 * const exampleVpc = new aws.ec2.Vpc("exampleVpc", {cidrBlock: "10.0.0.0/16"});
 * const exampleC = new aws.ec2.Subnet("exampleC", {
 *     vpcId: exampleVpc.id,
 *     availabilityZone: "us-east-1c",
 *     cidrBlock: "10.0.2.0/24",
 * });
 * const exampleD = new aws.ec2.Subnet("exampleD", {
 *     vpcId: exampleVpc.id,
 *     availabilityZone: "us-east-1d",
 *     cidrBlock: "10.0.3.0/24",
 * });
 * const exampleDirectory = new aws.workspaces.Directory("exampleDirectory", {
 *     directoryId: exampleDirectoryservice / directoryDirectory.id,
 *     subnetIds: [
 *         exampleC.id,
 *         exampleD.id,
 *     ],
 *     tags: {
 *         Example: true,
 *     },
 *     selfServicePermissions: {
 *         changeComputeType: true,
 *         increaseVolumeSize: true,
 *         rebuildWorkspace: true,
 *         restartWorkspace: true,
 *         switchRunningMode: true,
 *     },
 *     workspaceAccessProperties: {
 *         deviceTypeAndroid: "ALLOW",
 *         deviceTypeChromeos: "ALLOW",
 *         deviceTypeIos: "ALLOW",
 *         deviceTypeLinux: "DENY",
 *         deviceTypeOsx: "ALLOW",
 *         deviceTypeWeb: "DENY",
 *         deviceTypeWindows: "DENY",
 *         deviceTypeZeroclient: "DENY",
 *     },
 *     workspaceCreationProperties: {
 *         customSecurityGroupId: aws_security_group.example.id,
 *         defaultOu: "OU=AWS,DC=Workgroup,DC=Example,DC=com",
 *         enableInternetAccess: true,
 *         enableMaintenanceMode: true,
 *         userEnabledAsLocalAdministrator: true,
 *     },
 * }, {
 *     dependsOn: [
 *         workspacesDefaultServiceAccess,
 *         workspacesDefaultSelfServiceAccess,
 *     ],
 * });
 * const exampleA = new aws.ec2.Subnet("exampleA", {
 *     vpcId: exampleVpc.id,
 *     availabilityZone: "us-east-1a",
 *     cidrBlock: "10.0.0.0/24",
 * });
 * const exampleB = new aws.ec2.Subnet("exampleB", {
 *     vpcId: exampleVpc.id,
 *     availabilityZone: "us-east-1b",
 *     cidrBlock: "10.0.1.0/24",
 * });
 * const exampleDirectoryservice_directoryDirectory = new aws.directoryservice.Directory("exampleDirectoryservice/directoryDirectory", {
 *     name: "corp.example.com",
 *     password: "#S1ncerely",
 *     size: "Small",
 *     vpcSettings: {
 *         vpcId: exampleVpc.id,
 *         subnetIds: [
 *             exampleA.id,
 *             exampleB.id,
 *         ],
 *     },
 * });
 * ```
 * ### IP Groups
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleIpGroup = new aws.workspaces.IpGroup("exampleIpGroup", {});
 * const exampleDirectory = new aws.workspaces.Directory("exampleDirectory", {
 *     directoryId: aws_directory_service_directory.example.id,
 *     ipGroupIds: [exampleIpGroup.id],
 * });
 * ```
 *
 * ## Import
 *
 * Workspaces directory can be imported using the directory ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:workspaces/directory:Directory main d-4444444444
 * ```
 */
class Directory extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["alias"] = state ? state.alias : undefined;
            inputs["customerUserName"] = state ? state.customerUserName : undefined;
            inputs["directoryId"] = state ? state.directoryId : undefined;
            inputs["directoryName"] = state ? state.directoryName : undefined;
            inputs["directoryType"] = state ? state.directoryType : undefined;
            inputs["dnsIpAddresses"] = state ? state.dnsIpAddresses : undefined;
            inputs["iamRoleId"] = state ? state.iamRoleId : undefined;
            inputs["ipGroupIds"] = state ? state.ipGroupIds : undefined;
            inputs["registrationCode"] = state ? state.registrationCode : undefined;
            inputs["selfServicePermissions"] = state ? state.selfServicePermissions : undefined;
            inputs["subnetIds"] = state ? state.subnetIds : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["workspaceAccessProperties"] = state ? state.workspaceAccessProperties : undefined;
            inputs["workspaceCreationProperties"] = state ? state.workspaceCreationProperties : undefined;
            inputs["workspaceSecurityGroupId"] = state ? state.workspaceSecurityGroupId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.directoryId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'directoryId'");
            }
            inputs["directoryId"] = args ? args.directoryId : undefined;
            inputs["ipGroupIds"] = args ? args.ipGroupIds : undefined;
            inputs["selfServicePermissions"] = args ? args.selfServicePermissions : undefined;
            inputs["subnetIds"] = args ? args.subnetIds : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["workspaceAccessProperties"] = args ? args.workspaceAccessProperties : undefined;
            inputs["workspaceCreationProperties"] = args ? args.workspaceCreationProperties : undefined;
            inputs["alias"] = undefined /*out*/;
            inputs["customerUserName"] = undefined /*out*/;
            inputs["directoryName"] = undefined /*out*/;
            inputs["directoryType"] = undefined /*out*/;
            inputs["dnsIpAddresses"] = undefined /*out*/;
            inputs["iamRoleId"] = undefined /*out*/;
            inputs["registrationCode"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["workspaceSecurityGroupId"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Directory.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Directory resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Directory(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Directory.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Directory.__pulumiType;
    }
}
exports.Directory = Directory;
/** @internal */
Directory.__pulumiType = 'aws:workspaces/directory:Directory';
//# sourceMappingURL=directory.js.map