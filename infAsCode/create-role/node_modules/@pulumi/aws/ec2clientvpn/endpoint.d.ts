import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Provides an AWS Client VPN endpoint for OpenVPN clients. For more information on usage, please see the
 * [AWS Client VPN Administrator's Guide](https://docs.aws.amazon.com/vpn/latest/clientvpn-admin/what-is.html).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ec2clientvpn.Endpoint("example", {
 *     description: "clientvpn-example",
 *     serverCertificateArn: aws_acm_certificate.cert.arn,
 *     clientCidrBlock: "10.0.0.0/16",
 *     authenticationOptions: [{
 *         type: "certificate-authentication",
 *         rootCertificateChainArn: aws_acm_certificate.root_cert.arn,
 *     }],
 *     connectionLogOptions: {
 *         enabled: true,
 *         cloudwatchLogGroup: aws_cloudwatch_log_group.lg.name,
 *         cloudwatchLogStream: aws_cloudwatch_log_stream.ls.name,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AWS Client VPN endpoints can be imported using the `id` value found via `aws ec2 describe-client-vpn-endpoints`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ec2clientvpn/endpoint:Endpoint example cvpn-endpoint-0ac3a1abbccddd666
 * ```
 */
export declare class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint;
    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Endpoint;
    /**
     * The ARN of the Client VPN endpoint.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * Information about the authentication method to be used to authenticate clients.
     */
    readonly authenticationOptions: pulumi.Output<outputs.ec2clientvpn.EndpointAuthenticationOption[]>;
    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     */
    readonly clientCidrBlock: pulumi.Output<string>;
    /**
     * Information about the client connection logging options.
     */
    readonly connectionLogOptions: pulumi.Output<outputs.ec2clientvpn.EndpointConnectionLogOptions>;
    /**
     * A brief description of the Client VPN endpoint.
     */
    readonly description: pulumi.Output<string | undefined>;
    /**
     * The DNS name to be used by clients when establishing their VPN session.
     */
    readonly dnsName: pulumi.Output<string>;
    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
     */
    readonly dnsServers: pulumi.Output<string[] | undefined>;
    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     */
    readonly selfServicePortal: pulumi.Output<string | undefined>;
    /**
     * The ARN of the ACM server certificate.
     */
    readonly serverCertificateArn: pulumi.Output<string>;
    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     */
    readonly splitTunnel: pulumi.Output<boolean | undefined>;
    /**
     * The current state of the Client VPN endpoint.
     */
    readonly status: pulumi.Output<string>;
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     */
    readonly transportProtocol: pulumi.Output<string | undefined>;
    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * The ARN of the Client VPN endpoint.
     */
    arn?: pulumi.Input<string>;
    /**
     * Information about the authentication method to be used to authenticate clients.
     */
    authenticationOptions?: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.EndpointAuthenticationOption>[]>;
    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     */
    clientCidrBlock?: pulumi.Input<string>;
    /**
     * Information about the client connection logging options.
     */
    connectionLogOptions?: pulumi.Input<inputs.ec2clientvpn.EndpointConnectionLogOptions>;
    /**
     * A brief description of the Client VPN endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * The DNS name to be used by clients when establishing their VPN session.
     */
    dnsName?: pulumi.Input<string>;
    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     */
    selfServicePortal?: pulumi.Input<string>;
    /**
     * The ARN of the ACM server certificate.
     */
    serverCertificateArn?: pulumi.Input<string>;
    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     */
    splitTunnel?: pulumi.Input<boolean>;
    /**
     * The current state of the Client VPN endpoint.
     */
    status?: pulumi.Input<string>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider `defaultTags` configuration block.
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     */
    transportProtocol?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * Information about the authentication method to be used to authenticate clients.
     */
    authenticationOptions: pulumi.Input<pulumi.Input<inputs.ec2clientvpn.EndpointAuthenticationOption>[]>;
    /**
     * The IPv4 address range, in CIDR notation, from which to assign client IP addresses. The address range cannot overlap with the local CIDR of the VPC in which the associated subnet is located, or the routes that you add manually. The address range cannot be changed after the Client VPN endpoint has been created. The CIDR block should be /22 or greater.
     */
    clientCidrBlock: pulumi.Input<string>;
    /**
     * Information about the client connection logging options.
     */
    connectionLogOptions: pulumi.Input<inputs.ec2clientvpn.EndpointConnectionLogOptions>;
    /**
     * A brief description of the Client VPN endpoint.
     */
    description?: pulumi.Input<string>;
    /**
     * Information about the DNS servers to be used for DNS resolution. A Client VPN endpoint can have up to two DNS servers. If no DNS server is specified, the DNS address of the VPC that is to be associated with Client VPN endpoint is used as the DNS server.
     */
    dnsServers?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Specify whether to enable the self-service portal for the Client VPN endpoint. Values can be `enabled` or `disabled`. Default value is `disabled`.
     */
    selfServicePortal?: pulumi.Input<string>;
    /**
     * The ARN of the ACM server certificate.
     */
    serverCertificateArn: pulumi.Input<string>;
    /**
     * Indicates whether split-tunnel is enabled on VPN endpoint. Default value is `false`.
     */
    splitTunnel?: pulumi.Input<boolean>;
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The transport protocol to be used by the VPN session. Default value is `udp`.
     */
    transportProtocol?: pulumi.Input<string>;
}
