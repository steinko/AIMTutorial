"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.VaultNotifications = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AWS Backup vault notifications resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testTopic = new aws.sns.Topic("testTopic", {});
 * const testPolicyDocument = testTopic.arn.apply(arn => aws.iam.getPolicyDocument({
 *     policyId: "__default_policy_ID",
 *     statements: [{
 *         actions: ["SNS:Publish"],
 *         effect: "Allow",
 *         principals: [{
 *             type: "Service",
 *             identifiers: ["backup.amazonaws.com"],
 *         }],
 *         resources: [arn],
 *         sid: "__default_statement_ID",
 *     }],
 * }));
 * const testTopicPolicy = new aws.sns.TopicPolicy("testTopicPolicy", {
 *     arn: testTopic.arn,
 *     policy: testPolicyDocument.apply(testPolicyDocument => testPolicyDocument.json),
 * });
 * const testVaultNotifications = new aws.backup.VaultNotifications("testVaultNotifications", {
 *     backupVaultName: "example_backup_vault",
 *     snsTopicArn: testTopic.arn,
 *     backupVaultEvents: [
 *         "BACKUP_JOB_STARTED",
 *         "RESTORE_JOB_COMPLETED",
 *     ],
 * });
 * ```
 *
 * ## Import
 *
 * Backup vault notifications can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:backup/vaultNotifications:VaultNotifications test TestVault
 * ```
 */
class VaultNotifications extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["backupVaultArn"] = state ? state.backupVaultArn : undefined;
            inputs["backupVaultEvents"] = state ? state.backupVaultEvents : undefined;
            inputs["backupVaultName"] = state ? state.backupVaultName : undefined;
            inputs["snsTopicArn"] = state ? state.snsTopicArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.backupVaultEvents === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupVaultEvents'");
            }
            if ((!args || args.backupVaultName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'backupVaultName'");
            }
            if ((!args || args.snsTopicArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'snsTopicArn'");
            }
            inputs["backupVaultEvents"] = args ? args.backupVaultEvents : undefined;
            inputs["backupVaultName"] = args ? args.backupVaultName : undefined;
            inputs["snsTopicArn"] = args ? args.snsTopicArn : undefined;
            inputs["backupVaultArn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(VaultNotifications.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing VaultNotifications resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new VaultNotifications(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of VaultNotifications.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === VaultNotifications.__pulumiType;
    }
}
exports.VaultNotifications = VaultNotifications;
/** @internal */
VaultNotifications.__pulumiType = 'aws:backup/vaultNotifications:VaultNotifications';
//# sourceMappingURL=vaultNotifications.js.map