"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./getPlan"), exports);
__exportStar(require("./getSelection"), exports);
__exportStar(require("./getVault"), exports);
__exportStar(require("./globalSettings"), exports);
__exportStar(require("./plan"), exports);
__exportStar(require("./regionSettings"), exports);
__exportStar(require("./selection"), exports);
__exportStar(require("./vault"), exports);
__exportStar(require("./vaultLockConfiguration"), exports);
__exportStar(require("./vaultNotifications"), exports);
__exportStar(require("./vaultPolicy"), exports);
// Import resources to register:
const globalSettings_1 = require("./globalSettings");
const plan_1 = require("./plan");
const regionSettings_1 = require("./regionSettings");
const selection_1 = require("./selection");
const vault_1 = require("./vault");
const vaultLockConfiguration_1 = require("./vaultLockConfiguration");
const vaultNotifications_1 = require("./vaultNotifications");
const vaultPolicy_1 = require("./vaultPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:backup/globalSettings:GlobalSettings":
                return new globalSettings_1.GlobalSettings(name, undefined, { urn });
            case "aws:backup/plan:Plan":
                return new plan_1.Plan(name, undefined, { urn });
            case "aws:backup/regionSettings:RegionSettings":
                return new regionSettings_1.RegionSettings(name, undefined, { urn });
            case "aws:backup/selection:Selection":
                return new selection_1.Selection(name, undefined, { urn });
            case "aws:backup/vault:Vault":
                return new vault_1.Vault(name, undefined, { urn });
            case "aws:backup/vaultLockConfiguration:VaultLockConfiguration":
                return new vaultLockConfiguration_1.VaultLockConfiguration(name, undefined, { urn });
            case "aws:backup/vaultNotifications:VaultNotifications":
                return new vaultNotifications_1.VaultNotifications(name, undefined, { urn });
            case "aws:backup/vaultPolicy:VaultPolicy":
                return new vaultPolicy_1.VaultPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "backup/globalSettings", _module);
pulumi.runtime.registerResourceModule("aws", "backup/plan", _module);
pulumi.runtime.registerResourceModule("aws", "backup/regionSettings", _module);
pulumi.runtime.registerResourceModule("aws", "backup/selection", _module);
pulumi.runtime.registerResourceModule("aws", "backup/vault", _module);
pulumi.runtime.registerResourceModule("aws", "backup/vaultLockConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "backup/vaultNotifications", _module);
pulumi.runtime.registerResourceModule("aws", "backup/vaultPolicy", _module);
//# sourceMappingURL=index.js.map