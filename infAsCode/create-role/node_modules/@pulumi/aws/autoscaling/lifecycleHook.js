"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleHook = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an AutoScaling Lifecycle Hook resource.
 *
 * > **NOTE:** This provider has two types of ways you can add lifecycle hooks - via
 * the `initialLifecycleHook` attribute from the
 * `aws.autoscaling.Group`
 * resource, or via this one. Hooks added via this resource will not be added
 * until the autoscaling group has been created, and depending on your
 * `capacity`
 * settings, after the initial instances have been launched, creating unintended
 * behavior. If you need hooks to run on all instances, add them with
 * `initialLifecycleHook` in
 * `aws.autoscaling.Group`,
 * but take care to not duplicate those hooks with this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foobarGroup = new aws.autoscaling.Group("foobarGroup", {
 *     availabilityZones: ["us-west-2a"],
 *     healthCheckType: "EC2",
 *     terminationPolicies: ["OldestInstance"],
 *     tags: [{
 *         key: "Foo",
 *         value: "foo-bar",
 *         propagateAtLaunch: true,
 *     }],
 * });
 * const foobarLifecycleHook = new aws.autoscaling.LifecycleHook("foobarLifecycleHook", {
 *     autoscalingGroupName: foobarGroup.name,
 *     defaultResult: "CONTINUE",
 *     heartbeatTimeout: 2000,
 *     lifecycleTransition: "autoscaling:EC2_INSTANCE_LAUNCHING",
 *     notificationMetadata: `{
 *   "foo": "bar"
 * }
 * `,
 *     notificationTargetArn: "arn:aws:sqs:us-east-1:444455556666:queue1*",
 *     roleArn: "arn:aws:iam::123456789012:role/S3Access",
 * });
 * ```
 *
 * ## Import
 *
 * AutoScaling Lifecycle Hooks can be imported using the role autoscaling_group_name and name separated by `/`.
 *
 * ```sh
 *  $ pulumi import aws:autoscaling/lifecycleHook:LifecycleHook test-lifecycle-hook asg-name/lifecycle-hook-name
 * ```
 */
class LifecycleHook extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["autoscalingGroupName"] = state ? state.autoscalingGroupName : undefined;
            inputs["defaultResult"] = state ? state.defaultResult : undefined;
            inputs["heartbeatTimeout"] = state ? state.heartbeatTimeout : undefined;
            inputs["lifecycleTransition"] = state ? state.lifecycleTransition : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationMetadata"] = state ? state.notificationMetadata : undefined;
            inputs["notificationTargetArn"] = state ? state.notificationTargetArn : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.autoscalingGroupName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoscalingGroupName'");
            }
            if ((!args || args.lifecycleTransition === undefined) && !opts.urn) {
                throw new Error("Missing required property 'lifecycleTransition'");
            }
            inputs["autoscalingGroupName"] = args ? args.autoscalingGroupName : undefined;
            inputs["defaultResult"] = args ? args.defaultResult : undefined;
            inputs["heartbeatTimeout"] = args ? args.heartbeatTimeout : undefined;
            inputs["lifecycleTransition"] = args ? args.lifecycleTransition : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationMetadata"] = args ? args.notificationMetadata : undefined;
            inputs["notificationTargetArn"] = args ? args.notificationTargetArn : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LifecycleHook.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LifecycleHook resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LifecycleHook(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LifecycleHook.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LifecycleHook.__pulumiType;
    }
}
exports.LifecycleHook = LifecycleHook;
/** @internal */
LifecycleHook.__pulumiType = 'aws:autoscaling/lifecycleHook:LifecycleHook';
//# sourceMappingURL=lifecycleHook.js.map