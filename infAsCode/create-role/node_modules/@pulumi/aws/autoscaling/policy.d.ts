import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Provides an AutoScaling Scaling Policy resource.
 *
 * > **NOTE:** You may want to omit `desiredCapacity` attribute from attached `aws.autoscaling.Group`
 * when using autoscaling policies. It's good practice to pick either
 * [manual](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-manual-scaling.html)
 * or [dynamic](https://docs.aws.amazon.com/AutoScaling/latest/DeveloperGuide/as-scale-based-on-demand.html)
 * (policy-based) scaling.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bar = new aws.autoscaling.Group("bar", {
 *     availabilityZones: ["us-east-1a"],
 *     maxSize: 5,
 *     minSize: 2,
 *     healthCheckGracePeriod: 300,
 *     healthCheckType: "ELB",
 *     forceDelete: true,
 *     launchConfiguration: aws_launch_configuration.foo.name,
 * });
 * const bat = new aws.autoscaling.Policy("bat", {
 *     scalingAdjustment: 4,
 *     adjustmentType: "ChangeInCapacity",
 *     cooldown: 300,
 *     autoscalingGroupName: bar.name,
 * });
 * ```
 *
 * ## Import
 *
 * AutoScaling scaling policy can be imported using the role autoscaling_group_name and name separated by `/`.
 *
 * ```sh
 *  $ pulumi import aws:autoscaling/policy:Policy test-policy asg-name/policy-name
 * ```
 */
export declare class Policy extends pulumi.CustomResource {
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PolicyState, opts?: pulumi.CustomResourceOptions): Policy;
    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Policy;
    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     */
    readonly adjustmentType: pulumi.Output<string | undefined>;
    /**
     * The ARN assigned by AWS to the scaling policy.
     */
    readonly arn: pulumi.Output<string>;
    /**
     * The name of the autoscaling group.
     */
    readonly autoscalingGroupName: pulumi.Output<string>;
    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     */
    readonly cooldown: pulumi.Output<number | undefined>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     */
    readonly estimatedInstanceWarmup: pulumi.Output<number | undefined>;
    /**
     * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     */
    readonly metricAggregationType: pulumi.Output<string>;
    /**
     * Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
     */
    readonly minAdjustmentMagnitude: pulumi.Output<number | undefined>;
    /**
     * The name of the dimension.
     */
    readonly name: pulumi.Output<string>;
    /**
     * The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     */
    readonly policyType: pulumi.Output<string | undefined>;
    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     */
    readonly predictiveScalingConfiguration: pulumi.Output<outputs.autoscaling.PolicyPredictiveScalingConfiguration | undefined>;
    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     */
    readonly scalingAdjustment: pulumi.Output<number | undefined>;
    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     */
    readonly stepAdjustments: pulumi.Output<outputs.autoscaling.PolicyStepAdjustment[] | undefined>;
    /**
     * A target tracking policy. These have the following structure:
     */
    readonly targetTrackingConfiguration: pulumi.Output<outputs.autoscaling.PolicyTargetTrackingConfiguration | undefined>;
    /**
     * Create a Policy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PolicyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Policy resources.
 */
export interface PolicyState {
    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The ARN assigned by AWS to the scaling policy.
     */
    arn?: pulumi.Input<string>;
    /**
     * The name of the autoscaling group.
     */
    autoscalingGroupName?: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     */
    metricAggregationType?: pulumi.Input<string>;
    /**
     * Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * The name of the dimension.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     */
    policyType?: pulumi.Input<string>;
    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     */
    predictiveScalingConfiguration?: pulumi.Input<inputs.autoscaling.PolicyPredictiveScalingConfiguration>;
    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     */
    scalingAdjustment?: pulumi.Input<number>;
    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.autoscaling.PolicyStepAdjustment>[]>;
    /**
     * A target tracking policy. These have the following structure:
     */
    targetTrackingConfiguration?: pulumi.Input<inputs.autoscaling.PolicyTargetTrackingConfiguration>;
}
/**
 * The set of arguments for constructing a Policy resource.
 */
export interface PolicyArgs {
    /**
     * Specifies whether the adjustment is an absolute number or a percentage of the current capacity. Valid values are `ChangeInCapacity`, `ExactCapacity`, and `PercentChangeInCapacity`.
     */
    adjustmentType?: pulumi.Input<string>;
    /**
     * The name of the autoscaling group.
     */
    autoscalingGroupName: pulumi.Input<string>;
    /**
     * The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start.
     */
    cooldown?: pulumi.Input<number>;
    /**
     * The estimated time, in seconds, until a newly launched instance will contribute CloudWatch metrics. Without a value, AWS will default to the group's specified cooldown period.
     */
    estimatedInstanceWarmup?: pulumi.Input<number>;
    /**
     * The aggregation type for the policy's metrics. Valid values are "Minimum", "Maximum", and "Average". Without a value, AWS will treat the aggregation type as "Average".
     */
    metricAggregationType?: pulumi.Input<string>;
    /**
     * Minimum value to scale by when `adjustmentType` is set to `PercentChangeInCapacity`.
     */
    minAdjustmentMagnitude?: pulumi.Input<number>;
    /**
     * The name of the dimension.
     */
    name?: pulumi.Input<string>;
    /**
     * The policy type, either "SimpleScaling", "StepScaling", "TargetTrackingScaling", or "PredictiveScaling". If this value isn't provided, AWS will default to "SimpleScaling."
     */
    policyType?: pulumi.Input<string>;
    /**
     * The predictive scaling policy configuration to use with Amazon EC2 Auto Scaling.
     */
    predictiveScalingConfiguration?: pulumi.Input<inputs.autoscaling.PolicyPredictiveScalingConfiguration>;
    /**
     * The number of members by which to
     * scale, when the adjustment bounds are breached. A positive value scales
     * up. A negative value scales down.
     */
    scalingAdjustment?: pulumi.Input<number>;
    /**
     * A set of adjustments that manage
     * group scaling. These have the following structure:
     */
    stepAdjustments?: pulumi.Input<pulumi.Input<inputs.autoscaling.PolicyStepAdjustment>[]>;
    /**
     * A target tracking policy. These have the following structure:
     */
    targetTrackingConfiguration?: pulumi.Input<inputs.autoscaling.PolicyTargetTrackingConfiguration>;
}
