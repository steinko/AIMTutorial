"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.AccessKey = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an IAM access key. This is a set of credentials that allow API requests to be made as an IAM user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const lbUser = new aws.iam.User("lbUser", {path: "/system/"});
 * const lbAccessKey = new aws.iam.AccessKey("lbAccessKey", {
 *     user: lbUser.name,
 *     pgpKey: "keybase:some_person_that_exists",
 * });
 * const lbRo = new aws.iam.UserPolicy("lbRo", {
 *     user: lbUser.name,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "ec2:Describe*"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * });
 * export const secret = lbAccessKey.encryptedSecret;
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testUser = new aws.iam.User("testUser", {path: "/test/"});
 * const testAccessKey = new aws.iam.AccessKey("testAccessKey", {user: testUser.name});
 * export const awsIamSmtpPasswordV4 = testAccessKey.sesSmtpPasswordV4;
 * ```
 *
 * ## Import
 *
 * IAM Access Keys can be imported using the identifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:iam/accessKey:AccessKey example AKIA1234567890
 * ```
 *
 *  Resource attributes such as `encrypted_secret`, `key_fingerprint`, `pgp_key`, `secret`, `ses_smtp_password_v4`, and `encrypted_ses_smtp_password_v4` are not available for imported resources as this information cannot be read from the IAM API.
 */
class AccessKey extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["createDate"] = state ? state.createDate : undefined;
            inputs["encryptedSecret"] = state ? state.encryptedSecret : undefined;
            inputs["encryptedSesSmtpPasswordV4"] = state ? state.encryptedSesSmtpPasswordV4 : undefined;
            inputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            inputs["pgpKey"] = state ? state.pgpKey : undefined;
            inputs["secret"] = state ? state.secret : undefined;
            inputs["sesSmtpPasswordV4"] = state ? state.sesSmtpPasswordV4 : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["user"] = state ? state.user : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.user === undefined) && !opts.urn) {
                throw new Error("Missing required property 'user'");
            }
            inputs["pgpKey"] = args ? args.pgpKey : undefined;
            inputs["status"] = args ? args.status : undefined;
            inputs["user"] = args ? args.user : undefined;
            inputs["createDate"] = undefined /*out*/;
            inputs["encryptedSecret"] = undefined /*out*/;
            inputs["encryptedSesSmtpPasswordV4"] = undefined /*out*/;
            inputs["keyFingerprint"] = undefined /*out*/;
            inputs["secret"] = undefined /*out*/;
            inputs["sesSmtpPasswordV4"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(AccessKey.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing AccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new AccessKey(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of AccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AccessKey.__pulumiType;
    }
}
exports.AccessKey = AccessKey;
/** @internal */
AccessKey.__pulumiType = 'aws:iam/accessKey:AccessKey';
//# sourceMappingURL=accessKey.js.map