"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.getServiceAccountOutput = exports.getServiceAccount = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Use this data source to get the Account ID of the [AWS CloudTrail Service Account](http://docs.aws.amazon.com/awscloudtrail/latest/userguide/cloudtrail-supported-regions.html)
 * in a given region for the purpose of allowing CloudTrail to store trail data in S3.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const main = pulumi.output(aws.cloudtrail.getServiceAccount());
 * const bucket = new aws.s3.Bucket("bucket", {
 *     forceDestroy: true,
 *     policy: pulumi.interpolate`{
 *   "Version": "2008-10-17",
 *   "Statement": [
 *     {
 *       "Sid": "Put bucket policy needed for trails",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "${main.arn}"
 *       },
 *       "Action": "s3:PutObject",
 *       "Resource": "arn:aws:s3:::tf-cloudtrail-logging-test-bucket/*"
 *     },
 *     {
 *       "Sid": "Get bucket policy needed for trails",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "${main.arn}"
 *       },
 *       "Action": "s3:GetBucketAcl",
 *       "Resource": "arn:aws:s3:::tf-cloudtrail-logging-test-bucket"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 */
function getServiceAccount(args, opts) {
    args = args || {};
    if (!opts) {
        opts = {};
    }
    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("aws:cloudtrail/getServiceAccount:getServiceAccount", {
        "region": args.region,
    }, opts);
}
exports.getServiceAccount = getServiceAccount;
function getServiceAccountOutput(args, opts) {
    return pulumi.output(args).apply(a => getServiceAccount(a, opts));
}
exports.getServiceAccountOutput = getServiceAccountOutput;
//# sourceMappingURL=getServiceAccount.js.map