"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./accessPoint"), exports);
__exportStar(require("./accountPublicAccessBlock"), exports);
__exportStar(require("./analyticsConfiguration"), exports);
__exportStar(require("./bucket"), exports);
__exportStar(require("./bucketIntelligentTieringConfiguration"), exports);
__exportStar(require("./bucketMetric"), exports);
__exportStar(require("./bucketNotification"), exports);
__exportStar(require("./bucketObject"), exports);
__exportStar(require("./bucketOwnershipControls"), exports);
__exportStar(require("./bucketPolicy"), exports);
__exportStar(require("./bucketPublicAccessBlock"), exports);
__exportStar(require("./bucketReplicationConfig"), exports);
__exportStar(require("./cannedAcl"), exports);
__exportStar(require("./getBucket"), exports);
__exportStar(require("./getBucketObject"), exports);
__exportStar(require("./getBucketObjects"), exports);
__exportStar(require("./getCanonicalUserId"), exports);
__exportStar(require("./inventory"), exports);
__exportStar(require("./objectCopy"), exports);
__exportStar(require("./routingRules"), exports);
__exportStar(require("./s3Mixins"), exports);
// Export enums:
__exportStar(require("../types/enums/s3"), exports);
// Import resources to register:
const accessPoint_1 = require("./accessPoint");
const accountPublicAccessBlock_1 = require("./accountPublicAccessBlock");
const analyticsConfiguration_1 = require("./analyticsConfiguration");
const bucket_1 = require("./bucket");
const bucketIntelligentTieringConfiguration_1 = require("./bucketIntelligentTieringConfiguration");
const bucketMetric_1 = require("./bucketMetric");
const bucketNotification_1 = require("./bucketNotification");
const bucketObject_1 = require("./bucketObject");
const bucketOwnershipControls_1 = require("./bucketOwnershipControls");
const bucketPolicy_1 = require("./bucketPolicy");
const bucketPublicAccessBlock_1 = require("./bucketPublicAccessBlock");
const bucketReplicationConfig_1 = require("./bucketReplicationConfig");
const inventory_1 = require("./inventory");
const objectCopy_1 = require("./objectCopy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:s3/accessPoint:AccessPoint":
                return new accessPoint_1.AccessPoint(name, undefined, { urn });
            case "aws:s3/accountPublicAccessBlock:AccountPublicAccessBlock":
                return new accountPublicAccessBlock_1.AccountPublicAccessBlock(name, undefined, { urn });
            case "aws:s3/analyticsConfiguration:AnalyticsConfiguration":
                return new analyticsConfiguration_1.AnalyticsConfiguration(name, undefined, { urn });
            case "aws:s3/bucket:Bucket":
                return new bucket_1.Bucket(name, undefined, { urn });
            case "aws:s3/bucketIntelligentTieringConfiguration:BucketIntelligentTieringConfiguration":
                return new bucketIntelligentTieringConfiguration_1.BucketIntelligentTieringConfiguration(name, undefined, { urn });
            case "aws:s3/bucketMetric:BucketMetric":
                return new bucketMetric_1.BucketMetric(name, undefined, { urn });
            case "aws:s3/bucketNotification:BucketNotification":
                return new bucketNotification_1.BucketNotification(name, undefined, { urn });
            case "aws:s3/bucketObject:BucketObject":
                return new bucketObject_1.BucketObject(name, undefined, { urn });
            case "aws:s3/bucketOwnershipControls:BucketOwnershipControls":
                return new bucketOwnershipControls_1.BucketOwnershipControls(name, undefined, { urn });
            case "aws:s3/bucketPolicy:BucketPolicy":
                return new bucketPolicy_1.BucketPolicy(name, undefined, { urn });
            case "aws:s3/bucketPublicAccessBlock:BucketPublicAccessBlock":
                return new bucketPublicAccessBlock_1.BucketPublicAccessBlock(name, undefined, { urn });
            case "aws:s3/bucketReplicationConfig:BucketReplicationConfig":
                return new bucketReplicationConfig_1.BucketReplicationConfig(name, undefined, { urn });
            case "aws:s3/inventory:Inventory":
                return new inventory_1.Inventory(name, undefined, { urn });
            case "aws:s3/objectCopy:ObjectCopy":
                return new objectCopy_1.ObjectCopy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "s3/accessPoint", _module);
pulumi.runtime.registerResourceModule("aws", "s3/accountPublicAccessBlock", _module);
pulumi.runtime.registerResourceModule("aws", "s3/analyticsConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucket", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketIntelligentTieringConfiguration", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketMetric", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketNotification", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketObject", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketOwnershipControls", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketPublicAccessBlock", _module);
pulumi.runtime.registerResourceModule("aws", "s3/bucketReplicationConfig", _module);
pulumi.runtime.registerResourceModule("aws", "s3/inventory", _module);
pulumi.runtime.registerResourceModule("aws", "s3/objectCopy", _module);
//# sourceMappingURL=index.js.map