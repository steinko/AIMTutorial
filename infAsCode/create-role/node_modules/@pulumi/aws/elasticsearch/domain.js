"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Domain = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an AWS Elasticsearch Domain.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.elasticsearch.Domain("example", {
 *     clusterConfig: {
 *         instanceType: "r4.large.elasticsearch",
 *     },
 *     elasticsearchVersion: "7.10",
 *     tags: {
 *         Domain: "TestDomain",
 *     },
 * });
 * ```
 * ### Access Policy
 *
 * > See also: `aws.elasticsearch.DomainPolicy` resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const domain = config.get("domain") || "tf-test";
 * const currentRegion = aws.getRegion({});
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const example = new aws.elasticsearch.Domain("example", {accessPolicies: Promise.all([currentRegion, currentCallerIdentity]).then(([currentRegion, currentCallerIdentity]) => `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "es:*",
 *       "Principal": "*",
 *       "Effect": "Allow",
 *       "Resource": "arn:aws:es:${currentRegion.name}:${currentCallerIdentity.accountId}:domain/${domain}/*",
 *       "Condition": {
 *         "IpAddress": {"aws:SourceIp": ["66.193.100.22/32"]}
 *       }
 *     }
 *   ]
 * }
 * `)});
 * ```
 * ### Log Publishing to CloudWatch Logs
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("exampleLogGroup", {});
 * const exampleLogResourcePolicy = new aws.cloudwatch.LogResourcePolicy("exampleLogResourcePolicy", {
 *     policyName: "example",
 *     policyDocument: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "es.amazonaws.com"
 *       },
 *       "Action": [
 *         "logs:PutLogEvents",
 *         "logs:PutLogEventsBatch",
 *         "logs:CreateLogStream"
 *       ],
 *       "Resource": "arn:aws:logs:*"
 *     }
 *   ]
 * }
 * `,
 * });
 * // .. other configuration ...
 * const exampleDomain = new aws.elasticsearch.Domain("exampleDomain", {logPublishingOptions: [{
 *     cloudwatchLogGroupArn: exampleLogGroup.arn,
 *     logType: "INDEX_SLOW_LOGS",
 * }]});
 * ```
 * ### VPC based ES
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const vpc = config.requireObject("vpc");
 * const domain = config.get("domain") || "tf-test";
 * const selectedVpc = aws.ec2.getVpc({
 *     tags: {
 *         Name: vpc,
 *     },
 * });
 * const selectedSubnetIds = selectedVpc.then(selectedVpc => aws.ec2.getSubnetIds({
 *     vpcId: selectedVpc.id,
 *     tags: {
 *         Tier: "private",
 *     },
 * }));
 * const currentRegion = aws.getRegion({});
 * const currentCallerIdentity = aws.getCallerIdentity({});
 * const esSecurityGroup = new aws.ec2.SecurityGroup("esSecurityGroup", {
 *     description: "Managed by Pulumi",
 *     vpcId: selectedVpc.then(selectedVpc => selectedVpc.id),
 *     ingress: [{
 *         fromPort: 443,
 *         toPort: 443,
 *         protocol: "tcp",
 *         cidrBlocks: [selectedVpc.then(selectedVpc => selectedVpc.cidrBlock)],
 *     }],
 * });
 * const esServiceLinkedRole = new aws.iam.ServiceLinkedRole("esServiceLinkedRole", {awsServiceName: "es.amazonaws.com"});
 * const esDomain = new aws.elasticsearch.Domain("esDomain", {
 *     elasticsearchVersion: "6.3",
 *     clusterConfig: {
 *         instanceType: "m4.large.elasticsearch",
 *         zoneAwarenessEnabled: true,
 *     },
 *     vpcOptions: {
 *         subnetIds: [
 *             selectedSubnetIds.then(selectedSubnetIds => selectedSubnetIds.ids?[0]),
 *             selectedSubnetIds.then(selectedSubnetIds => selectedSubnetIds.ids?[1]),
 *         ],
 *         securityGroupIds: [esSecurityGroup.id],
 *     },
 *     advancedOptions: {
 *         "rest.action.multi.allow_explicit_index": "true",
 *     },
 *     accessPolicies: Promise.all([currentRegion, currentCallerIdentity]).then(([currentRegion, currentCallerIdentity]) => `{
 * 	"Version": "2012-10-17",
 * 	"Statement": [
 * 		{
 * 			"Action": "es:*",
 * 			"Principal": "*",
 * 			"Effect": "Allow",
 * 			"Resource": "arn:aws:es:${currentRegion.name}:${currentCallerIdentity.accountId}:domain/${domain}/*"
 * 		}
 * 	]
 * }
 * `),
 *     tags: {
 *         Domain: "TestDomain",
 *     },
 * }, {
 *     dependsOn: [esServiceLinkedRole],
 * });
 * ```
 *
 * ## Import
 *
 * Elasticsearch domains can be imported using the `domain_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticsearch/domain:Domain example domain_name
 * ```
 */
class Domain extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessPolicies"] = state ? state.accessPolicies : undefined;
            inputs["advancedOptions"] = state ? state.advancedOptions : undefined;
            inputs["advancedSecurityOptions"] = state ? state.advancedSecurityOptions : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            inputs["cognitoOptions"] = state ? state.cognitoOptions : undefined;
            inputs["domainEndpointOptions"] = state ? state.domainEndpointOptions : undefined;
            inputs["domainId"] = state ? state.domainId : undefined;
            inputs["domainName"] = state ? state.domainName : undefined;
            inputs["ebsOptions"] = state ? state.ebsOptions : undefined;
            inputs["elasticsearchVersion"] = state ? state.elasticsearchVersion : undefined;
            inputs["encryptAtRest"] = state ? state.encryptAtRest : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["kibanaEndpoint"] = state ? state.kibanaEndpoint : undefined;
            inputs["logPublishingOptions"] = state ? state.logPublishingOptions : undefined;
            inputs["nodeToNodeEncryption"] = state ? state.nodeToNodeEncryption : undefined;
            inputs["snapshotOptions"] = state ? state.snapshotOptions : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["vpcOptions"] = state ? state.vpcOptions : undefined;
        }
        else {
            const args = argsOrState;
            inputs["accessPolicies"] = args ? args.accessPolicies : undefined;
            inputs["advancedOptions"] = args ? args.advancedOptions : undefined;
            inputs["advancedSecurityOptions"] = args ? args.advancedSecurityOptions : undefined;
            inputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            inputs["cognitoOptions"] = args ? args.cognitoOptions : undefined;
            inputs["domainEndpointOptions"] = args ? args.domainEndpointOptions : undefined;
            inputs["domainName"] = args ? args.domainName : undefined;
            inputs["ebsOptions"] = args ? args.ebsOptions : undefined;
            inputs["elasticsearchVersion"] = args ? args.elasticsearchVersion : undefined;
            inputs["encryptAtRest"] = args ? args.encryptAtRest : undefined;
            inputs["logPublishingOptions"] = args ? args.logPublishingOptions : undefined;
            inputs["nodeToNodeEncryption"] = args ? args.nodeToNodeEncryption : undefined;
            inputs["snapshotOptions"] = args ? args.snapshotOptions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["vpcOptions"] = args ? args.vpcOptions : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["domainId"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["kibanaEndpoint"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Domain.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Domain resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Domain(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Domain.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Domain.__pulumiType;
    }
}
exports.Domain = Domain;
/** @internal */
Domain.__pulumiType = 'aws:elasticsearch/domain:Domain';
//# sourceMappingURL=domain.js.map