"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalCluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an DocumentDB Global Cluster. A global cluster consists of one primary region and up to five read-only secondary regions. You issue write operations directly to the primary cluster in the primary region and Amazon DocumentDB automatically replicates the data to the secondary regions using dedicated infrastructure.
 *
 * More information about DocumentDB Global Clusters can be found in the [DocumentDB Developer Guide](https://docs.aws.amazon.com/documentdb/latest/developerguide/global-clusters.html).
 *
 * ## Example Usage
 * ### New DocumentDB Global Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.Provider("primary", {region: "us-east-2"});
 * const secondary = new aws.Provider("secondary", {region: "us-east-1"});
 * const example = new aws.docdb.GlobalCluster("example", {
 *     globalClusterIdentifier: "global-test",
 *     engine: "docdb",
 *     engineVersion: "4.0.0",
 * });
 * const primaryCluster = new aws.docdb.Cluster("primaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-primary-cluster",
 *     masterUsername: "username",
 *     masterPassword: "somepass123",
 *     globalClusterIdentifier: example.id,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const primaryClusterInstance = new aws.docdb.ClusterInstance("primaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-primary-cluster-instance",
 *     clusterIdentifier: primaryCluster.id,
 *     instanceClass: "db.r5.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.primary,
 * });
 * const secondaryCluster = new aws.docdb.Cluster("secondaryCluster", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     clusterIdentifier: "test-secondary-cluster",
 *     globalClusterIdentifier: example.id,
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 * });
 * const secondaryClusterInstance = new aws.docdb.ClusterInstance("secondaryClusterInstance", {
 *     engine: example.engine,
 *     engineVersion: example.engineVersion,
 *     identifier: "test-secondary-cluster-instance",
 *     clusterIdentifier: secondaryCluster.id,
 *     instanceClass: "db.r5.large",
 *     dbSubnetGroupName: "default",
 * }, {
 *     provider: aws.secondary,
 *     dependsOn: [primaryClusterInstance],
 * });
 * ```
 * ### New Global Cluster From Existing DB Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration ...
 * const exampleCluster = new aws.docdb.Cluster("exampleCluster", {});
 * const exampleGlobalCluster = new aws.docdb.GlobalCluster("exampleGlobalCluster", {
 *     globalClusterIdentifier: "example",
 *     sourceDbClusterIdentifier: exampleCluster.arn,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_docdb_global_cluster` can be imported by using the Global Cluster identifier, e.g.
 *
 * ```sh
 *  $ pulumi import aws:docdb/globalCluster:GlobalCluster example example
 * ```
 *
 *  Certain resource arguments, like `source_db_cluster_identifier`, do not have an API method for reading the information after creation. If the argument is set in the Terraform configuration on an imported resource, Terraform will always show a difference. To workaround this behavior, either omit the argument from the Terraform configuration or use [`ignore_changes`](https://www.terraform.io/docs/configuration/meta-arguments/lifecycle.html#ignore_changes) to hide the difference, e.g. terraform resource "aws_docdb_global_cluster" "example" {
 *
 * # ... other configuration ...
 *
 * # There is no API for reading source_db_cluster_identifier
 *
 *  lifecycle {
 *
 *  ignore_changes = [source_db_cluster_identifier]
 *
 *  } }
 */
class GlobalCluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["databaseName"] = state ? state.databaseName : undefined;
            inputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersion"] = state ? state.engineVersion : undefined;
            inputs["globalClusterIdentifier"] = state ? state.globalClusterIdentifier : undefined;
            inputs["globalClusterMembers"] = state ? state.globalClusterMembers : undefined;
            inputs["globalClusterResourceId"] = state ? state.globalClusterResourceId : undefined;
            inputs["sourceDbClusterIdentifier"] = state ? state.sourceDbClusterIdentifier : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["storageEncrypted"] = state ? state.storageEncrypted : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.globalClusterIdentifier === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalClusterIdentifier'");
            }
            inputs["databaseName"] = args ? args.databaseName : undefined;
            inputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            inputs["engine"] = args ? args.engine : undefined;
            inputs["engineVersion"] = args ? args.engineVersion : undefined;
            inputs["globalClusterIdentifier"] = args ? args.globalClusterIdentifier : undefined;
            inputs["sourceDbClusterIdentifier"] = args ? args.sourceDbClusterIdentifier : undefined;
            inputs["storageEncrypted"] = args ? args.storageEncrypted : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["globalClusterMembers"] = undefined /*out*/;
            inputs["globalClusterResourceId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GlobalCluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing GlobalCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GlobalCluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalCluster.__pulumiType;
    }
}
exports.GlobalCluster = GlobalCluster;
/** @internal */
GlobalCluster.__pulumiType = 'aws:docdb/globalCluster:GlobalCluster';
//# sourceMappingURL=globalCluster.js.map