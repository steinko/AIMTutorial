"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterInstance"), exports);
__exportStar(require("./clusterParameterGroup"), exports);
__exportStar(require("./clusterSnapshot"), exports);
__exportStar(require("./getEngineVersion"), exports);
__exportStar(require("./getOrderableDbInstance"), exports);
__exportStar(require("./globalCluster"), exports);
__exportStar(require("./subnetGroup"), exports);
// Import resources to register:
const cluster_1 = require("./cluster");
const clusterInstance_1 = require("./clusterInstance");
const clusterParameterGroup_1 = require("./clusterParameterGroup");
const clusterSnapshot_1 = require("./clusterSnapshot");
const globalCluster_1 = require("./globalCluster");
const subnetGroup_1 = require("./subnetGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:docdb/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:docdb/clusterInstance:ClusterInstance":
                return new clusterInstance_1.ClusterInstance(name, undefined, { urn });
            case "aws:docdb/clusterParameterGroup:ClusterParameterGroup":
                return new clusterParameterGroup_1.ClusterParameterGroup(name, undefined, { urn });
            case "aws:docdb/clusterSnapshot:ClusterSnapshot":
                return new clusterSnapshot_1.ClusterSnapshot(name, undefined, { urn });
            case "aws:docdb/globalCluster:GlobalCluster":
                return new globalCluster_1.GlobalCluster(name, undefined, { urn });
            case "aws:docdb/subnetGroup:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "docdb/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "docdb/clusterInstance", _module);
pulumi.runtime.registerResourceModule("aws", "docdb/clusterParameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "docdb/clusterSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "docdb/globalCluster", _module);
pulumi.runtime.registerResourceModule("aws", "docdb/subnetGroup", _module);
//# sourceMappingURL=index.js.map