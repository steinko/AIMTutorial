"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.UserPoolClient = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Cognito User Pool Client resource.
 *
 * ## Example Usage
 * ### Create a basic user pool client
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const pool = new aws.cognito.UserPool("pool", {});
 * const client = new aws.cognito.UserPoolClient("client", {userPoolId: pool.id});
 * ```
 * ### Create a user pool client with no SRP authentication
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const pool = new aws.cognito.UserPool("pool", {});
 * const client = new aws.cognito.UserPoolClient("client", {
 *     userPoolId: pool.id,
 *     generateSecret: true,
 *     explicitAuthFlows: ["ADMIN_NO_SRP_AUTH"],
 * });
 * ```
 * ### Create a user pool client with pinpoint analytics
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const current = aws.getCallerIdentity({});
 * const testUserPool = new aws.cognito.UserPool("testUserPool", {});
 * const testApp = new aws.pinpoint.App("testApp", {});
 * const testRole = new aws.iam.Role("testRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "cognito-idp.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const testRolePolicy = new aws.iam.RolePolicy("testRolePolicy", {
 *     role: testRole.id,
 *     policy: pulumi.all([current, testApp.applicationId]).apply(([current, applicationId]) => `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": [
 *         "mobiletargeting:UpdateEndpoint",
 *         "mobiletargeting:PutItems"
 *       ],
 *       "Effect": "Allow",
 *       "Resource": "arn:aws:mobiletargeting:*:${current.accountId}:apps/${applicationId}*"
 *     }
 *   ]
 * }
 * `),
 * });
 * const testUserPoolClient = new aws.cognito.UserPoolClient("testUserPoolClient", {
 *     userPoolId: testUserPool.id,
 *     analyticsConfiguration: {
 *         applicationId: testApp.applicationId,
 *         externalId: "some_id",
 *         roleArn: testRole.arn,
 *         userDataShared: true,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Cognito User Pool Clients can be imported using the `id` of the Cognito User Pool, and the `id` of the Cognito User Pool Client, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cognito/userPoolClient:UserPoolClient client <user_pool_id>/<user_pool_client_id>
 * ```
 */
class UserPoolClient extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["accessTokenValidity"] = state ? state.accessTokenValidity : undefined;
            inputs["allowedOauthFlows"] = state ? state.allowedOauthFlows : undefined;
            inputs["allowedOauthFlowsUserPoolClient"] = state ? state.allowedOauthFlowsUserPoolClient : undefined;
            inputs["allowedOauthScopes"] = state ? state.allowedOauthScopes : undefined;
            inputs["analyticsConfiguration"] = state ? state.analyticsConfiguration : undefined;
            inputs["callbackUrls"] = state ? state.callbackUrls : undefined;
            inputs["clientSecret"] = state ? state.clientSecret : undefined;
            inputs["defaultRedirectUri"] = state ? state.defaultRedirectUri : undefined;
            inputs["enableTokenRevocation"] = state ? state.enableTokenRevocation : undefined;
            inputs["explicitAuthFlows"] = state ? state.explicitAuthFlows : undefined;
            inputs["generateSecret"] = state ? state.generateSecret : undefined;
            inputs["idTokenValidity"] = state ? state.idTokenValidity : undefined;
            inputs["logoutUrls"] = state ? state.logoutUrls : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["preventUserExistenceErrors"] = state ? state.preventUserExistenceErrors : undefined;
            inputs["readAttributes"] = state ? state.readAttributes : undefined;
            inputs["refreshTokenValidity"] = state ? state.refreshTokenValidity : undefined;
            inputs["supportedIdentityProviders"] = state ? state.supportedIdentityProviders : undefined;
            inputs["tokenValidityUnits"] = state ? state.tokenValidityUnits : undefined;
            inputs["userPoolId"] = state ? state.userPoolId : undefined;
            inputs["writeAttributes"] = state ? state.writeAttributes : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.userPoolId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userPoolId'");
            }
            inputs["accessTokenValidity"] = args ? args.accessTokenValidity : undefined;
            inputs["allowedOauthFlows"] = args ? args.allowedOauthFlows : undefined;
            inputs["allowedOauthFlowsUserPoolClient"] = args ? args.allowedOauthFlowsUserPoolClient : undefined;
            inputs["allowedOauthScopes"] = args ? args.allowedOauthScopes : undefined;
            inputs["analyticsConfiguration"] = args ? args.analyticsConfiguration : undefined;
            inputs["callbackUrls"] = args ? args.callbackUrls : undefined;
            inputs["defaultRedirectUri"] = args ? args.defaultRedirectUri : undefined;
            inputs["enableTokenRevocation"] = args ? args.enableTokenRevocation : undefined;
            inputs["explicitAuthFlows"] = args ? args.explicitAuthFlows : undefined;
            inputs["generateSecret"] = args ? args.generateSecret : undefined;
            inputs["idTokenValidity"] = args ? args.idTokenValidity : undefined;
            inputs["logoutUrls"] = args ? args.logoutUrls : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["preventUserExistenceErrors"] = args ? args.preventUserExistenceErrors : undefined;
            inputs["readAttributes"] = args ? args.readAttributes : undefined;
            inputs["refreshTokenValidity"] = args ? args.refreshTokenValidity : undefined;
            inputs["supportedIdentityProviders"] = args ? args.supportedIdentityProviders : undefined;
            inputs["tokenValidityUnits"] = args ? args.tokenValidityUnits : undefined;
            inputs["userPoolId"] = args ? args.userPoolId : undefined;
            inputs["writeAttributes"] = args ? args.writeAttributes : undefined;
            inputs["clientSecret"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(UserPoolClient.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing UserPoolClient resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new UserPoolClient(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of UserPoolClient.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === UserPoolClient.__pulumiType;
    }
}
exports.UserPoolClient = UserPoolClient;
/** @internal */
UserPoolClient.__pulumiType = 'aws:cognito/userPoolClient:UserPoolClient';
//# sourceMappingURL=userPoolClient.js.map