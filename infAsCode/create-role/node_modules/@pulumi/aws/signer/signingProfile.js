"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SigningProfile = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a Signer Signing Profile. A signing profile contains information about the code signing configuration parameters that can be used by a given code signing user.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testSp = new aws.signer.SigningProfile("test_sp", {
 *     platformId: "AWSLambda-SHA384-ECDSA",
 * });
 * const prodSp = new aws.signer.SigningProfile("prod_sp", {
 *     namePrefix: "prod_sp_",
 *     platformId: "AWSLambda-SHA384-ECDSA",
 *     signatureValidityPeriod: {
 *         type: "YEARS",
 *         value: 5,
 *     },
 *     tags: {
 *         tag1: "value1",
 *         tag2: "value2",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Signer signing profiles can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:signer/signingProfile:SigningProfile test_signer_signing_profile test_sp_DdW3Mk1foYL88fajut4mTVFGpuwfd4ACO6ANL0D1uIj7lrn8adK
 * ```
 */
class SigningProfile extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["namePrefix"] = state ? state.namePrefix : undefined;
            inputs["platformDisplayName"] = state ? state.platformDisplayName : undefined;
            inputs["platformId"] = state ? state.platformId : undefined;
            inputs["revocationRecords"] = state ? state.revocationRecords : undefined;
            inputs["signatureValidityPeriod"] = state ? state.signatureValidityPeriod : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["versionArn"] = state ? state.versionArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.platformId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'platformId'");
            }
            inputs["name"] = args ? args.name : undefined;
            inputs["namePrefix"] = args ? args.namePrefix : undefined;
            inputs["platformId"] = args ? args.platformId : undefined;
            inputs["signatureValidityPeriod"] = args ? args.signatureValidityPeriod : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["platformDisplayName"] = undefined /*out*/;
            inputs["revocationRecords"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["version"] = undefined /*out*/;
            inputs["versionArn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SigningProfile.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SigningProfile resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SigningProfile(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SigningProfile.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SigningProfile.__pulumiType;
    }
}
exports.SigningProfile = SigningProfile;
/** @internal */
SigningProfile.__pulumiType = 'aws:signer/signingProfile:SigningProfile';
//# sourceMappingURL=signingProfile.js.map