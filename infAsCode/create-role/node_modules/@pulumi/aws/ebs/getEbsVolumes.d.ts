import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * `aws.ebs.getEbsVolumes` provides identifying information for EBS volumes matching given criteria.
 *
 * This data source can be useful for getting a list of volume IDs with (for example) matching tags.
 */
export declare function getEbsVolumes(args?: GetEbsVolumesArgs, opts?: pulumi.InvokeOptions): Promise<GetEbsVolumesResult>;
/**
 * A collection of arguments for invoking getEbsVolumes.
 */
export interface GetEbsVolumesArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: inputs.ebs.GetEbsVolumesFilter[];
    /**
     * A map of tags, each pair of which must exactly match
     * a pair on the desired volumes.
     */
    tags?: {
        [key: string]: string;
    };
}
/**
 * A collection of values returned by getEbsVolumes.
 */
export interface GetEbsVolumesResult {
    readonly filters?: outputs.ebs.GetEbsVolumesFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * A set of all the EBS Volume IDs found. This data source will fail if
     * no volumes match the provided criteria.
     */
    readonly ids: string[];
    readonly tags?: {
        [key: string]: string;
    };
}
export declare function getEbsVolumesOutput(args?: GetEbsVolumesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEbsVolumesResult>;
/**
 * A collection of arguments for invoking getEbsVolumes.
 */
export interface GetEbsVolumesOutputArgs {
    /**
     * Custom filter block as described below.
     */
    filters?: pulumi.Input<pulumi.Input<inputs.ebs.GetEbsVolumesFilterArgs>[]>;
    /**
     * A map of tags, each pair of which must exactly match
     * a pair on the desired volumes.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
}
