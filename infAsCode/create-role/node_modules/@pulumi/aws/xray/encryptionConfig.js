"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptionConfig = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates and manages an AWS XRay Encryption Config.
 *
 * > **NOTE:** Removing this resource from the provider has no effect to the encryption configuration within X-Ray.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.xray.EncryptionConfig("example", {
 *     type: "NONE",
 * });
 * ```
 * ### With KMS Key
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleKey = new aws.kms.Key("exampleKey", {
 *     description: "Some Key",
 *     deletionWindowInDays: 7,
 *     policy: `{
 *   "Version": "2012-10-17",
 *   "Id": "kms-tf-1",
 *   "Statement": [
 *     {
 *       "Sid": "Enable IAM User Permissions",
 *       "Effect": "Allow",
 *       "Principal": {
 *         "AWS": "*"
 *       },
 *       "Action": "kms:*",
 *       "Resource": "*"
 *     }
 *   ]
 * }
 * `,
 * });
 * const exampleEncryptionConfig = new aws.xray.EncryptionConfig("exampleEncryptionConfig", {
 *     type: "KMS",
 *     keyId: exampleKey.arn,
 * });
 * ```
 *
 * ## Import
 *
 * XRay Encryption Config can be imported using the region name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:xray/encryptionConfig:EncryptionConfig example us-west-2
 * ```
 */
class EncryptionConfig extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["keyId"] = state ? state.keyId : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.type === undefined) && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            inputs["keyId"] = args ? args.keyId : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(EncryptionConfig.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EncryptionConfig resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EncryptionConfig(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EncryptionConfig.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionConfig.__pulumiType;
    }
}
exports.EncryptionConfig = EncryptionConfig;
/** @internal */
EncryptionConfig.__pulumiType = 'aws:xray/encryptionConfig:EncryptionConfig';
//# sourceMappingURL=encryptionConfig.js.map