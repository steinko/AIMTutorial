"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Policy = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a resource to create an AWS Firewall Manager policy. You need to be using AWS organizations and have enabled the Firewall Manager administrator account.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleRuleGroup = new aws.wafregional.RuleGroup("exampleRuleGroup", {metricName: "WAFRuleGroupExample"});
 * const examplePolicy = new aws.fms.Policy("examplePolicy", {
 *     excludeResourceTags: false,
 *     remediationEnabled: false,
 *     resourceTypeLists: ["AWS::ElasticLoadBalancingV2::LoadBalancer"],
 *     securityServicePolicyData: {
 *         type: "WAF",
 *         managedServiceData: exampleRuleGroup.id.apply(id => JSON.stringify({
 *             type: "WAF",
 *             ruleGroups: [{
 *                 id: id,
 *                 overrideAction: {
 *                     type: "COUNT",
 *                 },
 *             }],
 *             defaultAction: {
 *                 type: "BLOCK",
 *             },
 *             overrideCustomerWebACLAssociation: false,
 *         })),
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Firewall Manager policies can be imported using the policy ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:fms/policy:Policy example 5be49585-a7e3-4c49-dde1-a179fe4a619a
 * ```
 */
class Policy extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["deleteAllPolicyResources"] = state ? state.deleteAllPolicyResources : undefined;
            inputs["excludeMap"] = state ? state.excludeMap : undefined;
            inputs["excludeResourceTags"] = state ? state.excludeResourceTags : undefined;
            inputs["includeMap"] = state ? state.includeMap : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["policyUpdateToken"] = state ? state.policyUpdateToken : undefined;
            inputs["remediationEnabled"] = state ? state.remediationEnabled : undefined;
            inputs["resourceTags"] = state ? state.resourceTags : undefined;
            inputs["resourceType"] = state ? state.resourceType : undefined;
            inputs["resourceTypeLists"] = state ? state.resourceTypeLists : undefined;
            inputs["securityServicePolicyData"] = state ? state.securityServicePolicyData : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.excludeResourceTags === undefined) && !opts.urn) {
                throw new Error("Missing required property 'excludeResourceTags'");
            }
            if ((!args || args.securityServicePolicyData === undefined) && !opts.urn) {
                throw new Error("Missing required property 'securityServicePolicyData'");
            }
            inputs["deleteAllPolicyResources"] = args ? args.deleteAllPolicyResources : undefined;
            inputs["excludeMap"] = args ? args.excludeMap : undefined;
            inputs["excludeResourceTags"] = args ? args.excludeResourceTags : undefined;
            inputs["includeMap"] = args ? args.includeMap : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["remediationEnabled"] = args ? args.remediationEnabled : undefined;
            inputs["resourceTags"] = args ? args.resourceTags : undefined;
            inputs["resourceType"] = args ? args.resourceType : undefined;
            inputs["resourceTypeLists"] = args ? args.resourceTypeLists : undefined;
            inputs["securityServicePolicyData"] = args ? args.securityServicePolicyData : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["policyUpdateToken"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Policy.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Policy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Policy(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Policy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Policy.__pulumiType;
    }
}
exports.Policy = Policy;
/** @internal */
Policy.__pulumiType = 'aws:fms/policy:Policy';
//# sourceMappingURL=policy.js.map