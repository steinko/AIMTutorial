"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.GlobalReplicationGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an ElastiCache Global Replication Group resource, which manages replication between two or more Replication Groups in different regions. For more information, see the [ElastiCache User Guide](https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/Redis-Global-Datastore.html).
 *
 * ## Example Usage
 * ### Global replication group with one secondary replication group
 *
 * The global replication group depends on the primary group existing. Secondary replication groups depend on the global replication group. the provider dependency management will handle this transparently using resource value references.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const primary = new aws.elasticache.ReplicationGroup("primary", {
 *     replicationGroupDescription: "primary replication group",
 *     engine: "redis",
 *     engineVersion: "5.0.6",
 *     nodeType: "cache.m5.large",
 *     numberCacheClusters: 1,
 * });
 * const example = new aws.elasticache.GlobalReplicationGroup("example", {
 *     globalReplicationGroupIdSuffix: "example",
 *     primaryReplicationGroupId: primary.id,
 * });
 * const secondary = new aws.elasticache.ReplicationGroup("secondary", {
 *     replicationGroupDescription: "secondary replication group",
 *     globalReplicationGroupId: example.globalReplicationGroupId,
 *     numberCacheClusters: 1,
 * }, {
 *     provider: aws.other_region,
 * });
 * ```
 *
 * ## Import
 *
 * ElastiCache Global Replication Groups can be imported using the `global_replication_group_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:elasticache/globalReplicationGroup:GlobalReplicationGroup my_global_replication_group okuqm-global-replication-group-1
 * ```
 */
class GlobalReplicationGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["actualEngineVersion"] = state ? state.actualEngineVersion : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["atRestEncryptionEnabled"] = state ? state.atRestEncryptionEnabled : undefined;
            inputs["authTokenEnabled"] = state ? state.authTokenEnabled : undefined;
            inputs["cacheNodeType"] = state ? state.cacheNodeType : undefined;
            inputs["clusterEnabled"] = state ? state.clusterEnabled : undefined;
            inputs["engine"] = state ? state.engine : undefined;
            inputs["engineVersionActual"] = state ? state.engineVersionActual : undefined;
            inputs["globalReplicationGroupDescription"] = state ? state.globalReplicationGroupDescription : undefined;
            inputs["globalReplicationGroupId"] = state ? state.globalReplicationGroupId : undefined;
            inputs["globalReplicationGroupIdSuffix"] = state ? state.globalReplicationGroupIdSuffix : undefined;
            inputs["primaryReplicationGroupId"] = state ? state.primaryReplicationGroupId : undefined;
            inputs["transitEncryptionEnabled"] = state ? state.transitEncryptionEnabled : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.globalReplicationGroupIdSuffix === undefined) && !opts.urn) {
                throw new Error("Missing required property 'globalReplicationGroupIdSuffix'");
            }
            if ((!args || args.primaryReplicationGroupId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'primaryReplicationGroupId'");
            }
            inputs["globalReplicationGroupDescription"] = args ? args.globalReplicationGroupDescription : undefined;
            inputs["globalReplicationGroupIdSuffix"] = args ? args.globalReplicationGroupIdSuffix : undefined;
            inputs["primaryReplicationGroupId"] = args ? args.primaryReplicationGroupId : undefined;
            inputs["actualEngineVersion"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["atRestEncryptionEnabled"] = undefined /*out*/;
            inputs["authTokenEnabled"] = undefined /*out*/;
            inputs["cacheNodeType"] = undefined /*out*/;
            inputs["clusterEnabled"] = undefined /*out*/;
            inputs["engine"] = undefined /*out*/;
            inputs["engineVersionActual"] = undefined /*out*/;
            inputs["globalReplicationGroupId"] = undefined /*out*/;
            inputs["transitEncryptionEnabled"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(GlobalReplicationGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing GlobalReplicationGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new GlobalReplicationGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of GlobalReplicationGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === GlobalReplicationGroup.__pulumiType;
    }
}
exports.GlobalReplicationGroup = GlobalReplicationGroup;
/** @internal */
GlobalReplicationGroup.__pulumiType = 'aws:elasticache/globalReplicationGroup:GlobalReplicationGroup';
//# sourceMappingURL=globalReplicationGroup.js.map