"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReportDefinition = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages Cost and Usage Report Definitions.
 *
 * > *NOTE:* The AWS Cost and Usage Report service is only available in `us-east-1` currently.
 *
 * > *NOTE:* If AWS Organizations is enabled, only the master account can use this resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleCurReportDefinition = new aws.cur.ReportDefinition("example_cur_report_definition", {
 *     additionalArtifacts: [
 *         "REDSHIFT",
 *         "QUICKSIGHT",
 *     ],
 *     additionalSchemaElements: ["RESOURCES"],
 *     compression: "GZIP",
 *     format: "textORcsv",
 *     reportName: "example-cur-report-definition",
 *     s3Bucket: "example-bucket-name",
 *     s3Region: "us-east-1",
 *     timeUnit: "HOURLY",
 * });
 * ```
 *
 * ## Import
 *
 * Report Definitions can be imported using the `report_name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:cur/reportDefinition:ReportDefinition example_cur_report_definition example-cur-report-definition
 * ```
 */
class ReportDefinition extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["additionalArtifacts"] = state ? state.additionalArtifacts : undefined;
            inputs["additionalSchemaElements"] = state ? state.additionalSchemaElements : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["compression"] = state ? state.compression : undefined;
            inputs["format"] = state ? state.format : undefined;
            inputs["refreshClosedReports"] = state ? state.refreshClosedReports : undefined;
            inputs["reportName"] = state ? state.reportName : undefined;
            inputs["reportVersioning"] = state ? state.reportVersioning : undefined;
            inputs["s3Bucket"] = state ? state.s3Bucket : undefined;
            inputs["s3Prefix"] = state ? state.s3Prefix : undefined;
            inputs["s3Region"] = state ? state.s3Region : undefined;
            inputs["timeUnit"] = state ? state.timeUnit : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.additionalSchemaElements === undefined) && !opts.urn) {
                throw new Error("Missing required property 'additionalSchemaElements'");
            }
            if ((!args || args.compression === undefined) && !opts.urn) {
                throw new Error("Missing required property 'compression'");
            }
            if ((!args || args.format === undefined) && !opts.urn) {
                throw new Error("Missing required property 'format'");
            }
            if ((!args || args.reportName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'reportName'");
            }
            if ((!args || args.s3Bucket === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Bucket'");
            }
            if ((!args || args.s3Region === undefined) && !opts.urn) {
                throw new Error("Missing required property 's3Region'");
            }
            if ((!args || args.timeUnit === undefined) && !opts.urn) {
                throw new Error("Missing required property 'timeUnit'");
            }
            inputs["additionalArtifacts"] = args ? args.additionalArtifacts : undefined;
            inputs["additionalSchemaElements"] = args ? args.additionalSchemaElements : undefined;
            inputs["compression"] = args ? args.compression : undefined;
            inputs["format"] = args ? args.format : undefined;
            inputs["refreshClosedReports"] = args ? args.refreshClosedReports : undefined;
            inputs["reportName"] = args ? args.reportName : undefined;
            inputs["reportVersioning"] = args ? args.reportVersioning : undefined;
            inputs["s3Bucket"] = args ? args.s3Bucket : undefined;
            inputs["s3Prefix"] = args ? args.s3Prefix : undefined;
            inputs["s3Region"] = args ? args.s3Region : undefined;
            inputs["timeUnit"] = args ? args.timeUnit : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ReportDefinition.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ReportDefinition resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ReportDefinition(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ReportDefinition.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ReportDefinition.__pulumiType;
    }
}
exports.ReportDefinition = ReportDefinition;
/** @internal */
ReportDefinition.__pulumiType = 'aws:cur/reportDefinition:ReportDefinition';
//# sourceMappingURL=reportDefinition.js.map