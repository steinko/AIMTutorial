"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RdsDbInstance = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an OpsWorks RDS DB Instance resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const myInstance = new aws.opsworks.RdsDbInstance("myInstance", {
 *     stackId: aws_opsworks_stack.my_stack.id,
 *     rdsDbInstanceArn: aws_db_instance.my_instance.arn,
 *     dbUser: "someUser",
 *     dbPassword: "somePass",
 * });
 * ```
 */
class RdsDbInstance extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["dbPassword"] = state ? state.dbPassword : undefined;
            inputs["dbUser"] = state ? state.dbUser : undefined;
            inputs["rdsDbInstanceArn"] = state ? state.rdsDbInstanceArn : undefined;
            inputs["stackId"] = state ? state.stackId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dbPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbPassword'");
            }
            if ((!args || args.dbUser === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbUser'");
            }
            if ((!args || args.rdsDbInstanceArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'rdsDbInstanceArn'");
            }
            if ((!args || args.stackId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'stackId'");
            }
            inputs["dbPassword"] = args ? args.dbPassword : undefined;
            inputs["dbUser"] = args ? args.dbUser : undefined;
            inputs["rdsDbInstanceArn"] = args ? args.rdsDbInstanceArn : undefined;
            inputs["stackId"] = args ? args.stackId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RdsDbInstance.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RdsDbInstance resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RdsDbInstance(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RdsDbInstance.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RdsDbInstance.__pulumiType;
    }
}
exports.RdsDbInstance = RdsDbInstance;
/** @internal */
RdsDbInstance.__pulumiType = 'aws:opsworks/rdsDbInstance:RdsDbInstance';
//# sourceMappingURL=rdsDbInstance.js.map