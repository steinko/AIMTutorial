"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./application"), exports);
__exportStar(require("./customLayer"), exports);
__exportStar(require("./gangliaLayer"), exports);
__exportStar(require("./haproxyLayer"), exports);
__exportStar(require("./instance"), exports);
__exportStar(require("./javaAppLayer"), exports);
__exportStar(require("./memcachedLayer"), exports);
__exportStar(require("./mysqlLayer"), exports);
__exportStar(require("./nodejsAppLayer"), exports);
__exportStar(require("./permission"), exports);
__exportStar(require("./phpAppLayer"), exports);
__exportStar(require("./railsAppLayer"), exports);
__exportStar(require("./rdsDbInstance"), exports);
__exportStar(require("./stack"), exports);
__exportStar(require("./staticWebLayer"), exports);
__exportStar(require("./userProfile"), exports);
// Import resources to register:
const application_1 = require("./application");
const customLayer_1 = require("./customLayer");
const gangliaLayer_1 = require("./gangliaLayer");
const haproxyLayer_1 = require("./haproxyLayer");
const instance_1 = require("./instance");
const javaAppLayer_1 = require("./javaAppLayer");
const memcachedLayer_1 = require("./memcachedLayer");
const mysqlLayer_1 = require("./mysqlLayer");
const nodejsAppLayer_1 = require("./nodejsAppLayer");
const permission_1 = require("./permission");
const phpAppLayer_1 = require("./phpAppLayer");
const railsAppLayer_1 = require("./railsAppLayer");
const rdsDbInstance_1 = require("./rdsDbInstance");
const stack_1 = require("./stack");
const staticWebLayer_1 = require("./staticWebLayer");
const userProfile_1 = require("./userProfile");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:opsworks/application:Application":
                return new application_1.Application(name, undefined, { urn });
            case "aws:opsworks/customLayer:CustomLayer":
                return new customLayer_1.CustomLayer(name, undefined, { urn });
            case "aws:opsworks/gangliaLayer:GangliaLayer":
                return new gangliaLayer_1.GangliaLayer(name, undefined, { urn });
            case "aws:opsworks/haproxyLayer:HaproxyLayer":
                return new haproxyLayer_1.HaproxyLayer(name, undefined, { urn });
            case "aws:opsworks/instance:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "aws:opsworks/javaAppLayer:JavaAppLayer":
                return new javaAppLayer_1.JavaAppLayer(name, undefined, { urn });
            case "aws:opsworks/memcachedLayer:MemcachedLayer":
                return new memcachedLayer_1.MemcachedLayer(name, undefined, { urn });
            case "aws:opsworks/mysqlLayer:MysqlLayer":
                return new mysqlLayer_1.MysqlLayer(name, undefined, { urn });
            case "aws:opsworks/nodejsAppLayer:NodejsAppLayer":
                return new nodejsAppLayer_1.NodejsAppLayer(name, undefined, { urn });
            case "aws:opsworks/permission:Permission":
                return new permission_1.Permission(name, undefined, { urn });
            case "aws:opsworks/phpAppLayer:PhpAppLayer":
                return new phpAppLayer_1.PhpAppLayer(name, undefined, { urn });
            case "aws:opsworks/railsAppLayer:RailsAppLayer":
                return new railsAppLayer_1.RailsAppLayer(name, undefined, { urn });
            case "aws:opsworks/rdsDbInstance:RdsDbInstance":
                return new rdsDbInstance_1.RdsDbInstance(name, undefined, { urn });
            case "aws:opsworks/stack:Stack":
                return new stack_1.Stack(name, undefined, { urn });
            case "aws:opsworks/staticWebLayer:StaticWebLayer":
                return new staticWebLayer_1.StaticWebLayer(name, undefined, { urn });
            case "aws:opsworks/userProfile:UserProfile":
                return new userProfile_1.UserProfile(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "opsworks/application", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/customLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/gangliaLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/haproxyLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/instance", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/javaAppLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/memcachedLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/mysqlLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/nodejsAppLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/permission", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/phpAppLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/railsAppLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/rdsDbInstance", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/stack", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/staticWebLayer", _module);
pulumi.runtime.registerResourceModule("aws", "opsworks/userProfile", _module);
//# sourceMappingURL=index.js.map