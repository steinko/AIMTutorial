"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Route = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon API Gateway Version 2 route.
 * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/welcome.html) for [WebSocket](https://docs.aws.amazon.com/apigateway/latest/developerguide/websocket-api-develop-routes.html) and [HTTP](https://docs.aws.amazon.com/apigateway/latest/developerguide/http-api-develop-routes.html) APIs.
 *
 * ## Example Usage
 * ### Basic
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleApi = new aws.apigatewayv2.Api("exampleApi", {
 *     protocolType: "WEBSOCKET",
 *     routeSelectionExpression: `$request.body.action`,
 * });
 * const exampleRoute = new aws.apigatewayv2.Route("exampleRoute", {
 *     apiId: exampleApi.id,
 *     routeKey: `$default`,
 * });
 * ```
 * ### HTTP Proxy Integration
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const exampleApi = new aws.apigatewayv2.Api("exampleApi", {protocolType: "HTTP"});
 * const exampleIntegration = new aws.apigatewayv2.Integration("exampleIntegration", {
 *     apiId: exampleApi.id,
 *     integrationType: "HTTP_PROXY",
 *     integrationMethod: "ANY",
 *     integrationUri: "https://example.com/{proxy}",
 * });
 * const exampleRoute = new aws.apigatewayv2.Route("exampleRoute", {
 *     apiId: exampleApi.id,
 *     routeKey: "ANY /example/{proxy+}",
 *     target: pulumi.interpolate`integrations/${exampleIntegration.id}`,
 * });
 * ```
 *
 * ## Import
 *
 * `aws_apigatewayv2_route` can be imported by using the API identifier and route identifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigatewayv2/route:Route example aabbccddee/1122334
 * ```
 */
class Route extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["apiKeyRequired"] = state ? state.apiKeyRequired : undefined;
            inputs["authorizationScopes"] = state ? state.authorizationScopes : undefined;
            inputs["authorizationType"] = state ? state.authorizationType : undefined;
            inputs["authorizerId"] = state ? state.authorizerId : undefined;
            inputs["modelSelectionExpression"] = state ? state.modelSelectionExpression : undefined;
            inputs["operationName"] = state ? state.operationName : undefined;
            inputs["requestModels"] = state ? state.requestModels : undefined;
            inputs["requestParameters"] = state ? state.requestParameters : undefined;
            inputs["routeKey"] = state ? state.routeKey : undefined;
            inputs["routeResponseSelectionExpression"] = state ? state.routeResponseSelectionExpression : undefined;
            inputs["target"] = state ? state.target : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.routeKey === undefined) && !opts.urn) {
                throw new Error("Missing required property 'routeKey'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["apiKeyRequired"] = args ? args.apiKeyRequired : undefined;
            inputs["authorizationScopes"] = args ? args.authorizationScopes : undefined;
            inputs["authorizationType"] = args ? args.authorizationType : undefined;
            inputs["authorizerId"] = args ? args.authorizerId : undefined;
            inputs["modelSelectionExpression"] = args ? args.modelSelectionExpression : undefined;
            inputs["operationName"] = args ? args.operationName : undefined;
            inputs["requestModels"] = args ? args.requestModels : undefined;
            inputs["requestParameters"] = args ? args.requestParameters : undefined;
            inputs["routeKey"] = args ? args.routeKey : undefined;
            inputs["routeResponseSelectionExpression"] = args ? args.routeResponseSelectionExpression : undefined;
            inputs["target"] = args ? args.target : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Route.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Route resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Route(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Route.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Route.__pulumiType;
    }
}
exports.Route = Route;
/** @internal */
Route.__pulumiType = 'aws:apigatewayv2/route:Route';
//# sourceMappingURL=route.js.map