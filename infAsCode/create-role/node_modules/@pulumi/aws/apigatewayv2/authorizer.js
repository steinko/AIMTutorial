"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorizer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon API Gateway Version 2 authorizer.
 * More information can be found in the [Amazon API Gateway Developer Guide](https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-websocket-api.html).
 *
 * ## Example Usage
 * ### Basic WebSocket API
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.apigatewayv2.Authorizer("example", {
 *     apiId: aws_apigatewayv2_api.example.id,
 *     authorizerType: "REQUEST",
 *     authorizerUri: aws_lambda_function.example.invoke_arn,
 *     identitySources: ["route.request.header.Auth"],
 * });
 * ```
 * ### Basic HTTP API
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.apigatewayv2.Authorizer("example", {
 *     apiId: aws_apigatewayv2_api.example.id,
 *     authorizerType: "JWT",
 *     identitySources: [`$request.header.Authorization`],
 *     jwtConfiguration: {
 *         audiences: ["example"],
 *         issuer: `https://${aws_cognito_user_pool.example.endpoint}`,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_apigatewayv2_authorizer` can be imported by using the API identifier and authorizer identifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigatewayv2/authorizer:Authorizer example aabbccddee/1122334
 * ```
 */
class Authorizer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiId"] = state ? state.apiId : undefined;
            inputs["authorizerCredentialsArn"] = state ? state.authorizerCredentialsArn : undefined;
            inputs["authorizerPayloadFormatVersion"] = state ? state.authorizerPayloadFormatVersion : undefined;
            inputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            inputs["authorizerType"] = state ? state.authorizerType : undefined;
            inputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            inputs["enableSimpleResponses"] = state ? state.enableSimpleResponses : undefined;
            inputs["identitySources"] = state ? state.identitySources : undefined;
            inputs["jwtConfiguration"] = state ? state.jwtConfiguration : undefined;
            inputs["name"] = state ? state.name : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.apiId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'apiId'");
            }
            if ((!args || args.authorizerType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'authorizerType'");
            }
            inputs["apiId"] = args ? args.apiId : undefined;
            inputs["authorizerCredentialsArn"] = args ? args.authorizerCredentialsArn : undefined;
            inputs["authorizerPayloadFormatVersion"] = args ? args.authorizerPayloadFormatVersion : undefined;
            inputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            inputs["authorizerType"] = args ? args.authorizerType : undefined;
            inputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            inputs["enableSimpleResponses"] = args ? args.enableSimpleResponses : undefined;
            inputs["identitySources"] = args ? args.identitySources : undefined;
            inputs["jwtConfiguration"] = args ? args.jwtConfiguration : undefined;
            inputs["name"] = args ? args.name : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Authorizer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Authorizer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }
}
exports.Authorizer = Authorizer;
/** @internal */
Authorizer.__pulumiType = 'aws:apigatewayv2/authorizer:Authorizer';
//# sourceMappingURL=authorizer.js.map