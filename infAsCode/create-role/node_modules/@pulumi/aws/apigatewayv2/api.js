"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Api = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an Amazon API Gateway Version 2 API.
 *
 * > **Note:** Amazon API Gateway Version 2 resources are used for creating and deploying WebSocket and HTTP APIs. To create and deploy REST APIs, use Amazon API Gateway Version 1.
 *
 * ## Example Usage
 * ### Basic WebSocket API
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.apigatewayv2.Api("example", {
 *     protocolType: "WEBSOCKET",
 *     routeSelectionExpression: "$request.body.action",
 * });
 * ```
 * ### Basic HTTP API
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.apigatewayv2.Api("example", {
 *     protocolType: "HTTP",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_apigatewayv2_api` can be imported by using the API identifier, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigatewayv2/api:Api example aabbccddee
 * ```
 */
class Api extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiEndpoint"] = state ? state.apiEndpoint : undefined;
            inputs["apiKeySelectionExpression"] = state ? state.apiKeySelectionExpression : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["body"] = state ? state.body : undefined;
            inputs["corsConfiguration"] = state ? state.corsConfiguration : undefined;
            inputs["credentialsArn"] = state ? state.credentialsArn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disableExecuteApiEndpoint"] = state ? state.disableExecuteApiEndpoint : undefined;
            inputs["executionArn"] = state ? state.executionArn : undefined;
            inputs["failOnWarnings"] = state ? state.failOnWarnings : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["protocolType"] = state ? state.protocolType : undefined;
            inputs["routeKey"] = state ? state.routeKey : undefined;
            inputs["routeSelectionExpression"] = state ? state.routeSelectionExpression : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["target"] = state ? state.target : undefined;
            inputs["version"] = state ? state.version : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.protocolType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'protocolType'");
            }
            inputs["apiKeySelectionExpression"] = args ? args.apiKeySelectionExpression : undefined;
            inputs["body"] = args ? args.body : undefined;
            inputs["corsConfiguration"] = args ? args.corsConfiguration : undefined;
            inputs["credentialsArn"] = args ? args.credentialsArn : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disableExecuteApiEndpoint"] = args ? args.disableExecuteApiEndpoint : undefined;
            inputs["failOnWarnings"] = args ? args.failOnWarnings : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["protocolType"] = args ? args.protocolType : undefined;
            inputs["routeKey"] = args ? args.routeKey : undefined;
            inputs["routeSelectionExpression"] = args ? args.routeSelectionExpression : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["target"] = args ? args.target : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["apiEndpoint"] = undefined /*out*/;
            inputs["arn"] = undefined /*out*/;
            inputs["executionArn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Api.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Api resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Api(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Api.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Api.__pulumiType;
    }
}
exports.Api = Api;
/** @internal */
Api.__pulumiType = 'aws:apigatewayv2/api:Api';
//# sourceMappingURL=api.js.map