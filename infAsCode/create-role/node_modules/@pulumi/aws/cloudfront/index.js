"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cachePolicy"), exports);
__exportStar(require("./distribution"), exports);
__exportStar(require("./fieldLevelEncryptionConfig"), exports);
__exportStar(require("./fieldLevelEncryptionProfile"), exports);
__exportStar(require("./function"), exports);
__exportStar(require("./getCachePolicy"), exports);
__exportStar(require("./getDistribution"), exports);
__exportStar(require("./getLogDeliveryCanonicalUserId"), exports);
__exportStar(require("./getOriginRequestPolicy"), exports);
__exportStar(require("./getResponseHeadersPolicy"), exports);
__exportStar(require("./keyGroup"), exports);
__exportStar(require("./monitoringSubscription"), exports);
__exportStar(require("./originAccessIdentity"), exports);
__exportStar(require("./originRequestPolicy"), exports);
__exportStar(require("./publicKey"), exports);
__exportStar(require("./realtimeLogConfig"), exports);
__exportStar(require("./responseHeadersPolicy"), exports);
// Import resources to register:
const cachePolicy_1 = require("./cachePolicy");
const distribution_1 = require("./distribution");
const fieldLevelEncryptionConfig_1 = require("./fieldLevelEncryptionConfig");
const fieldLevelEncryptionProfile_1 = require("./fieldLevelEncryptionProfile");
const function_1 = require("./function");
const keyGroup_1 = require("./keyGroup");
const monitoringSubscription_1 = require("./monitoringSubscription");
const originAccessIdentity_1 = require("./originAccessIdentity");
const originRequestPolicy_1 = require("./originRequestPolicy");
const publicKey_1 = require("./publicKey");
const realtimeLogConfig_1 = require("./realtimeLogConfig");
const responseHeadersPolicy_1 = require("./responseHeadersPolicy");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cloudfront/cachePolicy:CachePolicy":
                return new cachePolicy_1.CachePolicy(name, undefined, { urn });
            case "aws:cloudfront/distribution:Distribution":
                return new distribution_1.Distribution(name, undefined, { urn });
            case "aws:cloudfront/fieldLevelEncryptionConfig:FieldLevelEncryptionConfig":
                return new fieldLevelEncryptionConfig_1.FieldLevelEncryptionConfig(name, undefined, { urn });
            case "aws:cloudfront/fieldLevelEncryptionProfile:FieldLevelEncryptionProfile":
                return new fieldLevelEncryptionProfile_1.FieldLevelEncryptionProfile(name, undefined, { urn });
            case "aws:cloudfront/function:Function":
                return new function_1.Function(name, undefined, { urn });
            case "aws:cloudfront/keyGroup:KeyGroup":
                return new keyGroup_1.KeyGroup(name, undefined, { urn });
            case "aws:cloudfront/monitoringSubscription:MonitoringSubscription":
                return new monitoringSubscription_1.MonitoringSubscription(name, undefined, { urn });
            case "aws:cloudfront/originAccessIdentity:OriginAccessIdentity":
                return new originAccessIdentity_1.OriginAccessIdentity(name, undefined, { urn });
            case "aws:cloudfront/originRequestPolicy:OriginRequestPolicy":
                return new originRequestPolicy_1.OriginRequestPolicy(name, undefined, { urn });
            case "aws:cloudfront/publicKey:PublicKey":
                return new publicKey_1.PublicKey(name, undefined, { urn });
            case "aws:cloudfront/realtimeLogConfig:RealtimeLogConfig":
                return new realtimeLogConfig_1.RealtimeLogConfig(name, undefined, { urn });
            case "aws:cloudfront/responseHeadersPolicy:ResponseHeadersPolicy":
                return new responseHeadersPolicy_1.ResponseHeadersPolicy(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cloudfront/cachePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/distribution", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/fieldLevelEncryptionConfig", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/fieldLevelEncryptionProfile", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/function", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/keyGroup", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/monitoringSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/originAccessIdentity", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/originRequestPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/publicKey", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/realtimeLogConfig", _module);
pulumi.runtime.registerResourceModule("aws", "cloudfront/responseHeadersPolicy", _module);
//# sourceMappingURL=index.js.map