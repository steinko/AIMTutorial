"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.RestApi = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an API Gateway REST API. The REST API can be configured via [importing an OpenAPI specification](https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-import-api.html) in the `body` argument (with other arguments serving as overrides) or via other provider resources to manage the resources (`aws.apigateway.Resource` resource), methods (`aws.apigateway.Method` resource), integrations (`aws.apigateway.Integration` resource), etc. of the REST API. Once the REST API is configured, the `aws.apigateway.Deployment` resource can be used along with the `aws.apigateway.Stage` resource to publish the REST API.
 *
 * > **Note:** Amazon API Gateway Version 1 resources are used for creating and deploying REST APIs. To create and deploy WebSocket and HTTP APIs, use Amazon API Gateway Version 2.
 *
 * ## Example Usage
 * ### OpenAPI Specification
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as crypto from "crypto";
 *
 * const exampleRestApi = new aws.apigateway.RestApi("exampleRestApi", {
 *     body: JSON.stringify({
 *         openapi: "3.0.1",
 *         info: {
 *             title: "example",
 *             version: "1.0",
 *         },
 *         paths: {
 *             "/path1": {
 *                 get: {
 *                     "x-amazon-apigateway-integration": {
 *                         httpMethod: "GET",
 *                         payloadFormatVersion: "1.0",
 *                         type: "HTTP_PROXY",
 *                         uri: "https://ip-ranges.amazonaws.com/ip-ranges.json",
 *                     },
 *                 },
 *             },
 *         },
 *     }),
 *     endpointConfiguration: {
 *         types: ["REGIONAL"],
 *     },
 * });
 * const exampleDeployment = new aws.apigateway.Deployment("exampleDeployment", {
 *     restApi: exampleRestApi.id,
 *     triggers: {
 *         redeployment: exampleRestApi.body.apply(body => JSON.stringify(body)).apply(toJSON => crypto.createHash('sha1').update(toJSON).digest('hex')),
 *     },
 * });
 * const exampleStage = new aws.apigateway.Stage("exampleStage", {
 *     deployment: exampleDeployment.id,
 *     restApi: exampleRestApi.id,
 *     stageName: "example",
 * });
 * ```
 * ### Resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as crypto from "crypto";
 *
 * const exampleRestApi = new aws.apigateway.RestApi("exampleRestApi", {});
 * const exampleResource = new aws.apigateway.Resource("exampleResource", {
 *     parentId: exampleRestApi.rootResourceId,
 *     pathPart: "example",
 *     restApi: exampleRestApi.id,
 * });
 * const exampleMethod = new aws.apigateway.Method("exampleMethod", {
 *     authorization: "NONE",
 *     httpMethod: "GET",
 *     resourceId: exampleResource.id,
 *     restApi: exampleRestApi.id,
 * });
 * const exampleIntegration = new aws.apigateway.Integration("exampleIntegration", {
 *     httpMethod: exampleMethod.httpMethod,
 *     resourceId: exampleResource.id,
 *     restApi: exampleRestApi.id,
 *     type: "MOCK",
 * });
 * const exampleDeployment = new aws.apigateway.Deployment("exampleDeployment", {
 *     restApi: exampleRestApi.id,
 *     triggers: {
 *         redeployment: pulumi.all([exampleResource.id, exampleMethod.id, exampleIntegration.id]).apply(([exampleResourceId, exampleMethodId, exampleIntegrationId]) => JSON.stringify([
 *             exampleResourceId,
 *             exampleMethodId,
 *             exampleIntegrationId,
 *         ])).apply(toJSON => crypto.createHash('sha1').update(toJSON).digest('hex')),
 *     },
 * });
 * const exampleStage = new aws.apigateway.Stage("exampleStage", {
 *     deployment: exampleDeployment.id,
 *     restApi: exampleRestApi.id,
 *     stageName: "example",
 * });
 * ```
 *
 * ## Import
 *
 * `aws_api_gateway_rest_api` can be imported by using the REST API ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigateway/restApi:RestApi example 12345abcde
 * ```
 */
class RestApi extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["apiKeySource"] = state ? state.apiKeySource : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["binaryMediaTypes"] = state ? state.binaryMediaTypes : undefined;
            inputs["body"] = state ? state.body : undefined;
            inputs["createdDate"] = state ? state.createdDate : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["disableExecuteApiEndpoint"] = state ? state.disableExecuteApiEndpoint : undefined;
            inputs["endpointConfiguration"] = state ? state.endpointConfiguration : undefined;
            inputs["executionArn"] = state ? state.executionArn : undefined;
            inputs["minimumCompressionSize"] = state ? state.minimumCompressionSize : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["policy"] = state ? state.policy : undefined;
            inputs["rootResourceId"] = state ? state.rootResourceId : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            inputs["apiKeySource"] = args ? args.apiKeySource : undefined;
            inputs["binaryMediaTypes"] = args ? args.binaryMediaTypes : undefined;
            inputs["body"] = args ? args.body : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["disableExecuteApiEndpoint"] = args ? args.disableExecuteApiEndpoint : undefined;
            inputs["endpointConfiguration"] = args ? args.endpointConfiguration : undefined;
            inputs["minimumCompressionSize"] = args ? args.minimumCompressionSize : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["parameters"] = args ? args.parameters : undefined;
            inputs["policy"] = args ? args.policy : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdDate"] = undefined /*out*/;
            inputs["executionArn"] = undefined /*out*/;
            inputs["rootResourceId"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(RestApi.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing RestApi resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new RestApi(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of RestApi.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === RestApi.__pulumiType;
    }
}
exports.RestApi = RestApi;
/** @internal */
RestApi.__pulumiType = 'aws:apigateway/restApi:RestApi';
//# sourceMappingURL=restApi.js.map