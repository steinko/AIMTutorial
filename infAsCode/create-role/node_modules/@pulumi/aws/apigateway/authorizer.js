"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Authorizer = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an API Gateway Authorizer.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const demoRestApi = new aws.apigateway.RestApi("demoRestApi", {});
 * const invocationRole = new aws.iam.Role("invocationRole", {
 *     path: "/",
 *     assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "apigateway.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `,
 * });
 * const lambda = new aws.iam.Role("lambda", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const authorizer = new aws.lambda.Function("authorizer", {
 *     code: new pulumi.asset.FileArchive("lambda-function.zip"),
 *     role: lambda.arn,
 *     handler: "exports.example",
 * });
 * const demoAuthorizer = new aws.apigateway.Authorizer("demoAuthorizer", {
 *     restApi: demoRestApi.id,
 *     authorizerUri: authorizer.invokeArn,
 *     authorizerCredentials: invocationRole.arn,
 * });
 * const invocationPolicy = new aws.iam.RolePolicy("invocationPolicy", {
 *     role: invocationRole.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "lambda:InvokeFunction",
 *       "Effect": "Allow",
 *       "Resource": "${authorizer.arn}"
 *     }
 *   ]
 * }
 * `,
 * });
 * ```
 *
 * ## Import
 *
 * AWS API Gateway Authorizer can be imported using the `REST-API-ID/AUTHORIZER-ID`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:apigateway/authorizer:Authorizer authorizer 12345abcde/example
 * ```
 */
class Authorizer extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["authorizerCredentials"] = state ? state.authorizerCredentials : undefined;
            inputs["authorizerResultTtlInSeconds"] = state ? state.authorizerResultTtlInSeconds : undefined;
            inputs["authorizerUri"] = state ? state.authorizerUri : undefined;
            inputs["identitySource"] = state ? state.identitySource : undefined;
            inputs["identityValidationExpression"] = state ? state.identityValidationExpression : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["providerArns"] = state ? state.providerArns : undefined;
            inputs["restApi"] = state ? state.restApi : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.restApi === undefined) && !opts.urn) {
                throw new Error("Missing required property 'restApi'");
            }
            inputs["authorizerCredentials"] = args ? args.authorizerCredentials : undefined;
            inputs["authorizerResultTtlInSeconds"] = args ? args.authorizerResultTtlInSeconds : undefined;
            inputs["authorizerUri"] = args ? args.authorizerUri : undefined;
            inputs["identitySource"] = args ? args.identitySource : undefined;
            inputs["identityValidationExpression"] = args ? args.identityValidationExpression : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["providerArns"] = args ? args.providerArns : undefined;
            inputs["restApi"] = args ? args.restApi : undefined;
            inputs["type"] = args ? args.type : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Authorizer.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Authorizer resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Authorizer(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Authorizer.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Authorizer.__pulumiType;
    }
}
exports.Authorizer = Authorizer;
/** @internal */
Authorizer.__pulumiType = 'aws:apigateway/authorizer:Authorizer';
//# sourceMappingURL=authorizer.js.map