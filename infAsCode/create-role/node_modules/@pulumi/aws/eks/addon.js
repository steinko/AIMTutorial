"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Addon = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EKS add-on.
 *
 * > **Note:** Amazon EKS add-on can only be used with Amazon EKS Clusters
 * running version 1.18 with platform version eks.3 or later
 * because add-ons rely on the Server-side Apply Kubernetes feature,
 * which is only available in Kubernetes 1.18 and later.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.eks.Addon("example", {
 *     clusterName: aws_eks_cluster.example.name,
 *     addonName: "vpc-cni",
 * });
 * ```
 *
 * ## Import
 *
 * EKS add-on can be imported using the `cluster_name` and `addon_name` separated by a colon (`:`), e.g.,
 *
 * ```sh
 *  $ pulumi import aws:eks/addon:Addon my_eks_addon my_cluster_name:my_addon_name
 * ```
 */
class Addon extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["addonName"] = state ? state.addonName : undefined;
            inputs["addonVersion"] = state ? state.addonVersion : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["clusterName"] = state ? state.clusterName : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["modifiedAt"] = state ? state.modifiedAt : undefined;
            inputs["resolveConflicts"] = state ? state.resolveConflicts : undefined;
            inputs["serviceAccountRoleArn"] = state ? state.serviceAccountRoleArn : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.addonName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'addonName'");
            }
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            inputs["addonName"] = args ? args.addonName : undefined;
            inputs["addonVersion"] = args ? args.addonVersion : undefined;
            inputs["clusterName"] = args ? args.clusterName : undefined;
            inputs["resolveConflicts"] = args ? args.resolveConflicts : undefined;
            inputs["serviceAccountRoleArn"] = args ? args.serviceAccountRoleArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["modifiedAt"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Addon.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Addon resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Addon(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Addon.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Addon.__pulumiType;
    }
}
exports.Addon = Addon;
/** @internal */
Addon.__pulumiType = 'aws:eks/addon:Addon';
//# sourceMappingURL=addon.js.map