"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Cluster = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Manages an EKS Cluster.
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.eks.Cluster("example", {
 *     roleArn: aws_iam_role.example.arn,
 *     vpcConfig: {
 *         subnetIds: [
 *             aws_subnet.example1.id,
 *             aws_subnet.example2.id,
 *         ],
 *     },
 * }, {
 *     dependsOn: [
 *         aws_iam_role_policy_attachment["example-AmazonEKSClusterPolicy"],
 *         aws_iam_role_policy_attachment["example-AmazonEKSVPCResourceController"],
 *     ],
 * });
 * export const endpoint = example.endpoint;
 * export const kubeconfig_certificate_authority_data = example.certificateAuthority.apply(certificateAuthority => certificateAuthority.data);
 * ```
 * ### Example IAM Role for EKS Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.iam.Role("example", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Principal": {
 *         "Service": "eks.amazonaws.com"
 *       },
 *       "Action": "sts:AssumeRole"
 *     }
 *   ]
 * }
 * `});
 * const example_AmazonEKSClusterPolicy = new aws.iam.RolePolicyAttachment("example-AmazonEKSClusterPolicy", {
 *     policyArn: "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy",
 *     role: example.name,
 * });
 * // Optionally, enable Security Groups for Pods
 * // Reference: https://docs.aws.amazon.com/eks/latest/userguide/security-groups-for-pods.html
 * const example_AmazonEKSVPCResourceController = new aws.iam.RolePolicyAttachment("example-AmazonEKSVPCResourceController", {
 *     policyArn: "arn:aws:iam::aws:policy/AmazonEKSVPCResourceController",
 *     role: example.name,
 * });
 * ```
 * ### Enabling Control Plane Logging
 *
 * [EKS Control Plane Logging](https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html) can be enabled via the `enabledClusterLogTypes` argument. To manage the CloudWatch Log Group retention period, the `aws.cloudwatch.LogGroup` resource can be used.
 *
 * > The below configuration uses [`dependsOn`](https://www.pulumi.com/docs/intro/concepts/programming-model/#dependson) to prevent ordering issues with EKS automatically creating the log group first and a variable for naming consistency. Other ordering and naming methodologies may be more appropriate for your environment.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const config = new pulumi.Config();
 * const clusterName = config.get("clusterName") || "example";
 * const exampleLogGroup = new aws.cloudwatch.LogGroup("exampleLogGroup", {retentionInDays: 7});
 * // ... potentially other configuration ...
 * const exampleCluster = new aws.eks.Cluster("exampleCluster", {enabledClusterLogTypes: [
 *     "api",
 *     "audit",
 * ]}, {
 *     dependsOn: [exampleLogGroup],
 * });
 * // ... other configuration ...
 * ```
 *
 * ## Import
 *
 * EKS Clusters can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:eks/cluster:Cluster my_cluster my_cluster
 * ```
 */
class Cluster extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["certificateAuthority"] = state ? state.certificateAuthority : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["enabledClusterLogTypes"] = state ? state.enabledClusterLogTypes : undefined;
            inputs["encryptionConfig"] = state ? state.encryptionConfig : undefined;
            inputs["endpoint"] = state ? state.endpoint : undefined;
            inputs["identities"] = state ? state.identities : undefined;
            inputs["kubernetesNetworkConfig"] = state ? state.kubernetesNetworkConfig : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["platformVersion"] = state ? state.platformVersion : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["version"] = state ? state.version : undefined;
            inputs["vpcConfig"] = state ? state.vpcConfig : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.roleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'roleArn'");
            }
            if ((!args || args.vpcConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'vpcConfig'");
            }
            inputs["enabledClusterLogTypes"] = args ? args.enabledClusterLogTypes : undefined;
            inputs["encryptionConfig"] = args ? args.encryptionConfig : undefined;
            inputs["kubernetesNetworkConfig"] = args ? args.kubernetesNetworkConfig : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["version"] = args ? args.version : undefined;
            inputs["vpcConfig"] = args ? args.vpcConfig : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["certificateAuthority"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["endpoint"] = undefined /*out*/;
            inputs["identities"] = undefined /*out*/;
            inputs["platformVersion"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Cluster.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Cluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Cluster(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Cluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Cluster.__pulumiType;
    }
}
exports.Cluster = Cluster;
/** @internal */
Cluster.__pulumiType = 'aws:eks/cluster:Cluster';
//# sourceMappingURL=cluster.js.map