"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./certificate"), exports);
__exportStar(require("./endpoint"), exports);
__exportStar(require("./eventSubscription"), exports);
__exportStar(require("./replicationInstance"), exports);
__exportStar(require("./replicationSubnetGroup"), exports);
__exportStar(require("./replicationTask"), exports);
// Import resources to register:
const certificate_1 = require("./certificate");
const endpoint_1 = require("./endpoint");
const eventSubscription_1 = require("./eventSubscription");
const replicationInstance_1 = require("./replicationInstance");
const replicationSubnetGroup_1 = require("./replicationSubnetGroup");
const replicationTask_1 = require("./replicationTask");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:dms/certificate:Certificate":
                return new certificate_1.Certificate(name, undefined, { urn });
            case "aws:dms/endpoint:Endpoint":
                return new endpoint_1.Endpoint(name, undefined, { urn });
            case "aws:dms/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws:dms/replicationInstance:ReplicationInstance":
                return new replicationInstance_1.ReplicationInstance(name, undefined, { urn });
            case "aws:dms/replicationSubnetGroup:ReplicationSubnetGroup":
                return new replicationSubnetGroup_1.ReplicationSubnetGroup(name, undefined, { urn });
            case "aws:dms/replicationTask:ReplicationTask":
                return new replicationTask_1.ReplicationTask(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "dms/certificate", _module);
pulumi.runtime.registerResourceModule("aws", "dms/endpoint", _module);
pulumi.runtime.registerResourceModule("aws", "dms/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "dms/replicationInstance", _module);
pulumi.runtime.registerResourceModule("aws", "dms/replicationSubnetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "dms/replicationTask", _module);
//# sourceMappingURL=index.js.map