import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";
/**
 * Provides a DMS (Data Migration Service) endpoint resource. DMS endpoints can be created, updated, deleted, and imported.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // Create a new endpoint
 * const test = new aws.dms.Endpoint("test", {
 *     certificateArn: "arn:aws:acm:us-east-1:123456789012:certificate/12345678-1234-1234-1234-123456789012",
 *     databaseName: "test",
 *     endpointId: "test-dms-endpoint-tf",
 *     endpointType: "source",
 *     engineName: "aurora",
 *     extraConnectionAttributes: "",
 *     kmsKeyArn: "arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012",
 *     password: "test",
 *     port: 3306,
 *     serverName: "test",
 *     sslMode: "none",
 *     tags: {
 *         Name: "test",
 *     },
 *     username: "test",
 * });
 * ```
 *
 * ## Import
 *
 * Endpoints can be imported using the `endpoint_id`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:dms/endpoint:Endpoint test test-dms-endpoint-tf
 * ```
 */
export declare class Endpoint extends pulumi.CustomResource {
    /**
     * Get an existing Endpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EndpointState, opts?: pulumi.CustomResourceOptions): Endpoint;
    /**
     * Returns true if the given object is an instance of Endpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Endpoint;
    /**
     * The Amazon Resource Name (ARN) for the certificate.
     */
    readonly certificateArn: pulumi.Output<string>;
    /**
     * The name of the endpoint database.
     */
    readonly databaseName: pulumi.Output<string | undefined>;
    /**
     * Configuration block with Elasticsearch settings. Detailed below.
     */
    readonly elasticsearchSettings: pulumi.Output<outputs.dms.EndpointElasticsearchSettings | undefined>;
    /**
     * The Amazon Resource Name (ARN) for the endpoint.
     */
    readonly endpointArn: pulumi.Output<string>;
    /**
     * The database endpoint identifier.
     */
    readonly endpointId: pulumi.Output<string>;
    /**
     * The type of endpoint. Can be one of `source | target`.
     */
    readonly endpointType: pulumi.Output<string>;
    /**
     * The type of engine for the endpoint. Can be one of `aurora | aurora-postgresql| azuredb | db2 | docdb | dynamodb | elasticsearch | kafka | kinesis | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
     */
    readonly engineName: pulumi.Output<string>;
    /**
     * Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib).
     */
    readonly extraConnectionAttributes: pulumi.Output<string>;
    /**
     * Configuration block with Kafka settings. Detailed below.
     */
    readonly kafkaSettings: pulumi.Output<outputs.dms.EndpointKafkaSettings | undefined>;
    /**
     * Configuration block with Kinesis settings. Detailed below.
     */
    readonly kinesisSettings: pulumi.Output<outputs.dms.EndpointKinesisSettings | undefined>;
    /**
     * The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     */
    readonly kmsKeyArn: pulumi.Output<string>;
    /**
     * Configuration block with MongoDB settings. Detailed below.
     */
    readonly mongodbSettings: pulumi.Output<outputs.dms.EndpointMongodbSettings | undefined>;
    /**
     * The password to be used to login to the endpoint database.
     */
    readonly password: pulumi.Output<string | undefined>;
    /**
     * The port used by the endpoint database.
     */
    readonly port: pulumi.Output<number | undefined>;
    /**
     * Configuration block with S3 settings. Detailed below.
     */
    readonly s3Settings: pulumi.Output<outputs.dms.EndpointS3Settings | undefined>;
    /**
     * The host name of the server.
     */
    readonly serverName: pulumi.Output<string | undefined>;
    /**
     * The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
     */
    readonly serviceAccessRole: pulumi.Output<string | undefined>;
    /**
     * The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
     */
    readonly sslMode: pulumi.Output<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    readonly tags: pulumi.Output<{
        [key: string]: string;
    } | undefined>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     */
    readonly tagsAll: pulumi.Output<{
        [key: string]: string;
    }>;
    /**
     * The user name to be used to login to the endpoint database.
     */
    readonly username: pulumi.Output<string | undefined>;
    /**
     * Create a Endpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EndpointArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Endpoint resources.
 */
export interface EndpointState {
    /**
     * The Amazon Resource Name (ARN) for the certificate.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * The name of the endpoint database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Configuration block with Elasticsearch settings. Detailed below.
     */
    elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    /**
     * The Amazon Resource Name (ARN) for the endpoint.
     */
    endpointArn?: pulumi.Input<string>;
    /**
     * The database endpoint identifier.
     */
    endpointId?: pulumi.Input<string>;
    /**
     * The type of endpoint. Can be one of `source | target`.
     */
    endpointType?: pulumi.Input<string>;
    /**
     * The type of engine for the endpoint. Can be one of `aurora | aurora-postgresql| azuredb | db2 | docdb | dynamodb | elasticsearch | kafka | kinesis | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
     */
    engineName?: pulumi.Input<string>;
    /**
     * Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib).
     */
    extraConnectionAttributes?: pulumi.Input<string>;
    /**
     * Configuration block with Kafka settings. Detailed below.
     */
    kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    /**
     * Configuration block with Kinesis settings. Detailed below.
     */
    kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    /**
     * The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Configuration block with MongoDB settings. Detailed below.
     */
    mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    /**
     * The password to be used to login to the endpoint database.
     */
    password?: pulumi.Input<string>;
    /**
     * The port used by the endpoint database.
     */
    port?: pulumi.Input<number>;
    /**
     * Configuration block with S3 settings. Detailed below.
     */
    s3Settings?: pulumi.Input<inputs.dms.EndpointS3Settings>;
    /**
     * The host name of the server.
     */
    serverName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
     */
    serviceAccessRole?: pulumi.Input<string>;
    /**
     * The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
     */
    sslMode?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * A map of tags assigned to the resource, including those inherited from the provider .
     */
    tagsAll?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The user name to be used to login to the endpoint database.
     */
    username?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Endpoint resource.
 */
export interface EndpointArgs {
    /**
     * The Amazon Resource Name (ARN) for the certificate.
     */
    certificateArn?: pulumi.Input<string>;
    /**
     * The name of the endpoint database.
     */
    databaseName?: pulumi.Input<string>;
    /**
     * Configuration block with Elasticsearch settings. Detailed below.
     */
    elasticsearchSettings?: pulumi.Input<inputs.dms.EndpointElasticsearchSettings>;
    /**
     * The database endpoint identifier.
     */
    endpointId: pulumi.Input<string>;
    /**
     * The type of endpoint. Can be one of `source | target`.
     */
    endpointType: pulumi.Input<string>;
    /**
     * The type of engine for the endpoint. Can be one of `aurora | aurora-postgresql| azuredb | db2 | docdb | dynamodb | elasticsearch | kafka | kinesis | mariadb | mongodb | mysql | oracle | postgres | redshift | s3 | sqlserver | sybase`.
     */
    engineName: pulumi.Input<string>;
    /**
     * Additional attributes associated with the connection. For available attributes see [Using Extra Connection Attributes with AWS Database Migration Service](https://docs.aws.amazon.com/dms/latest/userguide/CHAP_Source.PostgreSQL.html#CHAP_Source.PostgreSQL.ConnectionAttrib).
     */
    extraConnectionAttributes?: pulumi.Input<string>;
    /**
     * Configuration block with Kafka settings. Detailed below.
     */
    kafkaSettings?: pulumi.Input<inputs.dms.EndpointKafkaSettings>;
    /**
     * Configuration block with Kinesis settings. Detailed below.
     */
    kinesisSettings?: pulumi.Input<inputs.dms.EndpointKinesisSettings>;
    /**
     * The Amazon Resource Name (ARN) for the KMS key that will be used to encrypt the connection parameters. If you do not specify a value for `kmsKeyArn`, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
     */
    kmsKeyArn?: pulumi.Input<string>;
    /**
     * Configuration block with MongoDB settings. Detailed below.
     */
    mongodbSettings?: pulumi.Input<inputs.dms.EndpointMongodbSettings>;
    /**
     * The password to be used to login to the endpoint database.
     */
    password?: pulumi.Input<string>;
    /**
     * The port used by the endpoint database.
     */
    port?: pulumi.Input<number>;
    /**
     * Configuration block with S3 settings. Detailed below.
     */
    s3Settings?: pulumi.Input<inputs.dms.EndpointS3Settings>;
    /**
     * The host name of the server.
     */
    serverName?: pulumi.Input<string>;
    /**
     * The Amazon Resource Name (ARN) used by the service access IAM role for dynamodb endpoints.
     */
    serviceAccessRole?: pulumi.Input<string>;
    /**
     * The SSL mode to use for the connection. Can be one of `none | require | verify-ca | verify-full`
     */
    sslMode?: pulumi.Input<string>;
    /**
     * A map of tags to assign to the resource. .If configured with a provider `defaultTags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
     */
    tags?: pulumi.Input<{
        [key: string]: pulumi.Input<string>;
    }>;
    /**
     * The user name to be used to login to the endpoint database.
     */
    username?: pulumi.Input<string>;
}
