"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogSubscriptionFilter = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a CloudWatch Logs subscription filter resource.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testLambdafunctionLogfilter = new aws.cloudwatch.LogSubscriptionFilter("testLambdafunctionLogfilter", {
 *     roleArn: aws_iam_role.iam_for_lambda.arn,
 *     logGroup: "/aws/lambda/example_lambda_name",
 *     filterPattern: "logtype test",
 *     destinationArn: aws_kinesis_stream.test_logstream.arn,
 *     distribution: "Random",
 * });
 * ```
 *
 * ## Import
 *
 * CloudWatch Logs subscription filter can be imported using the log group name and subscription filter name separated by `|`.
 *
 * ```sh
 *  $ pulumi import aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter test_lambdafunction_logfilter /aws/lambda/example_lambda_name|test_lambdafunction_logfilter
 * ```
 */
class LogSubscriptionFilter extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["destinationArn"] = state ? state.destinationArn : undefined;
            inputs["distribution"] = state ? state.distribution : undefined;
            inputs["filterPattern"] = state ? state.filterPattern : undefined;
            inputs["logGroup"] = state ? state.logGroup : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["roleArn"] = state ? state.roleArn : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destinationArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destinationArn'");
            }
            if ((!args || args.filterPattern === undefined) && !opts.urn) {
                throw new Error("Missing required property 'filterPattern'");
            }
            if ((!args || args.logGroup === undefined) && !opts.urn) {
                throw new Error("Missing required property 'logGroup'");
            }
            inputs["destinationArn"] = args ? args.destinationArn : undefined;
            inputs["distribution"] = args ? args.distribution : undefined;
            inputs["filterPattern"] = args ? args.filterPattern : undefined;
            inputs["logGroup"] = args ? args.logGroup : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roleArn"] = args ? args.roleArn : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(LogSubscriptionFilter.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing LogSubscriptionFilter resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new LogSubscriptionFilter(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of LogSubscriptionFilter.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LogSubscriptionFilter.__pulumiType;
    }
}
exports.LogSubscriptionFilter = LogSubscriptionFilter;
/** @internal */
LogSubscriptionFilter.__pulumiType = 'aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter';
//# sourceMappingURL=logSubscriptionFilter.js.map