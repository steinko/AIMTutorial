"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cloudwatchMixins"), exports);
__exportStar(require("./compositeAlarm"), exports);
__exportStar(require("./dashboard"), exports);
__exportStar(require("./eventApiDestination"), exports);
__exportStar(require("./eventArchive"), exports);
__exportStar(require("./eventBus"), exports);
__exportStar(require("./eventBusPolicy"), exports);
__exportStar(require("./eventConnection"), exports);
__exportStar(require("./eventPermission"), exports);
__exportStar(require("./eventRule"), exports);
__exportStar(require("./eventRuleMixins"), exports);
__exportStar(require("./eventTarget"), exports);
__exportStar(require("./getEventConnection"), exports);
__exportStar(require("./getEventSource"), exports);
__exportStar(require("./getLogGroup"), exports);
__exportStar(require("./getLogGroups"), exports);
__exportStar(require("./logDestination"), exports);
__exportStar(require("./logDestinationPolicy"), exports);
__exportStar(require("./logGroup"), exports);
__exportStar(require("./logGroupMixins"), exports);
__exportStar(require("./logMetricFilter"), exports);
__exportStar(require("./logResourcePolicy"), exports);
__exportStar(require("./logStream"), exports);
__exportStar(require("./logSubscriptionFilter"), exports);
__exportStar(require("./metricAlarm"), exports);
__exportStar(require("./metricStream"), exports);
__exportStar(require("./queryDefinition"), exports);
// Import resources to register:
const compositeAlarm_1 = require("./compositeAlarm");
const dashboard_1 = require("./dashboard");
const eventApiDestination_1 = require("./eventApiDestination");
const eventArchive_1 = require("./eventArchive");
const eventBus_1 = require("./eventBus");
const eventBusPolicy_1 = require("./eventBusPolicy");
const eventConnection_1 = require("./eventConnection");
const eventPermission_1 = require("./eventPermission");
const eventRule_1 = require("./eventRule");
const eventTarget_1 = require("./eventTarget");
const logDestination_1 = require("./logDestination");
const logDestinationPolicy_1 = require("./logDestinationPolicy");
const logGroup_1 = require("./logGroup");
const logMetricFilter_1 = require("./logMetricFilter");
const logResourcePolicy_1 = require("./logResourcePolicy");
const logStream_1 = require("./logStream");
const logSubscriptionFilter_1 = require("./logSubscriptionFilter");
const metricAlarm_1 = require("./metricAlarm");
const metricStream_1 = require("./metricStream");
const queryDefinition_1 = require("./queryDefinition");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:cloudwatch/compositeAlarm:CompositeAlarm":
                return new compositeAlarm_1.CompositeAlarm(name, undefined, { urn });
            case "aws:cloudwatch/dashboard:Dashboard":
                return new dashboard_1.Dashboard(name, undefined, { urn });
            case "aws:cloudwatch/eventApiDestination:EventApiDestination":
                return new eventApiDestination_1.EventApiDestination(name, undefined, { urn });
            case "aws:cloudwatch/eventArchive:EventArchive":
                return new eventArchive_1.EventArchive(name, undefined, { urn });
            case "aws:cloudwatch/eventBus:EventBus":
                return new eventBus_1.EventBus(name, undefined, { urn });
            case "aws:cloudwatch/eventBusPolicy:EventBusPolicy":
                return new eventBusPolicy_1.EventBusPolicy(name, undefined, { urn });
            case "aws:cloudwatch/eventConnection:EventConnection":
                return new eventConnection_1.EventConnection(name, undefined, { urn });
            case "aws:cloudwatch/eventPermission:EventPermission":
                return new eventPermission_1.EventPermission(name, undefined, { urn });
            case "aws:cloudwatch/eventRule:EventRule":
                return new eventRule_1.EventRule(name, undefined, { urn });
            case "aws:cloudwatch/eventTarget:EventTarget":
                return new eventTarget_1.EventTarget(name, undefined, { urn });
            case "aws:cloudwatch/logDestination:LogDestination":
                return new logDestination_1.LogDestination(name, undefined, { urn });
            case "aws:cloudwatch/logDestinationPolicy:LogDestinationPolicy":
                return new logDestinationPolicy_1.LogDestinationPolicy(name, undefined, { urn });
            case "aws:cloudwatch/logGroup:LogGroup":
                return new logGroup_1.LogGroup(name, undefined, { urn });
            case "aws:cloudwatch/logMetricFilter:LogMetricFilter":
                return new logMetricFilter_1.LogMetricFilter(name, undefined, { urn });
            case "aws:cloudwatch/logResourcePolicy:LogResourcePolicy":
                return new logResourcePolicy_1.LogResourcePolicy(name, undefined, { urn });
            case "aws:cloudwatch/logStream:LogStream":
                return new logStream_1.LogStream(name, undefined, { urn });
            case "aws:cloudwatch/logSubscriptionFilter:LogSubscriptionFilter":
                return new logSubscriptionFilter_1.LogSubscriptionFilter(name, undefined, { urn });
            case "aws:cloudwatch/metricAlarm:MetricAlarm":
                return new metricAlarm_1.MetricAlarm(name, undefined, { urn });
            case "aws:cloudwatch/metricStream:MetricStream":
                return new metricStream_1.MetricStream(name, undefined, { urn });
            case "aws:cloudwatch/queryDefinition:QueryDefinition":
                return new queryDefinition_1.QueryDefinition(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "cloudwatch/compositeAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/dashboard", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventApiDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventArchive", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventBus", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventBusPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventConnection", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventPermission", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventRule", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/eventTarget", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestination", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logDestinationPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logGroup", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logMetricFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logResourcePolicy", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/logSubscriptionFilter", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricAlarm", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/metricStream", _module);
pulumi.runtime.registerResourceModule("aws", "cloudwatch/queryDefinition", _module);
//# sourceMappingURL=index.js.map