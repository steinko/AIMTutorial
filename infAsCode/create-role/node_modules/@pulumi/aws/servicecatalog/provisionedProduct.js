"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProvisionedProduct = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * This resource provisions and manages a Service Catalog provisioned product.
 *
 * A provisioned product is a resourced instance of a product. For example, provisioning a product based on a CloudFormation template launches a CloudFormation stack and its underlying resources.
 *
 * Like this resource, the `awsServicecatalogRecord` data source also provides information about a provisioned product. Although a Service Catalog record provides some overlapping information with this resource, a record is tied to a provisioned product event, such as provisioning, termination, and updating.
 *
 * > **Tip:** If you include conflicted keys as tags, AWS will report an error, "Parameter validation failed: Missing required parameter in Tags[N]:Value".
 *
 * > **Tip:** A "provisioning artifact" is also referred to as a "version." A "distributor" is also referred to as a "vendor."
 *
 * ## Example Usage
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.servicecatalog.ProvisionedProduct("example", {
 *     productName: "Example product",
 *     provisioningArtifactName: "Example version",
 *     provisioningParameters: [{
 *         key: "foo",
 *         value: "bar",
 *     }],
 *     tags: {
 *         foo: "bar",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * `aws_servicecatalog_provisioned_product` can be imported using the provisioned product ID, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:servicecatalog/provisionedProduct:ProvisionedProduct example pp-dnigbtea24ste
 * ```
 */
class ProvisionedProduct extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["acceptLanguage"] = state ? state.acceptLanguage : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudwatchDashboardNames"] = state ? state.cloudwatchDashboardNames : undefined;
            inputs["createdTime"] = state ? state.createdTime : undefined;
            inputs["ignoreErrors"] = state ? state.ignoreErrors : undefined;
            inputs["lastProvisioningRecordId"] = state ? state.lastProvisioningRecordId : undefined;
            inputs["lastRecordId"] = state ? state.lastRecordId : undefined;
            inputs["lastSuccessfulProvisioningRecordId"] = state ? state.lastSuccessfulProvisioningRecordId : undefined;
            inputs["launchRoleArn"] = state ? state.launchRoleArn : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["notificationArns"] = state ? state.notificationArns : undefined;
            inputs["pathId"] = state ? state.pathId : undefined;
            inputs["pathName"] = state ? state.pathName : undefined;
            inputs["productId"] = state ? state.productId : undefined;
            inputs["productName"] = state ? state.productName : undefined;
            inputs["provisioningArtifactId"] = state ? state.provisioningArtifactId : undefined;
            inputs["provisioningArtifactName"] = state ? state.provisioningArtifactName : undefined;
            inputs["provisioningParameters"] = state ? state.provisioningParameters : undefined;
            inputs["retainPhysicalResources"] = state ? state.retainPhysicalResources : undefined;
            inputs["stackSetProvisioningPreferences"] = state ? state.stackSetProvisioningPreferences : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["statusMessage"] = state ? state.statusMessage : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["type"] = state ? state.type : undefined;
        }
        else {
            const args = argsOrState;
            inputs["acceptLanguage"] = args ? args.acceptLanguage : undefined;
            inputs["ignoreErrors"] = args ? args.ignoreErrors : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["notificationArns"] = args ? args.notificationArns : undefined;
            inputs["pathId"] = args ? args.pathId : undefined;
            inputs["pathName"] = args ? args.pathName : undefined;
            inputs["productId"] = args ? args.productId : undefined;
            inputs["productName"] = args ? args.productName : undefined;
            inputs["provisioningArtifactId"] = args ? args.provisioningArtifactId : undefined;
            inputs["provisioningArtifactName"] = args ? args.provisioningArtifactName : undefined;
            inputs["provisioningParameters"] = args ? args.provisioningParameters : undefined;
            inputs["retainPhysicalResources"] = args ? args.retainPhysicalResources : undefined;
            inputs["stackSetProvisioningPreferences"] = args ? args.stackSetProvisioningPreferences : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["cloudwatchDashboardNames"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["lastProvisioningRecordId"] = undefined /*out*/;
            inputs["lastRecordId"] = undefined /*out*/;
            inputs["lastSuccessfulProvisioningRecordId"] = undefined /*out*/;
            inputs["launchRoleArn"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["statusMessage"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(ProvisionedProduct.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing ProvisionedProduct resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new ProvisionedProduct(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of ProvisionedProduct.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProvisionedProduct.__pulumiType;
    }
}
exports.ProvisionedProduct = ProvisionedProduct;
/** @internal */
ProvisionedProduct.__pulumiType = 'aws:servicecatalog/provisionedProduct:ProvisionedProduct';
//# sourceMappingURL=provisionedProduct.js.map