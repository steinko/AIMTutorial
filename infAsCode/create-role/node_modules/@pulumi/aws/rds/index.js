"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./cluster"), exports);
__exportStar(require("./clusterEndpoint"), exports);
__exportStar(require("./clusterInstance"), exports);
__exportStar(require("./clusterParameterGroup"), exports);
__exportStar(require("./clusterRoleAssociation"), exports);
__exportStar(require("./clusterSnapshot"), exports);
__exportStar(require("./engineMode"), exports);
__exportStar(require("./engineType"), exports);
__exportStar(require("./eventSubscription"), exports);
__exportStar(require("./getCertificate"), exports);
__exportStar(require("./getCluster"), exports);
__exportStar(require("./getClusterSnapshot"), exports);
__exportStar(require("./getEngineVersion"), exports);
__exportStar(require("./getEventCategories"), exports);
__exportStar(require("./getInstance"), exports);
__exportStar(require("./getOrderableDbInstance"), exports);
__exportStar(require("./getProxy"), exports);
__exportStar(require("./getSnapshot"), exports);
__exportStar(require("./getSubnetGroup"), exports);
__exportStar(require("./globalCluster"), exports);
__exportStar(require("./instance"), exports);
__exportStar(require("./instanceType"), exports);
__exportStar(require("./optionGroup"), exports);
__exportStar(require("./parameterGroup"), exports);
__exportStar(require("./proxy"), exports);
__exportStar(require("./proxyDefaultTargetGroup"), exports);
__exportStar(require("./proxyEndpoint"), exports);
__exportStar(require("./proxyTarget"), exports);
__exportStar(require("./roleAssociation"), exports);
__exportStar(require("./securityGroup"), exports);
__exportStar(require("./snapshot"), exports);
__exportStar(require("./storageType"), exports);
__exportStar(require("./subnetGroup"), exports);
// Export enums:
__exportStar(require("../types/enums/rds"), exports);
// Import resources to register:
const cluster_1 = require("./cluster");
const clusterEndpoint_1 = require("./clusterEndpoint");
const clusterInstance_1 = require("./clusterInstance");
const clusterParameterGroup_1 = require("./clusterParameterGroup");
const clusterRoleAssociation_1 = require("./clusterRoleAssociation");
const clusterSnapshot_1 = require("./clusterSnapshot");
const eventSubscription_1 = require("./eventSubscription");
const globalCluster_1 = require("./globalCluster");
const instance_1 = require("./instance");
const optionGroup_1 = require("./optionGroup");
const parameterGroup_1 = require("./parameterGroup");
const proxy_1 = require("./proxy");
const proxyDefaultTargetGroup_1 = require("./proxyDefaultTargetGroup");
const proxyEndpoint_1 = require("./proxyEndpoint");
const proxyTarget_1 = require("./proxyTarget");
const roleAssociation_1 = require("./roleAssociation");
const securityGroup_1 = require("./securityGroup");
const snapshot_1 = require("./snapshot");
const subnetGroup_1 = require("./subnetGroup");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:rds/cluster:Cluster":
                return new cluster_1.Cluster(name, undefined, { urn });
            case "aws:rds/clusterEndpoint:ClusterEndpoint":
                return new clusterEndpoint_1.ClusterEndpoint(name, undefined, { urn });
            case "aws:rds/clusterInstance:ClusterInstance":
                return new clusterInstance_1.ClusterInstance(name, undefined, { urn });
            case "aws:rds/clusterParameterGroup:ClusterParameterGroup":
                return new clusterParameterGroup_1.ClusterParameterGroup(name, undefined, { urn });
            case "aws:rds/clusterRoleAssociation:ClusterRoleAssociation":
                return new clusterRoleAssociation_1.ClusterRoleAssociation(name, undefined, { urn });
            case "aws:rds/clusterSnapshot:ClusterSnapshot":
                return new clusterSnapshot_1.ClusterSnapshot(name, undefined, { urn });
            case "aws:rds/eventSubscription:EventSubscription":
                return new eventSubscription_1.EventSubscription(name, undefined, { urn });
            case "aws:rds/globalCluster:GlobalCluster":
                return new globalCluster_1.GlobalCluster(name, undefined, { urn });
            case "aws:rds/instance:Instance":
                return new instance_1.Instance(name, undefined, { urn });
            case "aws:rds/optionGroup:OptionGroup":
                return new optionGroup_1.OptionGroup(name, undefined, { urn });
            case "aws:rds/parameterGroup:ParameterGroup":
                return new parameterGroup_1.ParameterGroup(name, undefined, { urn });
            case "aws:rds/proxy:Proxy":
                return new proxy_1.Proxy(name, undefined, { urn });
            case "aws:rds/proxyDefaultTargetGroup:ProxyDefaultTargetGroup":
                return new proxyDefaultTargetGroup_1.ProxyDefaultTargetGroup(name, undefined, { urn });
            case "aws:rds/proxyEndpoint:ProxyEndpoint":
                return new proxyEndpoint_1.ProxyEndpoint(name, undefined, { urn });
            case "aws:rds/proxyTarget:ProxyTarget":
                return new proxyTarget_1.ProxyTarget(name, undefined, { urn });
            case "aws:rds/roleAssociation:RoleAssociation":
                return new roleAssociation_1.RoleAssociation(name, undefined, { urn });
            case "aws:rds/securityGroup:SecurityGroup":
                return new securityGroup_1.SecurityGroup(name, undefined, { urn });
            case "aws:rds/snapshot:Snapshot":
                return new snapshot_1.Snapshot(name, undefined, { urn });
            case "aws:rds/subnetGroup:SubnetGroup":
                return new subnetGroup_1.SubnetGroup(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "rds/cluster", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterInstance", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterParameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterRoleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "rds/clusterSnapshot", _module);
pulumi.runtime.registerResourceModule("aws", "rds/eventSubscription", _module);
pulumi.runtime.registerResourceModule("aws", "rds/globalCluster", _module);
pulumi.runtime.registerResourceModule("aws", "rds/instance", _module);
pulumi.runtime.registerResourceModule("aws", "rds/optionGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/parameterGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxy", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyDefaultTargetGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyEndpoint", _module);
pulumi.runtime.registerResourceModule("aws", "rds/proxyTarget", _module);
pulumi.runtime.registerResourceModule("aws", "rds/roleAssociation", _module);
pulumi.runtime.registerResourceModule("aws", "rds/securityGroup", _module);
pulumi.runtime.registerResourceModule("aws", "rds/snapshot", _module);
pulumi.runtime.registerResourceModule("aws", "rds/subnetGroup", _module);
//# sourceMappingURL=index.js.map