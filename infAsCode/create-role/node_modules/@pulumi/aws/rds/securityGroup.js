"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.SecurityGroup = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an RDS security group resource. This is only for DB instances in the
 * EC2-Classic Platform. For instances inside a VPC, use the
 * `aws_db_instance.vpc_security_group_ids`
 * attribute instead.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const defaultSecurityGroup = new aws.rds.SecurityGroup("default", {
 *     ingress: [{
 *         cidr: "10.0.0.0/24",
 *     }],
 * });
 * ```
 *
 * ## Import
 *
 * DB Security groups can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:rds/securityGroup:SecurityGroup default aws_rds_sg-1
 * ```
 */
class SecurityGroup extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        var _a;
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["ingress"] = state ? state.ingress : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.ingress === undefined) && !opts.urn) {
                throw new Error("Missing required property 'ingress'");
            }
            inputs["description"] = (_a = (args ? args.description : undefined)) !== null && _a !== void 0 ? _a : "Managed by Pulumi";
            inputs["ingress"] = args ? args.ingress : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(SecurityGroup.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing SecurityGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new SecurityGroup(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of SecurityGroup.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === SecurityGroup.__pulumiType;
    }
}
exports.SecurityGroup = SecurityGroup;
/** @internal */
SecurityGroup.__pulumiType = 'aws:rds/securityGroup:SecurityGroup';
//# sourceMappingURL=securityGroup.js.map