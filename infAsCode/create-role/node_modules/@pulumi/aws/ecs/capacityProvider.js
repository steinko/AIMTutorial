"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityProvider = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an ECS cluster capacity provider. More information can be found on the [ECS Developer Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/cluster-capacity-providers.html).
 *
 * > **NOTE:** Associating an ECS Capacity Provider to an Auto Scaling Group will automatically add the `AmazonECSManaged` tag to the Auto Scaling Group. This tag should be included in the `aws.autoscaling.Group` resource configuration to prevent the provider from removing it in subsequent executions as well as ensuring the `AmazonECSManaged` tag is propagated to all EC2 Instances in the Auto Scaling Group if `minSize` is above 0 on creation. Any EC2 Instances in the Auto Scaling Group without this tag must be manually be updated, otherwise they may cause unexpected scaling behavior and metrics.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * // ... other configuration, including potentially other tags ...
 * const testGroup = new aws.autoscaling.Group("testGroup", {tags: [{
 *     key: "AmazonECSManaged",
 *     value: "",
 *     propagateAtLaunch: true,
 * }]});
 * const testCapacityProvider = new aws.ecs.CapacityProvider("testCapacityProvider", {autoScalingGroupProvider: {
 *     autoScalingGroupArn: testGroup.arn,
 *     managedTerminationProtection: "ENABLED",
 *     managedScaling: {
 *         maximumScalingStepSize: 1000,
 *         minimumScalingStepSize: 1,
 *         status: "ENABLED",
 *         targetCapacity: 10,
 *     },
 * }});
 * ```
 *
 * ## Import
 *
 * ECS Capacity Providers can be imported using the `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ecs/capacityProvider:CapacityProvider example example
 * ```
 */
class CapacityProvider extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["autoScalingGroupProvider"] = state ? state.autoScalingGroupProvider : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.autoScalingGroupProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'autoScalingGroupProvider'");
            }
            inputs["autoScalingGroupProvider"] = args ? args.autoScalingGroupProvider : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(CapacityProvider.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing CapacityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new CapacityProvider(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of CapacityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CapacityProvider.__pulumiType;
    }
}
exports.CapacityProvider = CapacityProvider;
/** @internal */
CapacityProvider.__pulumiType = 'aws:ecs/capacityProvider:CapacityProvider';
//# sourceMappingURL=capacityProvider.js.map