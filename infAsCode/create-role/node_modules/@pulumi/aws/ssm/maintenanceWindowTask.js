"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.MaintenanceWindowTask = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an SSM Maintenance Window Task resource
 *
 * ## Example Usage
 * ### Automation Tasks
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: "AWS-RestartEC2Instance",
 *     taskType: "AUTOMATION",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         automationParameters: {
 *             documentVersion: `$LATEST`,
 *             parameters: [{
 *                 name: "InstanceId",
 *                 values: [aws_instance.example.id],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### Run Command Tasks
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: "AWS-RunShellScript",
 *     taskType: "RUN_COMMAND",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         runCommandParameters: {
 *             outputS3Bucket: aws_s3_bucket.example.bucket,
 *             outputS3KeyPrefix: "output",
 *             serviceRoleArn: aws_iam_role.example.arn,
 *             timeoutSeconds: 600,
 *             notificationConfig: {
 *                 notificationArn: aws_sns_topic.example.arn,
 *                 notificationEvents: ["All"],
 *                 notificationType: "Command",
 *             },
 *             parameters: [{
 *                 name: "commands",
 *                 values: ["date"],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### Step Function Tasks
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.ssm.MaintenanceWindowTask("example", {
 *     maxConcurrency: 2,
 *     maxErrors: 1,
 *     priority: 1,
 *     taskArn: aws_sfn_activity.example.id,
 *     taskType: "STEP_FUNCTIONS",
 *     windowId: aws_ssm_maintenance_window.example.id,
 *     targets: [{
 *         key: "InstanceIds",
 *         values: [aws_instance.example.id],
 *     }],
 *     taskInvocationParameters: {
 *         stepFunctionsParameters: {
 *             input: "{\"key1\":\"value1\"}",
 *             name: "example",
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * AWS Maintenance Window Task can be imported using the `window_id` and `window_task_id` separated by `/`.
 *
 * ```sh
 *  $ pulumi import aws:ssm/maintenanceWindowTask:MaintenanceWindowTask task <window_id>/<window_task_id>
 * ```
 */
class MaintenanceWindowTask extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["description"] = state ? state.description : undefined;
            inputs["maxConcurrency"] = state ? state.maxConcurrency : undefined;
            inputs["maxErrors"] = state ? state.maxErrors : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["priority"] = state ? state.priority : undefined;
            inputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            inputs["targets"] = state ? state.targets : undefined;
            inputs["taskArn"] = state ? state.taskArn : undefined;
            inputs["taskInvocationParameters"] = state ? state.taskInvocationParameters : undefined;
            inputs["taskType"] = state ? state.taskType : undefined;
            inputs["windowId"] = state ? state.windowId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.maxConcurrency === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxConcurrency'");
            }
            if ((!args || args.maxErrors === undefined) && !opts.urn) {
                throw new Error("Missing required property 'maxErrors'");
            }
            if ((!args || args.taskArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskArn'");
            }
            if ((!args || args.taskType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'taskType'");
            }
            if ((!args || args.windowId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'windowId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["maxConcurrency"] = args ? args.maxConcurrency : undefined;
            inputs["maxErrors"] = args ? args.maxErrors : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["priority"] = args ? args.priority : undefined;
            inputs["serviceRoleArn"] = args ? args.serviceRoleArn : undefined;
            inputs["targets"] = args ? args.targets : undefined;
            inputs["taskArn"] = args ? args.taskArn : undefined;
            inputs["taskInvocationParameters"] = args ? args.taskInvocationParameters : undefined;
            inputs["taskType"] = args ? args.taskType : undefined;
            inputs["windowId"] = args ? args.windowId : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(MaintenanceWindowTask.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing MaintenanceWindowTask resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new MaintenanceWindowTask(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of MaintenanceWindowTask.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MaintenanceWindowTask.__pulumiType;
    }
}
exports.MaintenanceWindowTask = MaintenanceWindowTask;
/** @internal */
MaintenanceWindowTask.__pulumiType = 'aws:ssm/maintenanceWindowTask:MaintenanceWindowTask';
//# sourceMappingURL=maintenanceWindowTask.js.map