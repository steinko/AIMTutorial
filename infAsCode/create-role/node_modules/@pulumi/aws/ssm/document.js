"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Document = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an SSM Document resource
 *
 * > **NOTE on updating SSM documents:** Only documents with a schema version of 2.0
 * or greater can update their content once created, see [SSM Schema Features](http://docs.aws.amazon.com/systems-manager/latest/userguide/sysman-ssm-docs.html#document-schemas-features). To update a document with an older schema version you must recreate the resource. Not all document types support a schema version of 2.0 or greater. Refer to [SSM document schema features and examples](https://docs.aws.amazon.com/systems-manager/latest/userguide/document-schemas-features.html) for information about which schema versions are supported for the respective `documentType`.
 *
 * ## Example Usage
 * ### Create an ssm document in JSON format
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ssm.Document("foo", {
 *     content: `  {
 *     "schemaVersion": "1.2",
 *     "description": "Check ip configuration of a Linux instance.",
 *     "parameters": {
 *
 *     },
 *     "runtimeConfig": {
 *       "aws:runShellScript": {
 *         "properties": [
 *           {
 *             "id": "0.aws:runShellScript",
 *             "runCommand": ["ifconfig"]
 *           }
 *         ]
 *       }
 *     }
 *   }
 * `,
 *     documentType: "Command",
 * });
 * ```
 * ### Create an ssm document in YAML format
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const foo = new aws.ssm.Document("foo", {
 *     content: `schemaVersion: '1.2'
 * description: Check ip configuration of a Linux instance.
 * parameters: {}
 * runtimeConfig:
 *   'aws:runShellScript':
 *     properties:
 *       - id: '0.aws:runShellScript'
 *         runCommand:
 *           - ifconfig
 * `,
 *     documentFormat: "YAML",
 *     documentType: "Command",
 * });
 * ```
 * ## Permissions
 *
 * The permissions attribute specifies how you want to share the document. If you share a document privately,
 * you must specify the AWS user account IDs for those people who can use the document. If you share a document
 * publicly, you must specify All as the account ID.
 *
 * The permissions mapping supports the following:
 *
 * * `type` - The permission type for the document. The permission type can be `Share`.
 * * `accountIds` - The AWS user accounts that should have access to the document. The account IDs can either be a group of account IDs or `All`.
 *
 * ## Import
 *
 * SSM Documents can be imported using the name, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ssm/document:Document example example
 * ```
 *
 *  The `attachments_source` argument does not have an SSM API method for reading the attachment information detail after creation. If the argument is set in the provider configuration on an imported resource, this provider will always show a difference. To workaround this behavior, either omit the argument from the configuration or use [`ignoreChanges`](https://www.pulumi.com/docs/intro/concepts/programming-model/#ignorechanges) to hide the difference, e.g. terraform resource "aws_ssm_document" "test" {
 *
 *  name
 *
 * = "test_document"
 *
 *  document_type = "Package"
 *
 *  attachments_source {
 *
 *  key
 *
 * = "SourceUrl"
 *
 *  values = ["s3://${aws_s3_bucket.object_bucket.bucket}/test.zip"]
 *
 *  }
 *
 * # There is no AWS SSM API for reading attachments_source info directly
 *
 *  lifecycle {
 *
 *  ignore_changes = [attachments_source]
 *
 *  } }
 */
class Document extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["attachmentsSources"] = state ? state.attachmentsSources : undefined;
            inputs["content"] = state ? state.content : undefined;
            inputs["createdDate"] = state ? state.createdDate : undefined;
            inputs["defaultVersion"] = state ? state.defaultVersion : undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["documentFormat"] = state ? state.documentFormat : undefined;
            inputs["documentType"] = state ? state.documentType : undefined;
            inputs["documentVersion"] = state ? state.documentVersion : undefined;
            inputs["hash"] = state ? state.hash : undefined;
            inputs["hashType"] = state ? state.hashType : undefined;
            inputs["latestVersion"] = state ? state.latestVersion : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["owner"] = state ? state.owner : undefined;
            inputs["parameters"] = state ? state.parameters : undefined;
            inputs["permissions"] = state ? state.permissions : undefined;
            inputs["platformTypes"] = state ? state.platformTypes : undefined;
            inputs["schemaVersion"] = state ? state.schemaVersion : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["targetType"] = state ? state.targetType : undefined;
            inputs["versionName"] = state ? state.versionName : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.content === undefined) && !opts.urn) {
                throw new Error("Missing required property 'content'");
            }
            if ((!args || args.documentType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'documentType'");
            }
            inputs["attachmentsSources"] = args ? args.attachmentsSources : undefined;
            inputs["content"] = args ? args.content : undefined;
            inputs["documentFormat"] = args ? args.documentFormat : undefined;
            inputs["documentType"] = args ? args.documentType : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["permissions"] = args ? args.permissions : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetType"] = args ? args.targetType : undefined;
            inputs["versionName"] = args ? args.versionName : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdDate"] = undefined /*out*/;
            inputs["defaultVersion"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["documentVersion"] = undefined /*out*/;
            inputs["hash"] = undefined /*out*/;
            inputs["hashType"] = undefined /*out*/;
            inputs["latestVersion"] = undefined /*out*/;
            inputs["owner"] = undefined /*out*/;
            inputs["parameters"] = undefined /*out*/;
            inputs["platformTypes"] = undefined /*out*/;
            inputs["schemaVersion"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Document.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Document resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Document(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Document.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Document.__pulumiType;
    }
}
exports.Document = Document;
/** @internal */
Document.__pulumiType = 'aws:ssm/document:Document';
//# sourceMappingURL=document.js.map