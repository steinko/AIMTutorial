"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.FirehoseDeliveryStream = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides a Kinesis Firehose Delivery Stream resource. Amazon Kinesis Firehose is a fully managed, elastic service to easily deliver real-time data streams to destinations such as Amazon S3 and Amazon Redshift.
 *
 * For more details, see the [Amazon Kinesis Firehose Documentation](https://aws.amazon.com/documentation/firehose/).
 *
 * ## Example Usage
 * ### Extended S3 Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.Bucket("bucket", {acl: "private"});
 * const firehoseRole = new aws.iam.Role("firehoseRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "firehose.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const lambdaIam = new aws.iam.Role("lambdaIam", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "lambda.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const lambdaProcessor = new aws.lambda.Function("lambdaProcessor", {
 *     code: new pulumi.asset.FileArchive("lambda.zip"),
 *     role: lambdaIam.arn,
 *     handler: "exports.handler",
 *     runtime: "nodejs12.x",
 * });
 * const extendedS3Stream = new aws.kinesis.FirehoseDeliveryStream("extendedS3Stream", {
 *     destination: "extended_s3",
 *     extendedS3Configuration: {
 *         roleArn: firehoseRole.arn,
 *         bucketArn: bucket.arn,
 *         processingConfiguration: {
 *             enabled: "true",
 *             processors: [{
 *                 type: "Lambda",
 *                 parameters: [{
 *                     parameterName: "LambdaArn",
 *                     parameterValue: pulumi.interpolate`${lambdaProcessor.arn}:$LATEST`,
 *                 }],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### S3 Destination (deprecated)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const bucket = new aws.s3.Bucket("bucket", {acl: "private"});
 * const firehoseRole = new aws.iam.Role("firehoseRole", {assumeRolePolicy: `{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Action": "sts:AssumeRole",
 *       "Principal": {
 *         "Service": "firehose.amazonaws.com"
 *       },
 *       "Effect": "Allow",
 *       "Sid": ""
 *     }
 *   ]
 * }
 * `});
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "s3",
 *     s3Configuration: {
 *         roleArn: firehoseRole.arn,
 *         bucketArn: bucket.arn,
 *     },
 * });
 * ```
 * ### Redshift Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testCluster = new aws.redshift.Cluster("testCluster", {
 *     clusterIdentifier: "tf-redshift-cluster",
 *     databaseName: "test",
 *     masterUsername: "testuser",
 *     masterPassword: "T3stPass",
 *     nodeType: "dc1.large",
 *     clusterType: "single-node",
 * });
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "redshift",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *         bufferSize: 10,
 *         bufferInterval: 400,
 *         compressionFormat: "GZIP",
 *     },
 *     redshiftConfiguration: {
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         clusterJdbcurl: pulumi.interpolate`jdbc:redshift://${testCluster.endpoint}/${testCluster.databaseName}`,
 *         username: "testuser",
 *         password: "T3stPass",
 *         dataTableName: "test-table",
 *         copyOptions: "delimiter '|'",
 *         dataTableColumns: "test-col",
 *         s3BackupMode: "Enabled",
 *         s3BackupConfiguration: {
 *             roleArn: aws_iam_role.firehose_role.arn,
 *             bucketArn: aws_s3_bucket.bucket.arn,
 *             bufferSize: 15,
 *             bufferInterval: 300,
 *             compressionFormat: "GZIP",
 *         },
 *     },
 * });
 * ```
 * ### Elasticsearch Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testCluster = new aws.elasticsearch.Domain("testCluster", {});
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "elasticsearch",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *         bufferSize: 10,
 *         bufferInterval: 400,
 *         compressionFormat: "GZIP",
 *     },
 *     elasticsearchConfiguration: {
 *         domainArn: testCluster.arn,
 *         roleArn: aws_iam_role.firehose_role.arn,
 *         indexName: "test",
 *         typeName: "test",
 *         processingConfiguration: {
 *             enabled: "true",
 *             processors: [{
 *                 type: "Lambda",
 *                 parameters: [{
 *                     parameterName: "LambdaArn",
 *                     parameterValue: `${aws_lambda_function.lambda_processor.arn}:$LATEST`,
 *                 }],
 *             }],
 *         },
 *     },
 * });
 * ```
 * ### Elasticsearch Destination With VPC
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testCluster = new aws.elasticsearch.Domain("testCluster", {
 *     clusterConfig: {
 *         instanceCount: 2,
 *         zoneAwarenessEnabled: true,
 *         instanceType: "t2.small.elasticsearch",
 *     },
 *     ebsOptions: {
 *         ebsEnabled: true,
 *         volumeSize: 10,
 *     },
 *     vpcOptions: {
 *         securityGroupIds: [aws_security_group.first.id],
 *         subnetIds: [
 *             aws_subnet.first.id,
 *             aws_subnet.second.id,
 *         ],
 *     },
 * });
 * const firehose_elasticsearch = new aws.iam.RolePolicy("firehose-elasticsearch", {
 *     role: aws_iam_role.firehose.id,
 *     policy: pulumi.interpolate`{
 *   "Version": "2012-10-17",
 *   "Statement": [
 *     {
 *       "Effect": "Allow",
 *       "Action": [
 *         "es:*"
 *       ],
 *       "Resource": [
 *         "${testCluster.arn}",
 *         "${testCluster.arn}/*"
 *       ]
 *         },
 *         {
 *           "Effect": "Allow",
 *           "Action": [
 *             "ec2:DescribeVpcs",
 *             "ec2:DescribeVpcAttribute",
 *             "ec2:DescribeSubnets",
 *             "ec2:DescribeSecurityGroups",
 *             "ec2:DescribeNetworkInterfaces",
 *             "ec2:CreateNetworkInterface",
 *             "ec2:CreateNetworkInterfacePermission",
 *             "ec2:DeleteNetworkInterface"
 *           ],
 *           "Resource": [
 *             "*"
 *           ]
 *         }
 *   ]
 * }
 * `,
 * });
 * const test = new aws.kinesis.FirehoseDeliveryStream("test", {
 *     destination: "elasticsearch",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *     },
 *     elasticsearchConfiguration: {
 *         domainArn: testCluster.arn,
 *         roleArn: aws_iam_role.firehose.arn,
 *         indexName: "test",
 *         typeName: "test",
 *         vpcConfig: {
 *             subnetIds: [
 *                 aws_subnet.first.id,
 *                 aws_subnet.second.id,
 *             ],
 *             securityGroupIds: [aws_security_group.first.id],
 *             roleArn: aws_iam_role.firehose.arn,
 *         },
 *     },
 * }, {
 *     dependsOn: [firehose_elasticsearch],
 * });
 * ```
 * ### Splunk Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "splunk",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *         bufferSize: 10,
 *         bufferInterval: 400,
 *         compressionFormat: "GZIP",
 *     },
 *     splunkConfiguration: {
 *         hecEndpoint: "https://http-inputs-mydomain.splunkcloud.com:443",
 *         hecToken: "51D4DA16-C61B-4F5F-8EC7-ED4301342A4A",
 *         hecAcknowledgmentTimeout: 600,
 *         hecEndpointType: "Event",
 *         s3BackupMode: "FailedEventsOnly",
 *     },
 * });
 * ```
 * ### HTTP Endpoint (e.g., New Relic) Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const testStream = new aws.kinesis.FirehoseDeliveryStream("testStream", {
 *     destination: "http_endpoint",
 *     s3Configuration: {
 *         roleArn: aws_iam_role.firehose.arn,
 *         bucketArn: aws_s3_bucket.bucket.arn,
 *         bufferSize: 10,
 *         bufferInterval: 400,
 *         compressionFormat: "GZIP",
 *     },
 *     httpEndpointConfiguration: {
 *         url: "https://aws-api.newrelic.com/firehose/v1",
 *         name: "New Relic",
 *         accessKey: "my-key",
 *         bufferingSize: 15,
 *         bufferingInterval: 600,
 *         roleArn: aws_iam_role.firehose.arn,
 *         s3BackupMode: "FailedDataOnly",
 *         requestConfiguration: {
 *             contentEncoding: "GZIP",
 *             commonAttributes: [
 *                 {
 *                     name: "testname",
 *                     value: "testvalue",
 *                 },
 *                 {
 *                     name: "testname2",
 *                     value: "testvalue2",
 *                 },
 *             ],
 *         },
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * Kinesis Firehose Delivery streams can be imported using the stream ARN, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream foo arn:aws:firehose:us-east-1:XXX:deliverystream/example
 * ```
 *
 *  NoteImport does not work for stream destination `s3`. Consider using `extended_s3` since `s3` destination is deprecated.
 */
class FirehoseDeliveryStream extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["destination"] = state ? state.destination : undefined;
            inputs["destinationId"] = state ? state.destinationId : undefined;
            inputs["elasticsearchConfiguration"] = state ? state.elasticsearchConfiguration : undefined;
            inputs["extendedS3Configuration"] = state ? state.extendedS3Configuration : undefined;
            inputs["httpEndpointConfiguration"] = state ? state.httpEndpointConfiguration : undefined;
            inputs["kinesisSourceConfiguration"] = state ? state.kinesisSourceConfiguration : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["redshiftConfiguration"] = state ? state.redshiftConfiguration : undefined;
            inputs["s3Configuration"] = state ? state.s3Configuration : undefined;
            inputs["serverSideEncryption"] = state ? state.serverSideEncryption : undefined;
            inputs["splunkConfiguration"] = state ? state.splunkConfiguration : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["versionId"] = state ? state.versionId : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.destination === undefined) && !opts.urn) {
                throw new Error("Missing required property 'destination'");
            }
            inputs["arn"] = args ? args.arn : undefined;
            inputs["destination"] = args ? args.destination : undefined;
            inputs["destinationId"] = args ? args.destinationId : undefined;
            inputs["elasticsearchConfiguration"] = args ? args.elasticsearchConfiguration : undefined;
            inputs["extendedS3Configuration"] = args ? args.extendedS3Configuration : undefined;
            inputs["httpEndpointConfiguration"] = args ? args.httpEndpointConfiguration : undefined;
            inputs["kinesisSourceConfiguration"] = args ? args.kinesisSourceConfiguration : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["redshiftConfiguration"] = args ? args.redshiftConfiguration : undefined;
            inputs["s3Configuration"] = args ? args.s3Configuration : undefined;
            inputs["serverSideEncryption"] = args ? args.serverSideEncryption : undefined;
            inputs["splunkConfiguration"] = args ? args.splunkConfiguration : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["versionId"] = args ? args.versionId : undefined;
            inputs["tagsAll"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(FirehoseDeliveryStream.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing FirehoseDeliveryStream resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new FirehoseDeliveryStream(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of FirehoseDeliveryStream.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FirehoseDeliveryStream.__pulumiType;
    }
}
exports.FirehoseDeliveryStream = FirehoseDeliveryStream;
/** @internal */
FirehoseDeliveryStream.__pulumiType = 'aws:kinesis/firehoseDeliveryStream:FirehoseDeliveryStream';
//# sourceMappingURL=firehoseDeliveryStream.js.map