"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.Environment = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Creates a MWAA Environment resource.
 *
 * ## Example Usage
 *
 * A MWAA Environment requires an IAM role (`aws.iam.Role`), two subnets in the private zone (`aws.ec2.Subnet`) and a versioned S3 bucket (`aws.s3.Bucket`).
 * ### Basic Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.mwaa.Environment("example", {
 *     dagS3Path: "dags/",
 *     executionRoleArn: aws_iam_role.example.arn,
 *     networkConfiguration: {
 *         securityGroupIds: [aws_security_group.example.id],
 *         subnetIds: aws_subnet["private"].map(__item => __item.id),
 *     },
 *     sourceBucketArn: aws_s3_bucket.example.arn,
 * });
 * ```
 * ### Example with Airflow configuration options
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.mwaa.Environment("example", {
 *     airflowConfigurationOptions: {
 *         "core.default_task_retries": 16,
 *         "core.parallelism": 1,
 *     },
 *     dagS3Path: "dags/",
 *     executionRoleArn: aws_iam_role.example.arn,
 *     networkConfiguration: {
 *         securityGroupIds: [aws_security_group.example.id],
 *         subnetIds: aws_subnet["private"].map(__item => __item.id),
 *     },
 *     sourceBucketArn: aws_s3_bucket.example.arn,
 * });
 * ```
 * ### Example with logging configurations
 *
 * Note that Airflow task logs are enabled by default with the `INFO` log level.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.mwaa.Environment("example", {
 *     dagS3Path: "dags/",
 *     executionRoleArn: aws_iam_role.example.arn,
 *     loggingConfiguration: {
 *         dagProcessingLogs: {
 *             enabled: true,
 *             logLevel: "DEBUG",
 *         },
 *         schedulerLogs: {
 *             enabled: true,
 *             logLevel: "INFO",
 *         },
 *         taskLogs: {
 *             enabled: true,
 *             logLevel: "WARNING",
 *         },
 *         webserverLogs: {
 *             enabled: true,
 *             logLevel: "ERROR",
 *         },
 *         workerLogs: {
 *             enabled: true,
 *             logLevel: "CRITICAL",
 *         },
 *     },
 *     networkConfiguration: {
 *         securityGroupIds: [aws_security_group.example.id],
 *         subnetIds: aws_subnet["private"].map(__item => __item.id),
 *     },
 *     sourceBucketArn: aws_s3_bucket.example.arn,
 * });
 * ```
 * ### Example with tags
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const example = new aws.mwaa.Environment("example", {
 *     dagS3Path: "dags/",
 *     executionRoleArn: aws_iam_role.example.arn,
 *     networkConfiguration: {
 *         securityGroupIds: [aws_security_group.example.id],
 *         subnetIds: aws_subnet["private"].map(__item => __item.id),
 *     },
 *     sourceBucketArn: aws_s3_bucket.example.arn,
 *     tags: {
 *         Name: "example",
 *         Environment: "production",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * MWAA Environment can be imported using `Name` e.g.,
 *
 * ```sh
 *  $ pulumi import aws:mwaa/environment:Environment example MyAirflowEnvironment
 * ```
 */
class Environment extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["airflowConfigurationOptions"] = state ? state.airflowConfigurationOptions : undefined;
            inputs["airflowVersion"] = state ? state.airflowVersion : undefined;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["createdAt"] = state ? state.createdAt : undefined;
            inputs["dagS3Path"] = state ? state.dagS3Path : undefined;
            inputs["environmentClass"] = state ? state.environmentClass : undefined;
            inputs["executionRoleArn"] = state ? state.executionRoleArn : undefined;
            inputs["kmsKey"] = state ? state.kmsKey : undefined;
            inputs["lastUpdateds"] = state ? state.lastUpdateds : undefined;
            inputs["loggingConfiguration"] = state ? state.loggingConfiguration : undefined;
            inputs["maxWorkers"] = state ? state.maxWorkers : undefined;
            inputs["minWorkers"] = state ? state.minWorkers : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["networkConfiguration"] = state ? state.networkConfiguration : undefined;
            inputs["pluginsS3ObjectVersion"] = state ? state.pluginsS3ObjectVersion : undefined;
            inputs["pluginsS3Path"] = state ? state.pluginsS3Path : undefined;
            inputs["requirementsS3ObjectVersion"] = state ? state.requirementsS3ObjectVersion : undefined;
            inputs["requirementsS3Path"] = state ? state.requirementsS3Path : undefined;
            inputs["serviceRoleArn"] = state ? state.serviceRoleArn : undefined;
            inputs["sourceBucketArn"] = state ? state.sourceBucketArn : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["tags"] = state ? state.tags : undefined;
            inputs["tagsAll"] = state ? state.tagsAll : undefined;
            inputs["webserverAccessMode"] = state ? state.webserverAccessMode : undefined;
            inputs["webserverUrl"] = state ? state.webserverUrl : undefined;
            inputs["weeklyMaintenanceWindowStart"] = state ? state.weeklyMaintenanceWindowStart : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.dagS3Path === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dagS3Path'");
            }
            if ((!args || args.executionRoleArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'executionRoleArn'");
            }
            if ((!args || args.networkConfiguration === undefined) && !opts.urn) {
                throw new Error("Missing required property 'networkConfiguration'");
            }
            if ((!args || args.sourceBucketArn === undefined) && !opts.urn) {
                throw new Error("Missing required property 'sourceBucketArn'");
            }
            inputs["airflowConfigurationOptions"] = args ? args.airflowConfigurationOptions : undefined;
            inputs["airflowVersion"] = args ? args.airflowVersion : undefined;
            inputs["dagS3Path"] = args ? args.dagS3Path : undefined;
            inputs["environmentClass"] = args ? args.environmentClass : undefined;
            inputs["executionRoleArn"] = args ? args.executionRoleArn : undefined;
            inputs["kmsKey"] = args ? args.kmsKey : undefined;
            inputs["loggingConfiguration"] = args ? args.loggingConfiguration : undefined;
            inputs["maxWorkers"] = args ? args.maxWorkers : undefined;
            inputs["minWorkers"] = args ? args.minWorkers : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["networkConfiguration"] = args ? args.networkConfiguration : undefined;
            inputs["pluginsS3ObjectVersion"] = args ? args.pluginsS3ObjectVersion : undefined;
            inputs["pluginsS3Path"] = args ? args.pluginsS3Path : undefined;
            inputs["requirementsS3ObjectVersion"] = args ? args.requirementsS3ObjectVersion : undefined;
            inputs["requirementsS3Path"] = args ? args.requirementsS3Path : undefined;
            inputs["sourceBucketArn"] = args ? args.sourceBucketArn : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["webserverAccessMode"] = args ? args.webserverAccessMode : undefined;
            inputs["weeklyMaintenanceWindowStart"] = args ? args.weeklyMaintenanceWindowStart : undefined;
            inputs["arn"] = undefined /*out*/;
            inputs["createdAt"] = undefined /*out*/;
            inputs["lastUpdateds"] = undefined /*out*/;
            inputs["serviceRoleArn"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["tagsAll"] = undefined /*out*/;
            inputs["webserverUrl"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(Environment.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing Environment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new Environment(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of Environment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Environment.__pulumiType;
    }
}
exports.Environment = Environment;
/** @internal */
Environment.__pulumiType = 'aws:mwaa/environment:Environment';
//# sourceMappingURL=environment.js.map