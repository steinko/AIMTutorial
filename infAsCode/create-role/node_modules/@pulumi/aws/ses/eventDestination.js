"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
Object.defineProperty(exports, "__esModule", { value: true });
exports.EventDestination = void 0;
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
/**
 * Provides an SES event destination
 *
 * ## Example Usage
 * ### CloudWatch Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const cloudwatch = new aws.ses.EventDestination("cloudwatch", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     cloudwatchDestinations: [{
 *         defaultValue: "default",
 *         dimensionName: "dimension",
 *         valueSource: "emailHeader",
 *     }],
 * });
 * ```
 * ### Kinesis Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const kinesis = new aws.ses.EventDestination("kinesis", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     kinesisDestination: {
 *         streamArn: aws_kinesis_firehose_delivery_stream.example.arn,
 *         roleArn: aws_iam_role.example.arn,
 *     },
 * });
 * ```
 * ### SNS Destination
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 *
 * const sns = new aws.ses.EventDestination("sns", {
 *     configurationSetName: aws_ses_configuration_set.example.name,
 *     enabled: true,
 *     matchingTypes: [
 *         "bounce",
 *         "send",
 *     ],
 *     snsDestination: {
 *         topicArn: aws_sns_topic.example.arn,
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * SES event destinations can be imported using `configuration_set_name` together with the event destination's `name`, e.g.,
 *
 * ```sh
 *  $ pulumi import aws:ses/eventDestination:EventDestination sns some-configuration-set-test/event-destination-sns
 * ```
 */
class EventDestination extends pulumi.CustomResource {
    constructor(name, argsOrState, opts) {
        let inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState;
            inputs["arn"] = state ? state.arn : undefined;
            inputs["cloudwatchDestinations"] = state ? state.cloudwatchDestinations : undefined;
            inputs["configurationSetName"] = state ? state.configurationSetName : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["kinesisDestination"] = state ? state.kinesisDestination : undefined;
            inputs["matchingTypes"] = state ? state.matchingTypes : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["snsDestination"] = state ? state.snsDestination : undefined;
        }
        else {
            const args = argsOrState;
            if ((!args || args.configurationSetName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'configurationSetName'");
            }
            if ((!args || args.matchingTypes === undefined) && !opts.urn) {
                throw new Error("Missing required property 'matchingTypes'");
            }
            inputs["cloudwatchDestinations"] = args ? args.cloudwatchDestinations : undefined;
            inputs["configurationSetName"] = args ? args.configurationSetName : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["kinesisDestination"] = args ? args.kinesisDestination : undefined;
            inputs["matchingTypes"] = args ? args.matchingTypes : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["snsDestination"] = args ? args.snsDestination : undefined;
            inputs["arn"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion() });
        }
        super(EventDestination.__pulumiType, name, inputs, opts);
    }
    /**
     * Get an existing EventDestination resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    static get(name, id, state, opts) {
        return new EventDestination(name, state, Object.assign(Object.assign({}, opts), { id: id }));
    }
    /**
     * Returns true if the given object is an instance of EventDestination.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EventDestination.__pulumiType;
    }
}
exports.EventDestination = EventDestination;
/** @internal */
EventDestination.__pulumiType = 'aws:ses/eventDestination:EventDestination';
//# sourceMappingURL=eventDestination.js.map