"use strict";
// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
const pulumi = require("@pulumi/pulumi");
const utilities = require("../utilities");
// Export members:
__exportStar(require("./activeReceiptRuleSet"), exports);
__exportStar(require("./confgurationSet"), exports);
__exportStar(require("./configurationSet"), exports);
__exportStar(require("./domainDkim"), exports);
__exportStar(require("./domainIdentity"), exports);
__exportStar(require("./domainIdentityVerification"), exports);
__exportStar(require("./emailIdentity"), exports);
__exportStar(require("./eventDestination"), exports);
__exportStar(require("./identityNotificationTopic"), exports);
__exportStar(require("./identityPolicy"), exports);
__exportStar(require("./mailFrom"), exports);
__exportStar(require("./receiptFilter"), exports);
__exportStar(require("./receiptRule"), exports);
__exportStar(require("./receiptRuleSet"), exports);
__exportStar(require("./template"), exports);
// Import resources to register:
const activeReceiptRuleSet_1 = require("./activeReceiptRuleSet");
const confgurationSet_1 = require("./confgurationSet");
const configurationSet_1 = require("./configurationSet");
const domainDkim_1 = require("./domainDkim");
const domainIdentity_1 = require("./domainIdentity");
const domainIdentityVerification_1 = require("./domainIdentityVerification");
const emailIdentity_1 = require("./emailIdentity");
const eventDestination_1 = require("./eventDestination");
const identityNotificationTopic_1 = require("./identityNotificationTopic");
const identityPolicy_1 = require("./identityPolicy");
const mailFrom_1 = require("./mailFrom");
const receiptFilter_1 = require("./receiptFilter");
const receiptRule_1 = require("./receiptRule");
const receiptRuleSet_1 = require("./receiptRuleSet");
const template_1 = require("./template");
const _module = {
    version: utilities.getVersion(),
    construct: (name, type, urn) => {
        switch (type) {
            case "aws:ses/activeReceiptRuleSet:ActiveReceiptRuleSet":
                return new activeReceiptRuleSet_1.ActiveReceiptRuleSet(name, undefined, { urn });
            case "aws:ses/confgurationSet:ConfgurationSet":
                return new confgurationSet_1.ConfgurationSet(name, undefined, { urn });
            case "aws:ses/configurationSet:ConfigurationSet":
                return new configurationSet_1.ConfigurationSet(name, undefined, { urn });
            case "aws:ses/domainDkim:DomainDkim":
                return new domainDkim_1.DomainDkim(name, undefined, { urn });
            case "aws:ses/domainIdentity:DomainIdentity":
                return new domainIdentity_1.DomainIdentity(name, undefined, { urn });
            case "aws:ses/domainIdentityVerification:DomainIdentityVerification":
                return new domainIdentityVerification_1.DomainIdentityVerification(name, undefined, { urn });
            case "aws:ses/emailIdentity:EmailIdentity":
                return new emailIdentity_1.EmailIdentity(name, undefined, { urn });
            case "aws:ses/eventDestination:EventDestination":
                return new eventDestination_1.EventDestination(name, undefined, { urn });
            case "aws:ses/identityNotificationTopic:IdentityNotificationTopic":
                return new identityNotificationTopic_1.IdentityNotificationTopic(name, undefined, { urn });
            case "aws:ses/identityPolicy:IdentityPolicy":
                return new identityPolicy_1.IdentityPolicy(name, undefined, { urn });
            case "aws:ses/mailFrom:MailFrom":
                return new mailFrom_1.MailFrom(name, undefined, { urn });
            case "aws:ses/receiptFilter:ReceiptFilter":
                return new receiptFilter_1.ReceiptFilter(name, undefined, { urn });
            case "aws:ses/receiptRule:ReceiptRule":
                return new receiptRule_1.ReceiptRule(name, undefined, { urn });
            case "aws:ses/receiptRuleSet:ReceiptRuleSet":
                return new receiptRuleSet_1.ReceiptRuleSet(name, undefined, { urn });
            case "aws:ses/template:Template":
                return new template_1.Template(name, undefined, { urn });
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("aws", "ses/activeReceiptRuleSet", _module);
pulumi.runtime.registerResourceModule("aws", "ses/confgurationSet", _module);
pulumi.runtime.registerResourceModule("aws", "ses/configurationSet", _module);
pulumi.runtime.registerResourceModule("aws", "ses/domainDkim", _module);
pulumi.runtime.registerResourceModule("aws", "ses/domainIdentity", _module);
pulumi.runtime.registerResourceModule("aws", "ses/domainIdentityVerification", _module);
pulumi.runtime.registerResourceModule("aws", "ses/emailIdentity", _module);
pulumi.runtime.registerResourceModule("aws", "ses/eventDestination", _module);
pulumi.runtime.registerResourceModule("aws", "ses/identityNotificationTopic", _module);
pulumi.runtime.registerResourceModule("aws", "ses/identityPolicy", _module);
pulumi.runtime.registerResourceModule("aws", "ses/mailFrom", _module);
pulumi.runtime.registerResourceModule("aws", "ses/receiptFilter", _module);
pulumi.runtime.registerResourceModule("aws", "ses/receiptRule", _module);
pulumi.runtime.registerResourceModule("aws", "ses/receiptRuleSet", _module);
pulumi.runtime.registerResourceModule("aws", "ses/template", _module);
//# sourceMappingURL=index.js.map